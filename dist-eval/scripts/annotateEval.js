import fs from 'fs';
import path from 'path';
import readline from 'readline';
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});
function prompt(query) {
    return new Promise(resolve => rl.question(query, resolve));
}
async function main() {
    console.log("\nüìù AiDuxCare EVAL Annotator CLI\n");
    const patientId = await prompt("üßë‚Äç‚öïÔ∏è Patient ID: ");
    const visitId = await prompt("üìÑ Visit ID: ");
    const visitType = await prompt("üîç Visit Type (evaluation, follow-up, etc.): ");
    const status = await prompt("üìå Visit Status (completed, pending, etc.): ");
    const notes = await prompt("üóíÔ∏è Notes (optional): ");
    const evalData = {
        visit: {
            id: visitId,
            patientId,
            visitType,
            status,
            notes,
            visitDate: new Date().toISOString()
        },
        expectations: {
            retrievableByPatientId: true,
            containsFields: ["visitType", "status"]
        }
    };
    const evalDir = path.resolve('evals/patient-visits');
    if (!fs.existsSync(evalDir))
        fs.mkdirSync(evalDir, { recursive: true });
    const filePath = path.join(evalDir, `eval.${visitId}.js`);
    const fnName = `run${visitId.replace(/[-]/g, '')}Eval`;
    const content = `// Auto-generated by AiDuxCare Annotator CLI
export async function ${fnName}() {
  const visit = ${JSON.stringify(evalData.visit, null, 2)};
  const expectations = ${JSON.stringify(evalData.expectations, null, 2)};

  const VisitService = (await import("../../dist/modules/emr/services/VisitService.js")).default;
  const visits = await VisitService.getByPatientId(visit.patientId);
  const foundInList = visits.some(v => v.id === visit.id);

  const hasRequiredFields = expectations.containsFields.every(field => field in visit);

  if (foundInList && hasRequiredFields) {
    console.log(\`‚úÖ Test PAS√ì: \${patientId} tiene visita \${visitId} v√°lida.\`);
  } else {
    console.error("‚ùå Test FALL√ì: La visita no cumple las expectativas.");
    process.exit(1);
  }
}
`;
    fs.writeFileSync(filePath, content, 'utf-8');
    console.log(`\n‚úÖ EVAL generado exitosamente en ${filePath}`);
    rl.close();
}
main();
