de2c8f23fe098615ce7b40c6f26d2314
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const langfuse_node_1 = require("langfuse-node");
const langfuse = new langfuse_node_1.Langfuse({
    publicKey: process.env.VITE_LANGFUSE_PUBLIC_KEY || '',
    secretKey: process.env.VITE_LANGFUSE_SECRET_KEY || '',
    baseUrl: process.env.VITE_LANGFUSE_HOST || 'https://cloud.langfuse.com'
});
// Campos críticos que deben estar presentes
const CRITICAL_FIELDS = [
    'chiefComplaint',
    'symptoms',
    'diagnosis',
    'treatmentPlan',
    'prognosis',
    'followUp'
];
// Reglas de consistencia
const CONSISTENCY_RULES = [
    {
        name: 'diagnosis_without_symptoms',
        check: (fields) => fields.diagnosis && !fields.symptoms,
        message: 'Diagnóstico presente sin síntomas asociados'
    },
    {
        name: 'treatment_without_diagnosis',
        check: (fields) => fields.treatmentPlan && !fields.diagnosis,
        message: 'Plan de tratamiento presente sin diagnóstico previo'
    },
    {
        name: 'prognosis_without_diagnosis',
        check: (fields) => fields.prognosis && !fields.diagnosis,
        message: 'Pronóstico presente sin diagnóstico previo'
    }
];
async function evaluatePatientVisit(traceId) {
    try {
        // Obtener el trace específico
        const trace = await langfuse.getTrace(traceId);
        if (!trace) {
            throw new Error(`Trace no encontrado: ${traceId}`);
        }
        const patientId = trace.metadata?.patientId;
        if (!patientId) {
            throw new Error('Trace sin patientId en metadata');
        }
        // Recolectar todos los campos del formulario
        const formFields = {};
        trace.observations?.forEach(obs => {
            if (obs.name === 'form.update' && obs.input?.field) {
                formFields[obs.input.field] = obs.input.value;
            }
        });
        // Verificar campos críticos
        const missingFields = CRITICAL_FIELDS.filter(field => !formFields[field] || formFields[field].trim() === '');
        // Verificar reglas de consistencia
        const warnings = CONSISTENCY_RULES
            .filter(rule => rule.check(formFields))
            .map(rule => rule.message);
        // Calcular score de completitud
        const completenessScore = Math.round(((CRITICAL_FIELDS.length - missingFields.length) / CRITICAL_FIELDS.length) * 100);
        return {
            patientId,
            completenessScore,
            missingFields,
            warnings
        };
    }
    catch (error) {
        console.error('Error en evaluación:', error);
        throw error;
    }
}
describe('Evaluaciones de Visitas Estructuradas', () => {
    let testTraceId;
    beforeAll(async () => {
        // Obtener un trace real para pruebas
        const traces = await langfuse.getTraces({
            limit: 1,
            name: 'form.update'
        });
        if (traces.data.length > 0) {
            testTraceId = traces.data[0].id;
        }
        else {
            throw new Error('No se encontraron traces para pruebas');
        }
    });
    test('debe detectar campos faltantes', async () => {
        const result = await evaluatePatientVisit(testTraceId);
        expect(result).toHaveProperty('patientId');
        expect(result).toHaveProperty('completenessScore');
        expect(result).toHaveProperty('missingFields');
        expect(result).toHaveProperty('warnings');
        expect(result.completenessScore).toBeGreaterThanOrEqual(0);
        expect(result.completenessScore).toBeLessThanOrEqual(100);
        expect(Array.isArray(result.missingFields)).toBe(true);
        expect(Array.isArray(result.warnings)).toBe(true);
    });
    test('debe detectar inconsistencias en los datos', async () => {
        const result = await evaluatePatientVisit(testTraceId);
        // Verificar que las advertencias son coherentes
        result.warnings.forEach(warning => {
            expect(typeof warning).toBe('string');
            expect(warning.length).toBeGreaterThan(0);
        });
    });
    test('debe calcular correctamente el score de completitud', async () => {
        const result = await evaluatePatientVisit(testTraceId);
        // El score debe ser proporcional a los campos faltantes
        const expectedScore = Math.round(((CRITICAL_FIELDS.length - result.missingFields.length) / CRITICAL_FIELDS.length) * 100);
        expect(result.completenessScore).toBe(expectedScore);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,