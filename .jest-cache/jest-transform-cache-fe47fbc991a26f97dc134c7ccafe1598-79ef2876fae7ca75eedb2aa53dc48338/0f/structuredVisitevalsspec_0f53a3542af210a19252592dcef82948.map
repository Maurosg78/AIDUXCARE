{"file":"/Users/mauriciosobarzo/Desktop/AIDUXCARE/__tests__/structuredVisit.evals.spec.ts","mappings":"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","names":[],"sources":["/Users/mauriciosobarzo/Desktop/AIDUXCARE/__tests__/structuredVisit.evals.spec.ts"],"sourcesContent":["import { Langfuse } from 'langfuse-node';\nimport { PatientEval } from '../src/types/Evaluation';\n\nconst langfuse = new Langfuse({\n  publicKey: process.env.VITE_LANGFUSE_PUBLIC_KEY || '',\n  secretKey: process.env.VITE_LANGFUSE_SECRET_KEY || '',\n  baseUrl: process.env.VITE_LANGFUSE_HOST || 'https://cloud.langfuse.com'\n});\n\ninterface EvalResult {\n  patientId: string;\n  completenessScore: number;\n  missingFields: string[];\n  warnings: string[];\n}\n\n// Campos críticos que deben estar presentes\nconst CRITICAL_FIELDS = [\n  'chiefComplaint',\n  'symptoms',\n  'diagnosis',\n  'treatmentPlan',\n  'prognosis',\n  'followUp'\n];\n\n// Reglas de consistencia\nconst CONSISTENCY_RULES = [\n  {\n    name: 'diagnosis_without_symptoms',\n    check: (fields: Record<string, any>) => \n      fields.diagnosis && !fields.symptoms,\n    message: 'Diagnóstico presente sin síntomas asociados'\n  },\n  {\n    name: 'treatment_without_diagnosis',\n    check: (fields: Record<string, any>) => \n      fields.treatmentPlan && !fields.diagnosis,\n    message: 'Plan de tratamiento presente sin diagnóstico previo'\n  },\n  {\n    name: 'prognosis_without_diagnosis',\n    check: (fields: Record<string, any>) => \n      fields.prognosis && !fields.diagnosis,\n    message: 'Pronóstico presente sin diagnóstico previo'\n  }\n];\n\nasync function evaluatePatientVisit(traceId: string): Promise<EvalResult> {\n  try {\n    // Obtener el trace específico\n    const trace = await langfuse.getTrace(traceId);\n    if (!trace) {\n      throw new Error(`Trace no encontrado: ${traceId}`);\n    }\n\n    const patientId = trace.metadata?.patientId;\n    if (!patientId) {\n      throw new Error('Trace sin patientId en metadata');\n    }\n\n    // Recolectar todos los campos del formulario\n    const formFields: Record<string, any> = {};\n    trace.observations?.forEach(obs => {\n      if (obs.name === 'form.update' && obs.input?.field) {\n        formFields[obs.input.field] = obs.input.value;\n      }\n    });\n\n    // Verificar campos críticos\n    const missingFields = CRITICAL_FIELDS.filter(field => \n      !formFields[field] || formFields[field].trim() === ''\n    );\n\n    // Verificar reglas de consistencia\n    const warnings = CONSISTENCY_RULES\n      .filter(rule => rule.check(formFields))\n      .map(rule => rule.message);\n\n    // Calcular score de completitud\n    const completenessScore = Math.round(\n      ((CRITICAL_FIELDS.length - missingFields.length) / CRITICAL_FIELDS.length) * 100\n    );\n\n    return {\n      patientId,\n      completenessScore,\n      missingFields,\n      warnings\n    };\n  } catch (error) {\n    console.error('Error en evaluación:', error);\n    throw error;\n  }\n}\n\ndescribe('Evaluaciones de Visitas Estructuradas', () => {\n  let testTraceId: string;\n\n  beforeAll(async () => {\n    // Obtener un trace real para pruebas\n    const traces = await langfuse.getTraces({\n      limit: 1,\n      name: 'form.update'\n    });\n    \n    if (traces.data.length > 0) {\n      testTraceId = traces.data[0].id;\n    } else {\n      throw new Error('No se encontraron traces para pruebas');\n    }\n  });\n\n  test('debe detectar campos faltantes', async () => {\n    const result = await evaluatePatientVisit(testTraceId);\n    \n    expect(result).toHaveProperty('patientId');\n    expect(result).toHaveProperty('completenessScore');\n    expect(result).toHaveProperty('missingFields');\n    expect(result).toHaveProperty('warnings');\n    \n    expect(result.completenessScore).toBeGreaterThanOrEqual(0);\n    expect(result.completenessScore).toBeLessThanOrEqual(100);\n    \n    expect(Array.isArray(result.missingFields)).toBe(true);\n    expect(Array.isArray(result.warnings)).toBe(true);\n  });\n\n  test('debe detectar inconsistencias en los datos', async () => {\n    const result = await evaluatePatientVisit(testTraceId);\n    \n    // Verificar que las advertencias son coherentes\n    result.warnings.forEach(warning => {\n      expect(typeof warning).toBe('string');\n      expect(warning.length).toBeGreaterThan(0);\n    });\n  });\n\n  test('debe calcular correctamente el score de completitud', async () => {\n    const result = await evaluatePatientVisit(testTraceId);\n    \n    // El score debe ser proporcional a los campos faltantes\n    const expectedScore = Math.round(\n      ((CRITICAL_FIELDS.length - result.missingFields.length) / CRITICAL_FIELDS.length) * 100\n    );\n    \n    expect(result.completenessScore).toBe(expectedScore);\n  });\n}); "],"version":3}