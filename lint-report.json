[{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/backend/app.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/backend/middleware/cors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/backend/middleware/errorHandler.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Middleware para manejo centralizado de errores\n */\n\nimport { Request, Response, NextFunction } from 'express';\nimport logger from '../utils/logger';\n\n// Interfaz para errores personalizados con código de estado HTTP\ninterface ApiError extends Error {\n  statusCode?: number;\n  details?: unknown;\n}\n\n/**\n * Middleware para manejar errores de forma centralizada\n */\nexport const errorHandler = (\n  err: ApiError,\n  req: Request,\n  res: Response,\n  next: NextFunction\n): void => {\n  // Determinar el código de estado (por defecto 500)\n  const statusCode = err.statusCode || 500;\n  \n  // Registrar el error\n  logger.error(`${statusCode} - ${err.message}`, {\n    path: req.path,\n    method: req.method,\n    body: req.body,\n    query: req.query,\n    details: err.details || err.stack\n  });\n  \n  // Determinar qué información enviar al cliente basado en el entorno\n  const isProduction = process.env.NODE_ENV === 'production';\n  \n  // En producción no enviamos detalles técnicos\n  const responseBody = {\n    success: false,\n    error: {\n      message: err.message,\n      ...(isProduction ? {} : {\n        stack: err.stack,\n        details: err.details\n      })\n    }\n  };\n  \n  // Enviar respuesta\n  res.status(statusCode).json(responseBody);\n};\n\n/**\n * Helper para crear errores de API con código de estado\n */\nexport const createApiError = (message: string, statusCode: number, details?: unknown): ApiError => {\n  const error: ApiError = new Error(message);\n  error.statusCode = statusCode;\n  error.details = details;\n  return error;\n};\n\n// Error 404 - Recurso no encontrado\nexport const notFoundHandler = (req: Request, res: Response, next: NextFunction): void => {\n  const err: ApiError = new Error(`Ruta no encontrada: ${req.originalUrl}`);\n  err.statusCode = 404;\n  next(err);\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/backend/middleware/requestLogger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[640,643],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[640,643],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[656,659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[656,659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[672,675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[672,675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Middleware para registrar las solicitudes HTTP\n */\n\nimport { Request, Response, NextFunction } from 'express';\nimport logger from '../utils/logger';\n\n/**\n * Middleware que registra información sobre cada solicitud HTTP\n */\nexport const requestLogger = (req: Request, res: Response, next: NextFunction): void => {\n  // Guardar el tiempo de inicio\n  const start = Date.now();\n  \n  // Capturar los datos originales de end para poder calcular el tiempo de respuesta\n  const originalEnd = res.end;\n  \n  // Sobrescribir la función end para registrar después de que la respuesta se haya enviado\n  res.end = function(this: Response, chunk?: any, encoding?: any, callback?: any) {\n    // Calcular el tiempo transcurrido\n    const responseTime = Date.now() - start;\n    \n    // Registrar la solicitud\n    logger.request(\n      req.method,\n      req.originalUrl || req.url,\n      res.statusCode,\n      responseTime\n    );\n    \n    // Llamar a la función original\n    return originalEnd.call(this, chunk, encoding, callback);\n  } as typeof res.end;\n  \n  next();\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/backend/routes/export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/backend/routes/fhir.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/backend/routes/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/backend/routes/mcp.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/backend/tests/app.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/backend/utils/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/backend/utils/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/AudioChecklist.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'axios' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'patientId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":29,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState  } from 'react';\nimport { Box, Button, List, ListItem, ListItemIcon, ListItemText, Checkbox, Typography, Alert, CircularProgress, Stack, Chip } from '@mui/material';\nimport { trackEvent } from '@/core/lib/langfuse.client';\nimport axios from 'axios';\nimport { mcpApiClient } from '@/core/lib/csrf';\n\n// Mapeo de campos internos a campos clínicos estándar\nconst FIELD_MAPPING: Record<string, string> = {\n  motivoConsulta: \"anamnesis\",\n  hallazgosExploracion: \"exploracion\",\n  diagnosticoFisioterapeutico: \"diagnostico\",\n  tratamientoPropuesto: \"plan\"\n};\n\ninterface ValidationAlert {\n  type: string;\n  message: string;\n  field?: string;\n}\n\ninterface AudioChecklistProps {\n  patientId: string;\n  visitId: string;\n  onDataValidated: (data: { field: string; value: string }[]) => void;\n}\n\nexport default function AudioChecklist(props: AudioChecklistProps) {\n  // Desestructurar props correctamente\n  const { patientId, visitId, onDataValidated } = props;\n  \n  const [isListening, setIsListening] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [isValidating, setIsValidating] = useState(false);\n  const [validatedData, setValidatedData] = useState<Array<{\n    field: string;\n    value: string;\n    isValid: boolean;\n  }>>([]);\n  const [validationResult, setValidationResult] = useState<{\n    passed: boolean;\n    alerts: ValidationAlert[];\n    fieldsValidated: string[];\n  } | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const startListening = () => {\n    setIsListening(true);\n    trackEvent(\"audio.start_listening\", {\n      timestamp: new Date().toISOString()\n    });\n\n    // Simular datos capturados por voz con los nuevos campos clínicos estándar\n    setTimeout(() => {\n      const mockData = [\n        { field: \"motivoConsulta\", value: \"Paciente de 45 años refiere dolor lumbar de características mecánicas desde hace 3 semanas. Sin antecedentes traumáticos. Refiere empeoramiento con actividades de carga o sedestación prolongada y alivio parcial con reposo.\", isValid: false },\n        { field: \"hallazgosExploracion\", value: \"Postura antiálgica. Limitación a la flexión lumbar. Dolor a la palpación en musculatura paravertebral. Prueba de Lasègue negativa. No déficit neurológico.\", isValid: false },\n        { field: \"diagnosticoFisioterapeutico\", value: \"Lumbalgia mecánica inespecífica\", isValid: false },\n        { field: \"tratamientoPropuesto\", value: \"1. Terapia manual con técnicas miofasciales. 2. Electroterapia analgésica. 3. Ejercicios de estabilización core. 4. Recomendaciones ergonómicas.\", isValid: false }\n      ];\n      setValidatedData(mockData);\n      setIsListening(false);\n    }, 2000);\n  };\n\n  const toggleFieldValidation = (index: number) => {\n    const newData = [...validatedData];\n    newData[index].isValid = !newData[index].isValid;\n    setValidatedData(newData);\n\n    trackEvent(\"audio.validate_field\", {\n      field: newData[index].field,\n      value: newData[index].value,\n      validated: newData[index].isValid,\n      timestamp: new Date().toISOString()\n    });\n  };\n\n  const handleApproveData = async () => {\n    const approvedFields = validatedData\n      .filter(item => item.isValid)\n      .map(item => ({ \n        field: item.field, \n        value: item.value \n      }));\n\n    if (approvedFields.length === 0) {\n      setError(\"Debes validar al menos un campo para continuar\");\n      return;\n    }\n\n    trackEvent(\"audio.approve_data\", {\n      fields: approvedFields,\n      timestamp: new Date().toISOString()\n    });\n\n    // Primero notificamos al componente padre para actualizar el formulario\n    onDataValidated(approvedFields);\n    \n    // Luego procesamos el flujo automático de validación\n    await processValidationFlow(approvedFields);\n  };\n\n  const processValidationFlow = async (approvedFields: { field: string; value: string }[]) => {\n    setIsSaving(true);\n    setError(null);\n    \n    try {\n      // 1. Almacenar cada campo validado en /api/mcp/store\n      const storePromises = approvedFields.map(async (item) => {\n        // Mapear el campo interno al campo clínico estándar\n        const mappedField = FIELD_MAPPING[item.field];\n        \n        if (!mappedField) {\n          console.warn(`Campo no mapeado: ${item.field}`);\n          return null;\n        }\n        \n        const storePayload = {\n          visit_id: visitId,\n          field: mappedField,\n          role: \"health_professional\",\n          content: item.value,\n          overwrite: true\n        };\n        \n        // Usar cliente protegido con CSRF\n        const response = await mcpApiClient.post('/api/mcp/store', storePayload);\n        return response.data;\n      });\n      \n      // Esperar a que se guarden todos los campos\n      const storeResults = await Promise.all(storePromises);\n      \n      // Verificar si alguno falló\n      const failedStores = storeResults.filter(result => !result || !result.success);\n      if (failedStores.length > 0) {\n        throw new Error(`No se pudieron almacenar ${failedStores.length} campos`);\n      }\n      \n      // 2. Si todos se guardaron correctamente, ejecutar la validación\n      setIsSaving(false);\n      setIsValidating(true);\n      \n      // Usar cliente protegido con CSRF\n      const validateResponse = await mcpApiClient.get('/api/mcp/validate', {\n        params: { visit_id: visitId }\n      });\n      \n      setValidationResult({\n        passed: validateResponse.data.validation_passed,\n        alerts: validateResponse.data.alerts || [],\n        fieldsValidated: validateResponse.data.fields_validated || []\n      });\n      \n      trackEvent(\"validation.completed\", {\n        visit_id: visitId,\n        passed: validateResponse.data.validation_passed,\n        alerts_count: (validateResponse.data.alerts || []).length,\n        timestamp: new Date().toISOString()\n      });\n      \n    } catch (err) {\n      console.error(\"Error en el flujo de validación:\", err);\n      setError(err instanceof Error ? err.message : \"Error inesperado en el proceso de validación\");\n      \n      trackEvent(\"validation.error\", {\n        visit_id: visitId,\n        error: err instanceof Error ? err.message : \"Error desconocido\",\n        timestamp: new Date().toISOString()\n      });\n    } finally {\n      setIsSaving(false);\n      setIsValidating(false);\n    }\n  };\n\n  const getValidationSummary = () => {\n    if (!validationResult) return null;\n    \n    const totalFields = 4; // anamnesis, exploracion, diagnostico, plan\n    const registeredFields = validationResult.fieldsValidated.length;\n    const alertCount = validationResult.alerts.length;\n    \n    let status = \"✅ Completo\";\n    if (alertCount > 0) {\n      status = \"⚠️ Revisión necesaria\";\n    } else if (registeredFields < totalFields) {\n      status = \"⚠️ Incompleto\";\n    }\n    \n    return { registeredFields, totalFields, alertCount, status };\n  };\n\n  return (\n    <Box>\n      <Box sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 2 }}>\n        <Button\n          variant=\"contained\"\n          color={isListening ? \"error\" : \"primary\"}\n          onClick={startListening}\n          disabled={isListening || isSaving || isValidating}\n        >\n          {isListening ? \"🎙️ Escuchando...\" : \"🎙️ Iniciar Escucha\"}\n        </Button>\n      </Box>\n      \n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      {validatedData.length > 0 && (\n        <>\n          <Typography variant=\"subtitle1\" sx={{ mb: 1 }}>\n            Validar datos capturados:\n          </Typography>\n          <List>\n            {validatedData.map((item, index) => (\n              <ListItem key={item.field} dense onClick={() => toggleFieldValidation(index)}>\n                <ListItemIcon>\n                  <Checkbox\n                    edge=\"start\"\n                    checked={item.isValid}\n                    tabIndex={-1}\n                    disableRipple\n                  />\n                </ListItemIcon>\n                <ListItemText \n                  primary={item.field}\n                  secondary={item.value}\n                />\n              </ListItem>\n            ))}\n          </List>\n\n          <Button\n            variant=\"contained\"\n            color=\"success\"\n            onClick={handleApproveData}\n            disabled={!validatedData.some(item => item.isValid) || isSaving || isValidating}\n            sx={{ mt: 2 }}\n          >\n            {isSaving ? (\n              <>\n                <CircularProgress size={20} sx={{ mr: 1, color: 'white' }} />\n                Guardando...\n              </>\n            ) : isValidating ? (\n              <>\n                <CircularProgress size={20} sx={{ mr: 1, color: 'white' }} />\n                Validando...\n              </>\n            ) : (\n              '✅ Aprobar y Validar Registros'\n            )}\n          </Button>\n        </>\n      )}\n      \n      {validationResult && (\n        <Box sx={{ mt: 4, p: 2, border: '1px solid #e0e0e0', borderRadius: 1, bgcolor: '#f9f9f9' }}>\n          <Typography variant=\"h6\" gutterBottom>\n            🔒 Calidad clínica validada:\n          </Typography>\n          \n          {getValidationSummary() && (\n            <Stack spacing={1}>\n              <Typography variant=\"body2\">\n                - Campos registrados: {getValidationSummary()?.registeredFields}/{getValidationSummary()?.totalFields}\n              </Typography>\n              <Typography variant=\"body2\">\n                - Alertas legales: {getValidationSummary()?.alertCount}\n              </Typography>\n              <Typography variant=\"body2\">\n                - Estado general: {getValidationSummary()?.status}\n              </Typography>\n              \n              {validationResult.alerts.length > 0 && (\n                <Box sx={{ mt: 2 }}>\n                  <Typography variant=\"subtitle2\">Detalles de las alertas:</Typography>\n                  <Stack spacing={1} sx={{ mt: 1 }}>\n                    {validationResult.alerts.map((alert, index) => (\n                      <Alert key={index} severity=\"warning\" sx={{ py: 0 }}>\n                        <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                          <Chip size=\"small\" label={alert.field || 'general'} />\n                          {alert.message}\n                        </Stack>\n                      </Alert>\n                    ))}\n                  </Stack>\n                </Box>\n              )}\n            </Stack>\n          )}\n        </Box>\n      )}\n    </Box>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/CopilotPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/ImpactDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/MCPContextView/CurrentVisitCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/MCPContextView/MCPContextView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/MCPContextView/MCPErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/MCPContextView/PatientInfoCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'enrichment' is defined but never used. Allowed unused args must match /^_/u.","line":18,"column":81,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":91}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Paper, Typography, Divider, Grid, Chip } from '@mui/material';\nimport { MCPContext } from '../../core/mcp/CopilotContextBuilder';\n\ninterface PatientInfoCardProps {\n  patientState: MCPContext['patient_state'];\n  enrichment?: MCPContext['enrichment'];\n}\n\n// Definición de una interfaz para los datos del EMR del paciente para evitar errores\ninterface PatientEMRData {\n  name?: string;\n  allergies?: string[];\n  chronicConditions?: string[];\n  medications?: string[];\n}\n\nexport const PatientInfoCard: React.FC<PatientInfoCardProps> = ({ patientState, enrichment }) => {\n  // Creamos un objeto emulado para datos de EMR (estos vendrían de otra fuente en la app real)\n  const emrData: PatientEMRData = {\n    name: \"Paciente de Ejemplo\", // Valor por defecto\n    allergies: [],\n    chronicConditions: [],\n    medications: []\n  };\n\n  return (\n    <Paper elevation={2} sx={{ p: 2 }}>\n      <Typography variant=\"h6\" gutterBottom>\n        Información del Paciente\n      </Typography>\n      <Divider sx={{ mb: 2 }} />\n\n      <Grid container spacing={2}>\n        {/* Nombre del paciente */}\n        {emrData?.name && (\n          <Grid item xs={12}>\n            <Typography variant=\"subtitle1\" color=\"primary\">\n              {emrData.name}\n            </Typography>\n          </Grid>\n        )}\n\n        {/* Datos básicos */}\n        <Grid item xs={6}>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Edad\n          </Typography>\n          <Typography variant=\"body1\">\n            {patientState.age} años\n          </Typography>\n        </Grid>\n\n        <Grid item xs={6}>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Sexo\n          </Typography>\n          <Typography variant=\"body1\">\n            {patientState.sex === 'M' ? 'Masculino' :\n             patientState.sex === 'F' ? 'Femenino' :\n             'Otro'}\n          </Typography>\n        </Grid>\n\n        {/* Alergias */}\n        {emrData?.allergies && emrData.allergies.length > 0 && (\n          <Grid item xs={12}>\n            <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n              Alergias\n            </Typography>\n            <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap' }}>\n              {emrData.allergies.map((allergy, index) => (\n                <Chip\n                  key={index}\n                  label={allergy}\n                  color=\"error\"\n                  size=\"small\"\n                  variant=\"outlined\"\n                />\n              ))}\n            </div>\n          </Grid>\n        )}\n\n        {/* Condiciones Crónicas */}\n        {emrData?.chronicConditions && emrData.chronicConditions.length > 0 && (\n          <Grid item xs={12}>\n            <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n              Condiciones Crónicas\n            </Typography>\n            <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap' }}>\n              {emrData.chronicConditions.map((condition, index) => (\n                <Chip\n                  key={index}\n                  label={condition}\n                  color=\"primary\"\n                  size=\"small\"\n                  variant=\"outlined\"\n                />\n              ))}\n            </div>\n          </Grid>\n        )}\n\n        {/* Medicamentos Actuales */}\n        {emrData?.medications && emrData.medications.length > 0 && (\n          <Grid item xs={12}>\n            <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n              Medicamentos Actuales\n            </Typography>\n            <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap' }}>\n              {emrData.medications.map((medication, index) => (\n                <Chip\n                  key={index}\n                  label={medication}\n                  color=\"info\"\n                  size=\"small\"\n                  variant=\"outlined\"\n                />\n              ))}\n            </div>\n          </Grid>\n        )}\n\n        {/* Historia Clínica */}\n        {patientState.history.length > 0 && (\n          <Grid item xs={12}>\n            <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n              Historia Clínica Relevante\n            </Typography>\n            <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap' }}>\n              {patientState.history.map((item, index) => (\n                <Chip\n                  key={index}\n                  label={item}\n                  color=\"default\"\n                  size=\"small\"\n                  variant=\"outlined\"\n                />\n              ))}\n            </div>\n          </Grid>\n        )}\n      </Grid>\n    </Paper>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/MCPContextView/SystemRulesCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/MCPContextView/VisitHistoryCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'enrichment' is defined but never used. Allowed unused args must match /^_/u.","line":20,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":79}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Paper, Typography, Divider, List, ListItem, ListItemText } from '@mui/material';\nimport { format } from 'date-fns';\nimport { es } from 'date-fns/locale';\nimport { MCPContext } from '../../core/mcp/CopilotContextBuilder';\n\ninterface VisitHistoryCardProps {\n  enrichment?: MCPContext['enrichment'];\n}\n\n// Interfaz para representar una visita médica\ninterface Visit {\n  id: string;\n  date: string;\n  type: string;\n  summary: string;\n  professional: string;\n}\n\nexport const VisitHistoryCard: React.FC<VisitHistoryCardProps> = ({ enrichment }) => {\n  // Datos de ejemplo de visitas (en una app real vendrían de otra fuente)\n  const visits: Visit[] = [];\n  const recentVisits = visits.slice(0, 3); // Mostrar solo las últimas 3 visitas\n\n  return (\n    <Paper elevation={2} sx={{ p: 2 }}>\n      <Typography variant=\"h6\" gutterBottom>\n        Historial de Visitas\n      </Typography>\n      <Divider sx={{ mb: 2 }} />\n\n      {recentVisits.length === 0 ? (\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          No hay visitas previas registradas\n        </Typography>\n      ) : (\n        <List>\n          {recentVisits.map((visit, index) => (\n            <ListItem key={visit.id} divider={index < recentVisits.length - 1}>\n              <ListItemText\n                primary={\n                  <Typography variant=\"subtitle2\">\n                    {format(new Date(visit.date), \"d 'de' MMMM 'de' yyyy\", { locale: es })}\n                  </Typography>\n                }\n                secondary={\n                  <>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Tipo: {visit.type}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      {visit.summary}\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      Profesional: {visit.professional}\n                    </Typography>\n                  </>\n                }\n              />\n            </ListItem>\n          ))}\n        </List>\n      )}\n    </Paper>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/MCPContextView/__tests__/MCPContextView.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1923,1926],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1923,1926],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2238,2241],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2238,2241],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2524,2527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2524,2527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2825,2828],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2825,2828],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":130,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3460,3463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3460,3463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { MemoryRouter, Route, Routes } from 'react-router';\nimport { MCPContextView } from '../MCPContextView';\nimport { useMCPContext } from '../useMCPContext';\n\n// Mock del hook useMCPContext\njest.mock('../useMCPContext');\nconst mockUseMCPContext = useMCPContext as jest.MockedFunction<typeof useMCPContext>;\n\n// Mock de i18next\njest.mock('react-i18next', () => ({\n  useTranslation: () => ({\n    t: (key: string) => key,\n  }),\n}));\n\n// Datos de prueba\nconst mockContext = {\n  patient_state: {\n    age: 45,\n    sex: 'M',\n    history: ['HTA', 'DM2']\n  },\n  visit_metadata: {\n    visit_id: '123',\n    date: new Date().toISOString(),\n    professional: 'dr.test@example.com'\n  },\n  rules_and_constraints: ['Regla 1', 'Regla 2'],\n  system_instructions: 'Instrucciones de prueba',\n  enrichment: {\n    emr: {\n      patient_data: {\n        name: 'Juan Pérez',\n        allergies: ['Penicilina'],\n        chronicConditions: ['HTA'],\n        medications: ['Enalapril']\n      },\n      visit_history: []\n    }\n  }\n};\n\ndescribe('MCPContextView', () => {\n  let queryClient: QueryClient;\n\n  beforeEach(() => {\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: {\n          retry: false,\n        },\n      },\n    });\n  });\n\n  const renderWithProviders = (visitId?: string) => {\n    return render(\n      <QueryClientProvider client={queryClient}>\n        <MemoryRouter initialEntries={[`/mcp/${visitId || '123'}`]}>\n          <Routes>\n            <Route path=\"/mcp/:id\" element={<MCPContextView />} />\n          </Routes>\n        </MemoryRouter>\n      </QueryClientProvider>\n    );\n  };\n\n  it('muestra loader mientras carga', () => {\n    mockUseMCPContext.mockReturnValue({\n      data: undefined,\n      isLoading: true,\n      error: null,\n    } as any);\n\n    renderWithProviders();\n    expect(screen.getByRole('progressbar')).toBeInTheDocument();\n  });\n\n  it('muestra error cuando falla la carga', () => {\n    const error = new Error('Error de prueba');\n    mockUseMCPContext.mockReturnValue({\n      data: undefined,\n      isLoading: false,\n      error,\n    } as any);\n\n    renderWithProviders();\n    expect(screen.getByRole('alert')).toHaveTextContent('Error de prueba');\n  });\n\n  it('muestra advertencia cuando no hay contexto', () => {\n    mockUseMCPContext.mockReturnValue({\n      data: null,\n      isLoading: false,\n      error: null,\n    } as any);\n\n    renderWithProviders();\n    expect(screen.getByRole('alert')).toHaveTextContent('mcp.errors.not_found');\n  });\n\n  it('renderiza correctamente el contexto MCP', async () => {\n    mockUseMCPContext.mockReturnValue({\n      data: mockContext,\n      isLoading: false,\n      error: null,\n    } as any);\n\n    renderWithProviders();\n\n    await waitFor(() => {\n      expect(screen.getByText('Juan Pérez')).toBeInTheDocument();\n      expect(screen.getByText('45 años')).toBeInTheDocument();\n      expect(screen.getByText('Penicilina')).toBeInTheDocument();\n      expect(screen.getByText('HTA')).toBeInTheDocument();\n      expect(screen.getByText('Enalapril')).toBeInTheDocument();\n    });\n  });\n\n  it('llama a onError cuando hay un error', () => {\n    const onError = jest.fn();\n    const error = new Error('Error de prueba');\n    mockUseMCPContext.mockReturnValue({\n      data: undefined,\n      isLoading: false,\n      error,\n    } as any);\n\n    render(<MCPContextView onError={onError} />);\n    expect(onError).toHaveBeenCalledWith(error);\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/MCPContextView/__tests__/useMCPContext.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ReactNode' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ReactNode } from 'react';\nimport type { MCPContext } from '../../../../core/mcp/CopilotContextBuilder';\nimport type { TestWrapperProps } from '@/types/testing';\nimport { renderHook, waitFor } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport axios from 'axios';\nimport { useMCPContext } from '../useMCPContext';\nimport { trackEvent } from '../../../core/lib/langfuse.client';\n\n// Mock de axios\njest.mock('axios');\nconst mockAxios = axios as jest.Mocked<typeof axios>;\n\n// Mock de trackEvent\njest.mock('../../../core/lib/langfuse.client');\nconst mockTrackEvent = trackEvent as jest.MockedFunction<typeof trackEvent>;\n\ndescribe('useMCPContext', () => {\n  let queryClient: QueryClient;\n\n  beforeEach(() => {\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: {\n          retry: false,\n        },\n      },\n    });\n    jest.clearAllMocks();\n  });\n\n  const wrapper = ({ children }: TestWrapperProps) => (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n\n  const mockContext: MCPContext = {\n    patient_state: {\n      age: 45,\n      sex: 'M',\n      history: ['HTA']\n    },\n    visit_metadata: {\n      visit_id: '123',\n      date: new Date().toISOString(),\n      professional: 'test@example.com'\n    },\n    rules_and_constraints: ['Regla 1'],\n    system_instructions: 'Test',\n    enrichment: {}\n  };\n\n  it('retorna undefined si no hay visitId', async () => {\n    const { result } = renderHook(() => useMCPContext(), { wrapper });\n\n    await waitFor(() => {\n      expect(result.current.data).toBeUndefined();\n      expect(result.current.isLoading).toBeFalsy();\n    });\n  });\n\n  it('carga y valida el contexto correctamente', async () => {\n    mockAxios.post.mockResolvedValueOnce({ data: mockContext });\n\n    const { result } = renderHook(() => useMCPContext('123'), { wrapper });\n\n    await waitFor(() => {\n      expect(result.current.data).toEqual(mockContext);\n      expect(result.current.isLoading).toBeFalsy();\n      expect(result.current.error).toBeNull();\n    });\n\n    expect(mockTrackEvent).toHaveBeenCalledWith('mcp_loaded', expect.any(Object));\n  });\n\n  it('maneja errores de la API', async () => {\n    const error = new Error('Error de API');\n    mockAxios.post.mockRejectedValueOnce(error);\n\n    const { result } = renderHook(() => useMCPContext('123'), { wrapper });\n\n    await waitFor(() => {\n      expect(result.current.error).toBe(error);\n      expect(result.current.data).toBeUndefined();\n      expect(result.current.isLoading).toBeFalsy();\n    });\n\n    expect(mockTrackEvent).toHaveBeenCalledWith('mcp_error', expect.any(Object));\n  });\n\n  it('maneja errores de validación', async () => {\n    const invalidContext = { ...mockContext, patient_state: undefined };\n    mockAxios.post.mockResolvedValueOnce({ data: invalidContext });\n\n    const { result } = renderHook(() => useMCPContext('123'), { wrapper });\n\n    await waitFor(() => {\n      expect(result.current.error).toBeTruthy();\n      expect(result.current.data).toBeUndefined();\n      expect(result.current.isLoading).toBeFalsy();\n    });\n\n    expect(mockTrackEvent).toHaveBeenCalledWith('mcp_error', expect.any(Object));\n  });\n\n  it('usa la caché para solicitudes repetidas', async () => {\n    mockAxios.post.mockResolvedValueOnce({ data: mockContext });\n\n    const { result, rerender } = renderHook(() => useMCPContext('123'), { wrapper });\n\n    await waitFor(() => {\n      expect(result.current.data).toEqual(mockContext);\n    });\n\n    rerender();\n\n    expect(mockAxios.post).toHaveBeenCalledTimes(1);\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/MCPContextView/useMCPContext.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/VisitDetail/ClinicalAuditLog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/audit/AuditLogViewer.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/audit/AuditLogViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/auth/AccessControl.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/auth/Login.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/emr/StructuredVisitForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AuditLogClient' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRef  } from 'react';\nimport { Box, Button, TextField, Typography } from '@mui/material';\nimport AuditLogClient from '@/core/clients/AuditLogClient';\nimport { useAuth } from '@/core/context/AuthContext';\nimport type { PatientEval  } from '@/modules/emr/types/Evaluation';\n\ninterface StructuredVisitFormProps {\n  formData: PatientEval;\n  setFormData: React.Dispatch<React.SetStateAction<PatientEval>>;\n  onSubmit: (data: PatientEval) => void;\n}\n\nfunction debounceFieldChange(\n  fn: (field: keyof PatientEval, oldValue: string, newValue: string) => void,\n  delay: number\n) {\n  let timer: NodeJS.Timeout;\n  return (field: keyof PatientEval, oldValue: string, newValue: string) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => fn(field, oldValue, newValue), delay);\n  };\n}\n\nconst StructuredVisitForm: React.FC<StructuredVisitFormProps> = ({ formData, setFormData, onSubmit }) => {\n  const { user } = useAuth();\n  const lastValues = useRef<Partial<PatientEval>>({ ...formData });\n  const debounceRefs = useRef<Record<string, (field: keyof PatientEval, oldValue: string, newValue: string) => void>>({});\n\n  const logFieldChange = (field: keyof PatientEval, oldValue: string, newValue: string) => {\n    if (!formData.patientId || !user?.email) return;\n    \n    // Log simplificado para depuración\n    console.log(`Field changed: ${field}`, { \n      oldValue, \n      newValue, \n      userId: user?.id || 'anonymous', \n      visitId: formData.patientId \n    });\n    \n    // Simulación de registro de cambio de campo\n    try {\n      console.log('[AuditLog] Field update:', {\n        field,\n        oldValue,\n        newValue,\n        visitId: formData.patientId,\n        modifiedBy: user.email,\n      });\n    } catch (error) {\n      console.error('Error logging field change:', error);\n    }\n  };\n\n  const handleFieldChange = (field: keyof PatientEval) => (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setFormData(prev => {\n      const oldValue = prev[field] || '';\n      // Solo loguear si el valor realmente cambió\n      if (oldValue !== value) {\n        if (!debounceRefs.current[field]) {\n          debounceRefs.current[field] = debounceFieldChange(logFieldChange, 1000);\n        }\n        debounceRefs.current[field](field, oldValue, value);\n      }\n      lastValues.current[field] = value;\n      return { ...prev, [field]: value };\n    });\n  };\n\n  const handleFormSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit(formData);\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      onSubmit={handleFormSubmit}\n      sx={{ display: 'flex', flexDirection: 'column', gap: 2, p: 2 }}\n    >\n      <Typography variant=\"h6\">Nueva Visita Estructurada</Typography>\n\n      <TextField\n        label=\"Motivo de Consulta\"\n        value={formData.motivo || ''}\n        onChange={handleFieldChange('motivo')}\n        required\n      />\n\n      <TextField\n        label=\"Diagnóstico Fisioterapéutico\"\n        value={formData.diagnosticoFisioterapeutico || ''}\n        onChange={handleFieldChange('diagnosticoFisioterapeutico')}\n        required\n      />\n\n      <TextField\n        label=\"Tratamiento Propuesto\"\n        value={formData.tratamientoPropuesto || ''}\n        onChange={handleFieldChange('tratamientoPropuesto')}\n        required\n      />\n\n      <TextField\n        label=\"Anamnesis\"\n        value={formData.anamnesis || ''}\n        onChange={handleFieldChange('anamnesis')}\n        required\n      />\n      <TextField\n        label=\"Exploración Física\"\n        value={formData.exam || ''}\n        onChange={handleFieldChange('exam')}\n        required\n      />\n      <TextField\n        label=\"Diagnóstico\"\n        value={formData.diagnosis || ''}\n        onChange={handleFieldChange('diagnosis')}\n        required\n      />\n      <TextField\n        label=\"Plan de Tratamiento\"\n        value={formData.plan || ''}\n        onChange={handleFieldChange('plan')}\n        required\n      />\n      <TextField\n        label=\"Notas Adicionales\"\n        value={formData.notes || ''}\n        onChange={handleFieldChange('notes')}\n        multiline\n        rows={4}\n      />\n\n      <Button type=\"submit\" variant=\"contained\">\n        Guardar Visita\n      </Button>\n    </Box>\n  );\n};\n\nexport default StructuredVisitForm; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/layout/Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/layout/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/layout/Layout.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[305,308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[305,308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[595,598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[595,598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen, fireEvent } from '@testing-library/react';\nimport { describe, it, expect, vi } from 'vitest';\nimport { Layout } from './Layout';\nimport { MemoryRouter } from 'react-router-dom';\n\n// Mock de los componentes internos\nvi.mock('./Sidebar', () => ({\n  Sidebar: ({ isOpen, setIsOpen }: any) => (\n    <div data-testid=\"sidebar\" className={isOpen ? 'open' : 'closed'}>\n      Sidebar Mocked\n      <button onClick={() => setIsOpen(false)} data-testid=\"close-sidebar\">Close</button>\n    </div>\n  )\n}));\n\nvi.mock('./Header', () => ({\n  Header: ({ isSidebarOpen, setIsSidebarOpen }: any) => (\n    <div data-testid=\"header\">\n      Header Mocked\n      <button onClick={() => setIsSidebarOpen(!isSidebarOpen)} data-testid=\"toggle-sidebar\">\n        Toggle\n      </button>\n    </div>\n  )\n}));\n\nvi.mock('./Footer', () => ({\n  Footer: () => <div data-testid=\"footer\">Footer Mocked</div>\n}));\n\n// Mock del contexto de autenticación\nvi.mock('@/core/context/AuthContext', () => ({\n  useAuth: () => ({\n    user: { name: 'Test User', role: 'admin' },\n    isAuthenticated: true,\n    logout: vi.fn()\n  })\n}));\n\ndescribe('Layout Component', () => {\n  it('renderiza correctamente con Header, Sidebar y contenido principal', () => {\n    render(\n      <MemoryRouter>\n        <Layout>\n          <div data-testid=\"content\">Contenido principal</div>\n        </Layout>\n      </MemoryRouter>\n    );\n    \n    expect(screen.getByTestId('header')).toBeInTheDocument();\n    expect(screen.getByTestId('sidebar')).toBeInTheDocument();\n    expect(screen.getByTestId('content')).toBeInTheDocument();\n    expect(screen.getByTestId('footer')).toBeInTheDocument();\n  });\n\n  it('permite alternar la visibilidad del sidebar', () => {\n    render(\n      <MemoryRouter>\n        <Layout>\n          <div>Contenido de prueba</div>\n        </Layout>\n      </MemoryRouter>\n    );\n    \n    // Inicialmente el sidebar está abierto (por valor predeterminado)\n    expect(screen.getByTestId('sidebar')).toHaveClass('open');\n    \n    // Ahora cerramos el sidebar\n    fireEvent.click(screen.getByTestId('close-sidebar'));\n    expect(screen.getByTestId('sidebar')).toHaveClass('closed');\n    \n    // Lo volvemos a abrir\n    fireEvent.click(screen.getByTestId('toggle-sidebar'));\n    expect(screen.getByTestId('sidebar')).toHaveClass('open');\n  });\n\n  it('usa la clase bg-aidux-bone para el fondo principal', () => {\n    const { container } = render(\n      <MemoryRouter>\n        <Layout>\n          <div>Contenido</div>\n        </Layout>\n      </MemoryRouter>\n    );\n    \n    // Verificar que el div principal tiene la clase bg-aidux-bone\n    const mainDiv = container.firstChild as HTMLElement;\n    expect(mainDiv).toHaveClass('bg-aidux-bone');\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/layout/Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/layout/Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/ui/BaseButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/ui/alert/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/ui/button/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/ui/card/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/ui/chart-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/ui/checkbox/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/ui/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/ui/input.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":3,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":3,"endColumn":28,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[40,117],"text":"type InputProps = React.InputHTMLAttributes<HTMLInputElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={className}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\n\nInput.displayName = \"Input\";\n\nexport { Input }; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/ui/stat-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/ui/table/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/ui/text-area.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":4,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":4,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[74,160],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = \"Textarea\";\n\nexport { Textarea }; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/adapters/fhir/__tests__/fhirAdapters.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/adapters/fhir/encounterAdapter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/adapters/fhir/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/adapters/fhir/patientAdapter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/analytics/InteractionLogger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/auth/__tests__/auth.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/auth/config.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[184,187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[184,187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[198,201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[198,201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[259,262],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[259,262],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[270,273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[270,273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[288,291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[288,291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[321,324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[321,324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[332,335],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[332,335],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[350,353],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[350,353],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is defined but never used. Allowed unused args must match /^_/u.","line":31,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'account' is defined but never used. Allowed unused args must match /^_/u.","line":31,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":35}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { UserRole  } from '@/core/types';\n\nexport interface AuthOptions {\n  providers: Array<{\n    id: string;\n    name: string;\n  }>;\n  callbacks: {\n    signIn: (params: { user: any, account: any }) => Promise<boolean>;\n    session: (params: { session: any, user: any }) => Promise<any>;\n    jwt: (params: { token: any, user: any }) => Promise<any>;\n  };\n  pages: {\n    signIn: string;\n    error: string;\n  };\n  session: {\n    strategy: 'jwt';\n    maxAge: number;\n  };\n}\n\nexport const authOptions: AuthOptions = {\n  providers: [\n    {\n      id: 'credentials',\n      name: 'Credentials'\n    }\n  ],\n  callbacks: {\n    signIn: async ({ user, account }) => {\n      // Aquí iría lógica de validación de inicio de sesión\n      return true;\n    },\n    session: async ({ session, user }) => {\n      // Agregar datos del usuario a la sesión\n      if (session?.user) {\n        session.user.id = user.id;\n        session.user.role = user.role as UserRole;\n      }\n      return session;\n    },\n    jwt: async ({ token, user }) => {\n      if (user) {\n        token.id = user.id;\n        token.role = user.role;\n      }\n      return token;\n    }\n  },\n  pages: {\n    signIn: '/auth/login',\n    error: '/auth/error'\n  },\n  session: {\n    strategy: 'jwt',\n    maxAge: 30 * 24 * 60 * 60 // 30 días\n  }\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/clients/AuditLogClient.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'supabase' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/core/lib/supabase';\nimport type { AuditLogEvent } from '@/core/utils/mock';\nimport { getCurrentISODate } from '@/core/utils/mock';\n\n/**\n * Cliente para registrar y obtener eventos de auditoría\n */\nclass AuditLogClientImpl {\n  private events: AuditLogEvent[] = [];\n\n  /**\n   * Registra un evento de auditoría\n   * @param eventData Datos del evento a registrar\n   */\n  async logEvent(eventData: Omit<AuditLogEvent, 'id' | 'timestamp'>): Promise<void> {\n    try {\n      // Crear el evento completo con ID y timestamp\n      const event: AuditLogEvent = {\n        ...eventData,\n        id: `audit-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n        timestamp: getCurrentISODate()\n      };\n      \n      // En desarrollo, solo almacenamos en memoria\n      this.events.unshift(event);\n      \n      // Log simulado\n      console.log('[AuditLog] Event logged:', event);\n    } catch (err) {\n      console.error('Error al registrar evento de auditoría:', err);\n    }\n  }\n  \n  /**\n   * Obtiene eventos de auditoría con filtros opcionales\n   */\n  async getEvents(options: { \n    resourceType?: string;\n    resourceId?: string;\n    userId?: string;\n    startDate?: Date;\n    endDate?: Date;\n    limit?: number;\n  } = {}): Promise<AuditLogEvent[]> {\n    try {\n      // Filtrar los eventos en memoria según opciones\n      let filteredEvents = [...this.events];\n      \n      if (options.resourceType) {\n        filteredEvents = filteredEvents.filter(e => e.resource === options.resourceType);\n      }\n      \n      if (options.resourceId) {\n        filteredEvents = filteredEvents.filter(e => e.resourceId === options.resourceId);\n      }\n      \n      if (options.userId) {\n        filteredEvents = filteredEvents.filter(e => e.userId === options.userId);\n      }\n      \n      if (options.startDate) {\n        filteredEvents = filteredEvents.filter(e => \n          new Date(e.timestamp) >= options.startDate!\n        );\n      }\n      \n      if (options.endDate) {\n        filteredEvents = filteredEvents.filter(e => \n          new Date(e.timestamp) <= options.endDate!\n        );\n      }\n      \n      // Limitar resultados si es necesario\n      if (options.limit) {\n        filteredEvents = filteredEvents.slice(0, options.limit);\n      }\n      \n      return filteredEvents;\n    } catch (err) {\n      console.error('Error al obtener eventos de auditoría:', err);\n      return [];\n    }\n  }\n}\n\n// Exportamos una instancia singleton\nconst auditLogClient = new AuditLogClientImpl();\n\n// Exportamos también métodos estáticos para facilitar su uso\nconst AuditLogClient = {\n  logEvent: (data: Omit<AuditLogEvent, 'id' | 'timestamp'>) => auditLogClient.logEvent(data),\n  getEvents: (options?: Parameters<typeof auditLogClient.getEvents>[0]) => auditLogClient.getEvents(options || {})\n};\n\nexport default AuditLogClient;\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/components/AccessControl.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect  } from 'react';\nimport { useAuth } from '@/core/context/AuthContext';\nimport { Navigate } from '@/core/utils/router';\n\ninterface AccessControlProps {\n  children: React.ReactNode;\n  allowedRoles: string[];\n}\n\nexport const AccessControl: React.FC<AccessControlProps> = ({ children, allowedRoles }) => {\n  const { user } = useAuth();\n\n  if (!user) {\n    return <Navigate to=\"/auth/login\" replace />;\n  }\n\n  if (!allowedRoles.includes(user.role)) {\n    return <Navigate to=\"/professional/dashboard\" replace />;\n  }\n\n  return <>{children}</>;\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/components/Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/components/LoadingOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/components/Navbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/components/RoleBasedRedirect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/config/appConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/config/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/config/routes.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HomePage' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AiDuxCare es un copiloto clínico que se diferencia por:\n * 1. Evaluación en tiempo real de la calidad de las visitas\n * 2. Sugerencias contextuales basadas en evidencia clínica\n * 3. Detección temprana de omisiones o riesgos\n * 4. Integración con sistemas de trazabilidad para auditoría\n * 5. Interfaz adaptativa que se ajusta al flujo de trabajo clínico\n */\n\nimport React from 'react';\nimport { RouteObject, Navigate } from '@/core/utils/router';\nimport { ProtectedRoute } from '@/core/context/AuthContext';\nimport RecordsPage from '@/modules/emr/pages/RecordsPage';\nimport HomePage from '@/modules/core/pages/HomePage';\nimport LoginPage from '@/pages/auth/login';\nimport ProfessionalDashboard from '@/pages/professional/Dashboard';\nimport VisitDetailPage from '@/modules/emr/pages/VisitDetailPage';\nimport PatientVisitListPage from '@/modules/emr/pages/PatientVisitListPage';\nimport PatientVisitCreatePage from '@/modules/emr/pages/PatientVisitCreatePage';\nimport NotFoundPage from '@/pages/404';\nimport MCPPage from '@/pages/mcp/[visitId]';\nimport PatientListPage from '@/modules/emr/pages/PatientListPage';\nimport AuditLogViewerWithRouter from '@/components/audit/AuditLogViewer';\n\nconst routes: RouteObject[] = [\n  {\n    path: '/',\n    element: <Navigate to=\"/auth/login\" replace />,\n  },\n  {\n    path: '/auth/login',\n    element: <LoginPage />,\n  },\n  {\n    path: '/professional/dashboard',\n    element: (\n      <ProtectedRoute allowedRoles={['professional', 'fisioterapeuta']}>\n        <ProfessionalDashboard />\n      </ProtectedRoute>\n    ),\n  },\n  {\n    path: '/visits',\n    element: (\n      <ProtectedRoute>\n        <PatientVisitListPage />\n      </ProtectedRoute>\n    ),\n  },\n  {\n    path: '/visits/:visitId',\n    element: (\n      <ProtectedRoute>\n        <VisitDetailPage />\n      </ProtectedRoute>\n    ),\n  },\n  {\n    path: '/visits/:visitId/audit-log',\n    element: (\n      <ProtectedRoute>\n        <AuditLogViewerWithRouter />\n      </ProtectedRoute>\n    ),\n  },\n  {\n    path: '/mcp/:visitId',\n    element: (\n      <ProtectedRoute>\n        <MCPPage />\n      </ProtectedRoute>\n    ),\n  },\n  {\n    path: '/patients/:patientId/visits',\n    element: (\n      <ProtectedRoute>\n        <PatientVisitListPage />\n      </ProtectedRoute>\n    ),\n  },\n  {\n    path: '/patients/:patientId/visits/new',\n    element: (\n      <ProtectedRoute>\n        <PatientVisitCreatePage />\n      </ProtectedRoute>\n    ),\n  },\n  {\n    path: '/patients',\n    element: (\n      <ProtectedRoute>\n        <PatientListPage />\n      </ProtectedRoute>\n    ),\n  },\n  {\n    path: '/records',\n    element: (\n      <ProtectedRoute>\n        <RecordsPage />\n      </ProtectedRoute>\n    ),\n  },\n  {\n    path: '*',\n    element: <NotFoundPage />,\n  }\n];\n\nexport default routes;\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/context/AuthContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/data/seed/realPatientsSeed.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/data/seed/realVisitsSeed.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/hooks/useLangfuse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/hooks/usePatients.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/hooks/useSession.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/hooks/useUser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/lib/__tests__/supabase.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/lib/authClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/lib/csrf.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1791,1794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1791,1794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1805,1808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1805,1808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2643,2646],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2643,2646],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2712,2715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2712,2715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3414,3417],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3414,3417],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Módulo para gestión de tokens CSRF en el frontend\n * \n * Proporciona funciones para obtener y gestionar tokens CSRF\n * que se utilizan en peticiones de mutación (POST, PUT, DELETE)\n */\n\nimport axios from 'axios';\n\n// Almacén temporal para el token CSRF activo\nlet csrfToken: string | null = null;\nlet csrfExpiry: number | null = null;\n\n// URL base para API MCP (configurable según entorno)\nconst MCP_BASE_URL = process.env.NEXT_PUBLIC_MCP_API_URL || 'http://localhost:8001';\n\n/**\n * Obtiene un token CSRF del servidor\n * \n * @returns Promise<string> Token CSRF\n */\nexport async function fetchCsrfToken(): Promise<string> {\n  try {\n    // Verificar si ya tenemos un token válido\n    if (csrfToken && csrfExpiry && Date.now() < csrfExpiry) {\n      return csrfToken;\n    }\n    \n    // Obtener nuevo token del endpoint CSRF\n    const response = await axios.get(`${MCP_BASE_URL}/api/csrf-token`, {\n      withCredentials: true // Importante para recibir y enviar cookies\n    });\n    \n    if (response.data?.token) {\n      const token: string = response.data.token;\n      csrfToken = token;\n      \n      // Calcular expiración (90% del tiempo total para renovar antes)\n      const expiresInMs = (response.data.expires_in || 86400) * 1000 * 0.9;\n      csrfExpiry = Date.now() + expiresInMs;\n      \n      return token;\n    } else {\n      throw new Error('No se pudo obtener token CSRF del servidor');\n    }\n  } catch (error) {\n    console.error('Error al obtener token CSRF:', error);\n    throw new Error('Error al obtener token CSRF');\n  }\n}\n\n/**\n * Aplica el token CSRF a una instancia de Axios o a una configuración\n * \n * @param config Configuración de Axios o instancia\n * @returns Promise<AxiosRequestConfig> Configuración con CSRF token\n */\nexport async function applyCsrfToken(config: any): Promise<any> {\n  try {\n    const token = await fetchCsrfToken();\n    \n    // Si es una instancia de Axios\n    if (config.defaults && typeof config.defaults.headers === 'object') {\n      config.defaults.headers['X-CSRF-Token'] = token;\n      config.defaults.withCredentials = true;\n      return config;\n    }\n    \n    // Si es una configuración de petición\n    if (!config.headers) {\n      config.headers = {};\n    }\n    \n    config.headers['X-CSRF-Token'] = token;\n    config.withCredentials = true;\n    \n    return config;\n  } catch (error) {\n    console.error('Error al aplicar token CSRF:', error);\n    return config; // Devolver config original si hay error\n  }\n}\n\n/**\n * Crea un interceptor Axios para aplicar automáticamente tokens CSRF\n * \n * @param axiosInstance Instancia de Axios\n */\nexport function setupCsrfInterceptor(axiosInstance: any): void {\n  axiosInstance.interceptors.request.use(async (config: any) => {\n    // Solo aplicar en métodos de mutación\n    if (['post', 'put', 'delete', 'patch'].includes(config.method.toLowerCase())) {\n      try {\n        const token = await fetchCsrfToken();\n        if (!config.headers) {\n          config.headers = {};\n        }\n        config.headers['X-CSRF-Token'] = token;\n        config.withCredentials = true;\n      } catch (error) {\n        console.error('Error en interceptor CSRF:', error);\n      }\n    }\n    return config;\n  });\n}\n\n/**\n * Crea una instancia de Axios con protección CSRF integrada\n * \n * @param baseURL URL base para las peticiones\n * @returns Instancia de Axios configurada\n */\nexport function createCsrfProtectedAxios(baseURL: string): any {\n  const instance = axios.create({\n    baseURL,\n    withCredentials: true\n  });\n  \n  setupCsrfInterceptor(instance);\n  \n  return instance;\n}\n\n// Crear una instancia lista para usar con MCP\nexport const mcpApiClient = createCsrfProtectedAxios(MCP_BASE_URL); ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/lib/langfuse.backend.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/lib/langfuse.client.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[321,324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[321,324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[440,443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[440,443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[607,610],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[607,610],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2019,2022],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2019,2022],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Cliente Langfuse simplificado para TypeScript\n */\n\n// Definir interfaces mínimas para Langfuse\nexport interface LangfuseOptions {\n  publicKey?: string;\n  baseUrl?: string;\n}\n\nexport interface LangfuseObservation {\n  id: string;\n  name: string;\n  startTime?: string;\n  endTime?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface LangfuseTrace {\n  id: string;\n  name: string;\n  userId?: string;\n  metadata?: Record<string, any>;\n  observations?: LangfuseObservation[];\n  startTime?: string;\n  endTime?: string;\n}\n\nexport interface TraceOptions {\n  name: string;\n  metadata?: Record<string, any>;\n  userId?: string;\n  id?: string;\n}\n\n// Soporte para eventos en la interfaz actual\nexport interface EventParams {\n  name: string;\n  payload?: Record<string, unknown>;\n  traceId?: string;\n}\n\n// Soporte para uso con parámetros por separado (formato antiguo)\nexport type EventOptions = string | EventParams;\n\n// Configuración de cliente Langfuse\nconst langfuseConfig: LangfuseOptions = {\n  publicKey: import.meta.env.VITE_LANGFUSE_PUBLIC_KEY,\n  baseUrl: import.meta.env.VITE_LANGFUSE_BASE_URL\n};\n\n// Verificar si las credenciales están presentes\nconst hasCredentials = !!langfuseConfig.publicKey;\n\n// Mock implementación del cliente Langfuse\nexport class LangfuseClient {\n  private traces: LangfuseTrace[] = [];\n  \n  constructor(private options: LangfuseOptions = {}) {}\n  \n  async trace(options: TraceOptions): Promise<{ id: string }> {\n    // Crear ID único si no se proporciona\n    const id = options.id || `trace-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Crear trace simulado\n    const trace: LangfuseTrace = {\n      id,\n      name: options.name,\n      userId: options.userId,\n      metadata: options.metadata,\n      observations: [],\n      startTime: new Date().toISOString()\n    };\n    \n    // Almacenar localmente\n    this.traces.push(trace);\n    \n    console.log('[Langfuse] Created trace:', trace);\n    return { id };\n  }\n  \n  async observation(traceId: string, options: any): Promise<{ id: string }> {\n    const id = `obs-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Crear observación simulada\n    const observation: LangfuseObservation = {\n      id,\n      name: options.name,\n      metadata: options.metadata,\n      startTime: new Date().toISOString()\n    };\n    \n    // Buscar trace y añadir observación\n    const trace = this.traces.find(t => t.id === traceId);\n    if (trace && trace.observations) {\n      trace.observations.push(observation);\n    }\n    \n    console.log('[Langfuse] Created observation:', observation);\n    return { id };\n  }\n}\n\n// Crear una instancia del cliente Langfuse\nexport const langfuseClient = new LangfuseClient(langfuseConfig);\n\n/**\n * Verificar que la configuración de Langfuse está presente\n */\nexport const verifyLangfuseConfig = (): boolean => {\n  return hasCredentials;\n};\n\n/**\n * Seguir un evento en Langfuse con nombre y metadatos\n * Soporta ambos formatos de llamada:\n * 1. trackEvent({ name, payload, traceId })\n * 2. trackEvent(name, metadata)\n */\nexport const trackEvent = async (\n  eventOrName: EventOptions,\n  metadata?: Record<string, unknown>\n): Promise<{ id: string } | null> => {\n  try {\n    let name: string;\n    let payload: Record<string, unknown> = {};\n    let traceId: string | undefined;\n    \n    // Detectar qué formato de parámetros se está utilizando\n    if (typeof eventOrName === 'string') {\n      // Formato antiguo: trackEvent(name, metadata)\n      name = eventOrName;\n      payload = metadata || {};\n    } else {\n      // Formato nuevo: trackEvent({ name, payload, traceId })\n      name = eventOrName.name;\n      payload = eventOrName.payload || {};\n      traceId = eventOrName.traceId;\n    }\n    \n    // Crear trace\n    return await langfuseClient.trace({\n      id: traceId,\n      name,\n      metadata: payload\n    });\n  } catch (error) {\n    console.error('Error al enviar evento a Langfuse:', error);\n    return null;\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/lib/langfuse.config.new.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/lib/langfuse.config.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LangfuseConfig' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Langfuse } from 'langfuse';\nimport type { LangfuseConfig  } from '@/core/types';\n\n// Declaración de tipo para entorno Vite \ndeclare global {\n  interface ImportMetaEnv {\n    readonly VITE_LANGFUSE_PUBLIC_KEY?: string;\n    readonly VITE_LANGFUSE_SECRET_KEY?: string;\n    readonly VITE_ENV?: 'development' | 'production' | 'test';\n    readonly VITE_LANGFUSE_BASE_URL?: string;\n  }\n}\n\n/**\n * Configuración para la integración con Langfuse\n */\n\n// Configuración básica para Langfuse\nexport const langfuseConfig = {\n  publicKey: import.meta.env.VITE_LANGFUSE_PUBLIC_KEY as string | undefined,\n  secretKey: import.meta.env.VITE_LANGFUSE_SECRET_KEY as string | undefined,\n  baseUrl: import.meta.env.VITE_LANGFUSE_BASE_URL as string | undefined,\n  environment: import.meta.env.VITE_ENV as 'development' | 'production' | 'test' | undefined || 'development'\n};\n\n// Detección de ambiente de desarrollo\nexport const isDevelopment = import.meta.env.DEV;\n\n// Verificar que tenemos las credenciales necesarias\nexport const hasCredentials = Boolean(langfuseConfig.publicKey) && Boolean(langfuseConfig.secretKey);\n\n// Funciones de utilidad\nexport function isConfigured(): boolean {\n  return hasCredentials;\n}\n\n// Obtenemos el proyecto actual\nexport function getProject(): string {\n  return 'aiduxcare-client';\n}\n\n// Obtenemos el ambiente actual\nexport function getEnvironment(): string {\n  return langfuseConfig.environment;\n}\n\n// Cliente de Langfuse para el frontend\nexport const langfuseClient: Langfuse | null = (() => {\n  try {\n    if (langfuseConfig.publicKey) {\n      return new Langfuse({\n        publicKey: langfuseConfig.publicKey,\n        // No usar secretKey en el frontend por seguridad\n      });\n    }\n  } catch (error) {\n    console.warn('[AiDuxCare] Error al inicializar Langfuse Client:', error);\n  }\n  return null;\n})();\n\n// Función para verificar la configuración\nexport const verifyLangfuseConfig = (): boolean => {\n  return !!langfuseConfig.publicKey;\n};\n\n// Función para crear un mock para pruebas\nexport function createMockLangfuseClient(): Langfuse {\n  const mockTrace = {\n    id: 'mock-trace-id',\n    update: () => mockTrace,\n    end: () => mockTrace,\n    getParent: () => null,\n    generation: () => ({ id: 'mock-gen-id' }),\n    event: () => ({ id: 'mock-event-id' }),\n    span: () => mockSpan,\n    setUser: () => mockTrace,\n  };\n\n  const mockSpan = {\n    id: 'mock-span-id',\n    update: () => mockSpan,\n    end: () => mockSpan,\n    getParent: () => mockTrace,\n    generation: () => ({ id: 'mock-gen-id' }),\n    event: () => ({ id: 'mock-event-id' }),\n    span: () => mockSpan,\n  };\n\n  return {\n    trace: () => mockTrace,\n    generation: () => ({ id: 'mock-gen-id' }),\n    event: () => ({ id: 'mock-event-id' }),\n    span: () => mockSpan,\n    setUserId: () => {},\n    shutdown: async () => {},\n  } as unknown as Langfuse;\n}\n\n// Función para validar el entorno del servidor\nexport const isServerEnvValid = (): { isValid: boolean; errors: string[] } => {\n  const errors: string[] = [];\n  \n  if (!import.meta.env.VITE_LANGFUSE_PUBLIC_KEY) {\n    errors.push('[AiDuxCare] VITE_LANGFUSE_PUBLIC_KEY no está definido');\n  }\n  if (!import.meta.env.VITE_LANGFUSE_SECRET_KEY) {\n    errors.push('[AiDuxCare] VITE_LANGFUSE_SECRET_KEY no está definido');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n// Función mock para desarrollo\nexport const mockLangfuseEvent = (name: string, metadata: Record<string, unknown> = {}) => {\n  if (import.meta.env.VITE_ENV === 'development') {\n    console.info('[AiDuxCare] Mock Langfuse Event:', { name, ...metadata });\n  }\n  return Promise.resolve();\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/lib/langfuse.server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/lib/langfuse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/lib/supabase.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1099,1102],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1099,1102],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\nimport type { Database } from '../types/supabase';\nimport { createSupabaseMock } from '@/core/utils/mock';\n\n// Establecemos las variables de entorno para el cliente de Supabase\n// Usar undefined en tipos para compatibilidad con vite-env.d.ts\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL as string | undefined;\nconst supabaseKey = import.meta.env.VITE_SUPABASE_KEY as string | undefined;\n\n// Verificar si tenemos las credenciales necesarias\nconst hasCredentials = !!supabaseUrl && !!supabaseKey;\n\n// Añadir headers de verificación en producción\nconst headers = {\n  'x-client-info': 'AiDuxCare/1.0.0',\n};\n\n// Creamos un cliente de Supabase con las opciones adecuadas o un mock\nexport const supabase = hasCredentials && supabaseUrl && supabaseKey\n  ? createClient<Database>(\n      supabaseUrl,\n      supabaseKey,\n      {\n        auth: {\n          persistSession: true,\n          autoRefreshToken: true,\n          detectSessionInUrl: true,\n        },\n        global: {\n          headers\n        }\n      }\n    ) \n  : createSupabaseMock() as any;\n\n// Función para verificar que la configuración de Supabase está presente\nexport function verifySupabaseConfig(): boolean {\n  return hasCredentials;\n}\n\n// Hook para trabajar con Supabase (mantener compatibilidad con código existente)\nexport function useSupabase() {\n  return supabase;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/lib/supabaseClient.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/mcp/ContextEnricher.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/mcp/ContextInputNormalizer.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1067,1070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1067,1070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1166,1169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1166,1169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":80,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":80,"endColumn":50,"suggestions":[{"messageId":"addBrackets","fix":{"range":[2087,2200],"text":"{ const inputValue = JSON.stringify(input);\n        throw new Error(`Tipo de entrada no soportado: ${inputValue}`); }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { z  } from '../../types/schema-utils';\n\nexport enum InputType {\n  TEXT = 'text',\n  VOICE = 'voice',\n  FORM = 'form',\n  EMR = 'emr'\n}\n\nconst VoiceInputSchema = z.object({\n  type: z.literal(InputType.VOICE),\n  audioTranscript: z.string(),\n  confidence: z.number(),\n  language: z.string()\n});\n\nconst TextInputSchema = z.object({\n  type: z.literal(InputType.TEXT),\n  content: z.string()\n});\n\nconst FormInputSchema = z.object({\n  type: z.literal(InputType.FORM),\n  fields: z.record(z.string(), z.object({}))\n});\n\nconst EMRInputSchema = z.object({\n  type: z.literal(InputType.EMR),\n  patientId: z.string(),\n  recordType: z.string(),\n  data: z.record(z.string(), z.object({}))\n});\n\nexport const RawInputSchema = z.discriminatedUnion('type', [\n  VoiceInputSchema,\n  TextInputSchema,\n  FormInputSchema,\n  EMRInputSchema\n]);\n\nexport type RawInput = {\n  type: InputType;\n  // Para InputType.VOICE\n  audioTranscript?: string;\n  confidence?: number;\n  language?: string;\n  // Para InputType.TEXT\n  content?: string;\n  // Para InputType.FORM\n  fields?: Record<string, any>;\n  // Para InputType.EMR\n  patientId?: string;\n  recordType?: string;\n  data?: Record<string, any>;\n};\n\nexport class ContextInputNormalizer {\n  static normalize(input: RawInput): string {\n    switch (input.type) {\n      case InputType.VOICE:\n        return `Transcripción de audio (confianza: ${input.confidence}): ${input.audioTranscript}`;\n      \n      case InputType.TEXT:\n        return input.content || '';\n      \n      case InputType.FORM:\n        return Object.entries(input.fields || {})\n          .map(([key, value]) => `${key}: ${value}`)\n          .join('\\n');\n      \n      case InputType.EMR:\n        return `Datos EMR para paciente ${input.patientId} (${input.recordType}):\\n` +\n          Object.entries(input.data || {})\n            .map(([key, value]) => `${key}: ${value}`)\n            .join('\\n');\n      \n      default:\n        // Exhaustive check con TypeScript para capturar casos no manejados\n        // En runtime debería ser inalcanzable si todas las opciones del enum están cubiertas\n        const inputValue = JSON.stringify(input);\n        throw new Error(`Tipo de entrada no soportado: ${inputValue}`);\n    }\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/mcp/CopilotContextBuilder.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PatientTypes' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/mcp/__tests__/ContextEnricher.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/mcp/__tests__/CopilotContextBuilder.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2561,2564],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2561,2564],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { CopilotContextBuilder } from '../CopilotContextBuilder';\nimport { PatientService } from '@/core/services/patient/PatientService';\nimport { visitExists } from '@/core/services/visit/VisitService';\nimport { trackEvent } from '@/core/lib/langfuse.client';\n\n// Mock de visitExists\njest.mock('@/core/services/visit/VisitService');\nconst mockVisitExists = visitExists as jest.MockedFunction<typeof visitExists>;\n\n// Mock de trackEvent\njest.mock('@/core/lib/langfuse.client');\nconst mockTrackEvent = trackEvent as jest.MockedFunction<typeof trackEvent>;\n\ndescribe('CopilotContextBuilder', () => {\n  const mockGetPatientData = vi.fn();\n  const mockGetVisitHistory = vi.fn();\n  \n  const mockPatientService = {\n    getPatientData: mockGetPatientData,\n    getVisitHistory: mockGetVisitHistory\n  } as unknown as PatientService;\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n    mockGetPatientData.mockResolvedValue(null);\n    mockGetVisitHistory.mockResolvedValue([]);\n    mockVisitExists.mockReturnValue(true); // Por defecto, las visitas existen\n  });\n\n  const validInput = {\n    patientData: {\n      age: 42,\n      sex: 'F' as const,\n      clinicalHistory: ['Dolor lumbar crónico', 'HTA controlada']\n    },\n    formState: {\n      currentInput: 'Paciente refiere dolor lumbar intenso'\n    },\n    professional: {\n      email: 'mauricio@axonvalencia.es'\n    },\n    visit: {\n      id: 'c7d6f3e1-7a9b-4c1d-8a9e-3c6d7f3e1a9b',\n      date: new Date('2024-03-20T10:00:00Z'),\n      type: 'Primera visita'\n    }\n  };\n\n  it('debe construir un contexto MCP válido', async () => {\n    const builder = new CopilotContextBuilder(mockPatientService);\n    const context = await builder.build(validInput);\n\n    expect(context).toMatchObject({\n      user_input: validInput.formState.currentInput,\n      patient_state: {\n        age: validInput.patientData.age,\n        sex: validInput.patientData.sex,\n        history: validInput.patientData.clinicalHistory\n      },\n      visit_metadata: {\n        visit_id: validInput.visit.id,\n        professional: validInput.professional.email\n      }\n    });\n\n    expect(context.rules_and_constraints).toBeInstanceOf(Array);\n    expect(context.system_instructions).toBeTruthy();\n    expect(context.enrichment).toBeDefined();\n    expect(mockTrackEvent).toHaveBeenCalledWith('mcp_context_built', expect.any(Object));\n  });\n\n  it('debe fallar con datos inválidos', async () => {\n    const invalidInput = {\n      patientData: {\n        age: -1, // Edad inválida\n        sex: 'X' as any, // Sexo inválido\n        clinicalHistory: []\n      },\n      formState: {\n        currentInput: ''\n      },\n      professional: {\n        email: 'invalid-email' // Email inválido\n      },\n      visit: {\n        id: 'invalid-uuid', // UUID inválido\n        date: new Date(),\n        type: ''\n      }\n    };\n\n    const builder = new CopilotContextBuilder(mockPatientService);\n    await expect(builder.build(invalidInput)).rejects.toThrow();\n  });\n\n  it('debe incluir datos enriquecidos del EMR', async () => {\n    const mockPatientData = {\n      id: validInput.visit.id,\n      name: 'Test Patient',\n      birthDate: new Date().toISOString(),\n      allergies: ['Test Allergy'],\n      chronicConditions: ['Test Condition'],\n      medications: ['Test Med']\n    };\n\n    mockGetPatientData.mockResolvedValue(mockPatientData);\n    mockGetVisitHistory.mockResolvedValue([\n      {\n        id: 'test-visit-id',\n        date: new Date().toISOString(),\n        type: 'Test Visit',\n        summary: 'Test Summary',\n        professional: 'test@example.com'\n      }\n    ]);\n\n    const builder = new CopilotContextBuilder(mockPatientService);\n    const context = await builder.build(validInput);\n\n    expect(context.enrichment).toBeDefined();\n    const enrichment = context.enrichment!;\n    \n    expect(enrichment.emr).toBeDefined();\n    expect(enrichment.emr!.patient_data).toEqual(mockPatientData);\n    expect(enrichment.emr!.visit_history).toHaveLength(1);\n  });\n\n  it('debe lanzar error si el visitId no existe', async () => {\n    mockVisitExists.mockReturnValue(false);\n\n    const builder = new CopilotContextBuilder(mockPatientService);\n    const invalidInput = {\n      ...validInput,\n      visit: {\n        ...validInput.visit,\n        id: 'invalid-visit-id'\n      }\n    };\n\n    await expect(builder.build(invalidInput)).rejects.toThrow('Visita no encontrada');\n    expect(mockTrackEvent).toHaveBeenCalledWith('mcp_error', {\n      reason: 'invalid_visit_id',\n      visit_id: 'invalid-visit-id',\n      timestamp: expect.any(String)\n    });\n  });\n\n  it('debe validar el formato del visitId', async () => {\n    const builder = new CopilotContextBuilder(mockPatientService);\n    const invalidInput = {\n      ...validInput,\n      visit: {\n        ...validInput.visit,\n        id: 'not-a-uuid'\n      }\n    };\n\n    await expect(builder.build(invalidInput)).rejects.toThrow('Invalid UUID');\n    expect(mockTrackEvent).toHaveBeenCalledWith('mcp_error', {\n      reason: 'validation_error',\n      error: 'Invalid UUID',\n      timestamp: expect.any(String)\n    });\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/mcp/__tests__/EMRIntegration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PatientNotFoundError' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":99,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeAll } from 'vitest';\nimport { CopilotContextBuilder } from '../CopilotContextBuilder';\nimport { PatientService, PatientNotFoundError } from '@/core/services/patient/PatientService';\nimport axios from 'axios';\n\ndescribe('EMR Integration Tests', () => {\n  let patientService: PatientService;\n  let builder: CopilotContextBuilder;\n\n  beforeAll(() => {\n    // Usar la URL base real para los tests de integración\n    patientService = new PatientService('http://localhost:3000/api');\n    builder = new CopilotContextBuilder(patientService);\n  });\n\n  it('debe construir contexto MCP con datos reales del EMR', async () => {\n    const input = {\n      patientData: {\n        age: 48,\n        sex: 'M' as const,\n        clinicalHistory: []\n      },\n      formState: {\n        currentInput: 'Paciente refiere dolor lumbar intenso'\n      },\n      professional: {\n        email: 'dr.garcia@aiduxcare.com'\n      },\n      visit: {\n        id: 'p1', // ID de paciente existente en el mock\n        date: new Date(),\n        type: 'Control'\n      }\n    };\n\n    const context = await builder.build(input);\n\n    // Validar estructura básica del contexto\n    expect(context.user_input).toBe(input.formState.currentInput);\n    expect(context.visit_metadata.visit_id).toBe(input.visit.id);\n\n    // Validar datos enriquecidos del EMR\n    expect(context.enrichment).toBeDefined();\n    const enrichment = context.enrichment!;\n    \n    expect(enrichment.emr).toBeDefined();\n    const emrData = enrichment.emr!;\n\n    // Validar datos del paciente\n    expect(emrData.patient_data).toBeDefined();\n    expect(emrData.patient_data!.name).toBe('Juan García López');\n    expect(emrData.patient_data!.chronicConditions).toContain('Hipertensión Arterial');\n\n    // Validar historial de visitas\n    expect(emrData.visit_history).toHaveLength(2);\n    expect(emrData.visit_history[0].professional).toBe('dr.garcia@aiduxcare.com');\n  });\n\n  it('debe manejar correctamente un paciente no existente', async () => {\n    const input = {\n      patientData: {\n        age: 35,\n        sex: 'F' as const,\n        clinicalHistory: []\n      },\n      formState: {\n        currentInput: 'Primera visita'\n      },\n      professional: {\n        email: 'dr.garcia@aiduxcare.com'\n      },\n      visit: {\n        id: 'non-existent-id',\n        date: new Date(),\n        type: 'Primera Visita'\n      }\n    };\n\n    const context = await builder.build(input);\n\n    // Validar que el contexto se construye pero sin datos del EMR\n    expect(context.enrichment).toBeDefined();\n    const enrichment = context.enrichment!;\n    \n    expect(enrichment.emr).toBeDefined();\n    const emrData = enrichment.emr!;\n\n    expect(emrData.patient_data).toBeNull();\n    expect(emrData.visit_history).toEqual([]);\n    expect(emrData.error).toBeDefined();\n  });\n\n  it('debe validar la conexión con el servidor EMR', async () => {\n    try {\n      const response = await axios.get('http://localhost:3000/api/patient/p1');\n      expect(response.status).toBe(200);\n      expect(response.data).toHaveProperty('patient');\n      expect(response.data).toHaveProperty('visits');\n    } catch (error) {\n      throw new Error('El servidor EMR no está disponible. Asegúrate de que esté corriendo en localhost:3000');\n    }\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/mcp/enrichment/EMREnrichmentSource.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/mcp/interfaces/MCPTool.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/mcp/schemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/middleware/security.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3133,3136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3133,3136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":137,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4174,4177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4174,4177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Middleware de seguridad para Express\n * \n * Implementa cabeceras de seguridad HTTP y otras medidas\n * de protección para el servidor Express.\n */\n\nimport { Request, Response, NextFunction } from 'express';\n\n/**\n * Middleware para aplicar encabezados de seguridad HTTP\n */\nexport function securityHeaders(req: Request, res: Response, next: NextFunction): void {\n  // Prevenir sniffing de MIME type\n  res.setHeader('X-Content-Type-Options', 'nosniff');\n  \n  // Prevenir que el sitio se muestre en un iframe\n  res.setHeader('X-Frame-Options', 'DENY');\n  \n  // Controlar información de referencia\n  res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');\n  \n  // Content Security Policy - Ajustado para API\n  const csp = [\n    \"default-src 'self'\",\n    \"script-src 'self'\",\n    \"img-src 'self' data:\",\n    \"style-src 'self'\",\n    \"connect-src 'self'\",\n    \"font-src 'self'\",\n    \"object-src 'none'\",\n    \"frame-ancestors 'none'\"\n  ].join('; ');\n  \n  res.setHeader('Content-Security-Policy', csp);\n  \n  // HSTS - Strict Transport Security (solo en producción)\n  if (process.env.NODE_ENV === 'production') {\n    res.setHeader('Strict-Transport-Security', 'max-age=31536000; includeSubDomains; preload');\n  }\n  \n  // Para APIs, deshabilitar caché\n  if (req.path.startsWith('/api/')) {\n    res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');\n    res.setHeader('Pragma', 'no-cache');\n    res.setHeader('Expires', '0');\n  }\n  \n  next();\n}\n\n/**\n * Middleware para protección básica contra ataques\n */\nexport function basicProtection(req: Request, res: Response, next: NextFunction): void {\n  // Limitar tamaño de payload para evitar DoS\n  const contentLength = parseInt(req.headers['content-length'] as string || '0', 10);\n  const MAX_CONTENT_LENGTH = 1 * 1024 * 1024; // 1MB\n  \n  if (contentLength > MAX_CONTENT_LENGTH) {\n    return res.status(413).json({\n      error: 'Payload demasiado grande',\n      maxSize: `${MAX_CONTENT_LENGTH / 1024 / 1024}MB`\n    });\n  }\n  \n  // Validar Content-Type para solicitudes POST/PUT/PATCH\n  if (['POST', 'PUT', 'PATCH'].includes(req.method)) {\n    const contentType = req.headers['content-type'] || '';\n    \n    if (!contentType.includes('application/json') && \n        !contentType.includes('multipart/form-data') && \n        !contentType.includes('application/x-www-form-urlencoded')) {\n      return res.status(415).json({\n        error: 'Content-Type no soportado',\n        acceptedTypes: 'application/json, multipart/form-data, application/x-www-form-urlencoded'\n      });\n    }\n  }\n  \n  next();\n}\n\n/**\n * Middleware para validación simple de parámetros críticos\n */\nexport function validateParams(req: Request, res: Response, next: NextFunction): void {\n  // Lista de patrones de inyección comunes\n  const suspiciousPatterns = [\n    /\\.\\.\\//g,           // Path traversal\n    /\\s*(;|--|\\/\\*|\\|)/g, // SQL injection\n    /<script>/ig,        // XSS simple\n    /document\\./ig,      // XSS DOM\n    /eval\\(/ig,          // Evaluación dinámica\n  ];\n  \n  // Función para verificar un objeto en busca de patrones sospechosos\n  const checkObject = (obj: any): string | null => {\n    if (!obj) return null;\n    \n    for (const key in obj) {\n      if (typeof obj[key] === 'string') {\n        const value = obj[key] as string;\n        \n        for (const pattern of suspiciousPatterns) {\n          if (pattern.test(value)) {\n            return `Patrón sospechoso detectado en parámetro: ${key}`;\n          }\n        }\n      } else if (typeof obj[key] === 'object') {\n        const result = checkObject(obj[key]);\n        if (result) return result;\n      }\n    }\n    \n    return null;\n  };\n  \n  // Verificar query params, params y body\n  const queryCheck = checkObject(req.query);\n  const paramsCheck = checkObject(req.params);\n  const bodyCheck = checkObject(req.body);\n  \n  if (queryCheck || paramsCheck || bodyCheck) {\n    return res.status(400).json({\n      error: 'Parámetros inválidos detectados',\n      detail: queryCheck || paramsCheck || bodyCheck\n    });\n  }\n  \n  next();\n}\n\n/**\n * Aplica todos los middlewares de seguridad en un solo paso\n */\nexport function applySecurityMiddleware(app: any): void {\n  app.use(securityHeaders);\n  app.use(basicProtection);\n  app.use(validateParams);\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/router-compat/LinkComponent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/router-compat/NavigateComponent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/router-compat/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/router/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/router/routes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/schemas/PatientSchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/schemas/ProfessionalSchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/schemas/VisitSchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/services/AuditLogService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/services/__tests__/AuditLogService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/services/export/ExportService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":529,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":529,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14480,14483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14480,14483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":613,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":613,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17010,17013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17010,17013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { PDFDocument, rgb, StandardFonts, PageSizes } from 'pdf-lib';\nimport type { Visit, Patient, User, PatientEval  } from '@/core/types';\nimport { trackEvent } from '@/core/lib/langfuse.client';\nimport DocumentSignatureService from '@/core/services/security/DocumentSignatureService';\n\n/**\n * Clase para el servicio de exportación de documentos\n * Encargada de generar PDFs a partir de datos de la aplicación\n */\nexport class ExportService {\n  /**\n   * Genera un PDF con los datos de una visita médica\n   * @param visit Datos de la visita\n   * @param patient Datos del paciente\n   * @param professional Datos del profesional\n   * @param evaluation Datos de la evaluación clínica\n   * @param signDocument Indica si se debe firmar digitalmente el documento\n   * @returns Array de bytes (Uint8Array) que representa el documento PDF\n   */\n  static async generateVisitPDF(\n    visit: Visit,\n    patient: Patient,\n    professional: User,\n    evaluation?: PatientEval,\n    signDocument: boolean = true\n  ): Promise<Uint8Array> {\n    try {\n      // Registrar evento de generación de PDF\n      await trackEvent('emr.generate_pdf', {\n        visitId: visit.id,\n        patientId: visit.patientId,\n        professionalId: professional.id,\n        action: 'export',\n        operation: 'generateVisitPDF'\n      });\n\n      // Crear un nuevo documento PDF\n      const pdfDoc = await PDFDocument.create();\n      \n      // Agregar una página al documento (tamaño A4)\n      const page = pdfDoc.addPage(PageSizes.A4);\n      \n      // Obtener las fuentes estándar\n      const helveticaBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);\n      const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica);\n      const helveticaOblique = await pdfDoc.embedFont(StandardFonts.HelveticaOblique);\n      \n      // Dimensiones de la página\n      const { width, height } = page.getSize();\n      const margin = 50;\n      const contentWidth = width - 2 * margin;\n      \n      // Colores para el documento\n      const primaryColor = rgb(0.13, 0.4, 0.76); // Azul AiDuxCare\n      const textColor = rgb(0.1, 0.1, 0.1);      // Casi negro\n      const subtitleColor = rgb(0.4, 0.4, 0.4);  // Gris\n      \n      // -- ENCABEZADO --\n      let currentY = height - margin;\n      \n      // Logo / Título\n      page.drawText('AiDuxCare', {\n        x: margin,\n        y: currentY,\n        size: 24,\n        font: helveticaBold,\n        color: primaryColor,\n      });\n      \n      // Fecha y hora del documento\n      const now = new Date();\n      const formattedDate = now.toLocaleDateString('es-ES', {\n        day: '2-digit', \n        month: '2-digit', \n        year: 'numeric'\n      });\n      \n      const formattedTime = now.toLocaleTimeString('es-ES', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n      \n      page.drawText(`Fecha de impresión: ${formattedDate} ${formattedTime}`, {\n        x: width - margin - 200,\n        y: currentY,\n        size: 10,\n        font: helvetica,\n        color: subtitleColor,\n      });\n      \n      currentY -= 20;\n      \n      // Línea separadora\n      page.drawLine({\n        start: { x: margin, y: currentY },\n        end: { x: width - margin, y: currentY },\n        thickness: 1,\n        color: primaryColor,\n      });\n      \n      currentY -= 30;\n      \n      // -- TÍTULO DOCUMENTO --\n      page.drawText('INFORME DE VISITA CLÍNICA', {\n        x: margin,\n        y: currentY,\n        size: 16,\n        font: helveticaBold,\n        color: primaryColor,\n      });\n      \n      currentY -= 40;\n      \n      // -- DATOS DEL PACIENTE --\n      page.drawText('DATOS DEL PACIENTE', {\n        x: margin,\n        y: currentY,\n        size: 14,\n        font: helveticaBold,\n        color: primaryColor,\n      });\n      \n      currentY -= 20;\n      \n      // Nombre del paciente\n      page.drawText(`Nombre: ${patient.firstName} ${patient.lastName}`, {\n        x: margin,\n        y: currentY,\n        size: 12,\n        font: helvetica,\n        color: textColor,\n      });\n      \n      currentY -= 20;\n      \n      // ID del paciente\n      page.drawText(`ID Paciente: ${patient.id}`, {\n        x: margin,\n        y: currentY,\n        size: 12,\n        font: helvetica,\n        color: textColor,\n      });\n      \n      // Datos adicionales en la misma línea (si están disponibles)\n      if (patient.age) {\n        page.drawText(`Edad: ${patient.age} años`, {\n          x: margin + 250,\n          y: currentY,\n          size: 12,\n          font: helvetica,\n          color: textColor,\n        });\n      }\n      \n      currentY -= 20;\n      \n      // Email del paciente (si está disponible)\n      if (patient.email) {\n        page.drawText(`Email: ${patient.email}`, {\n          x: margin,\n          y: currentY,\n          size: 12,\n          font: helvetica,\n          color: textColor,\n        });\n        \n        currentY -= 20;\n      }\n      \n      // Teléfono del paciente (si está disponible)\n      if (patient.phone) {\n        page.drawText(`Teléfono: ${patient.phone}`, {\n          x: margin,\n          y: currentY,\n          size: 12,\n          font: helvetica,\n          color: textColor,\n        });\n        \n        currentY -= 20;\n      }\n      \n      currentY -= 20;\n      \n      // -- DATOS DE LA VISITA --\n      page.drawText('DATOS DE LA VISITA', {\n        x: margin,\n        y: currentY,\n        size: 14,\n        font: helveticaBold,\n        color: primaryColor,\n      });\n      \n      currentY -= 20;\n      \n      // ID de visita\n      page.drawText(`ID Visita: ${visit.id}`, {\n        x: margin,\n        y: currentY,\n        size: 12,\n        font: helvetica,\n        color: textColor,\n      });\n      \n      currentY -= 20;\n      \n      // Fecha de la visita\n      const visitDate = new Date(visit.date || visit.visitDate || now.toISOString());\n      page.drawText(`Fecha: ${visitDate.toLocaleDateString('es-ES', {\n        day: '2-digit', \n        month: '2-digit', \n        year: 'numeric'\n      })}`, {\n        x: margin,\n        y: currentY,\n        size: 12,\n        font: helvetica,\n        color: textColor,\n      });\n      \n      // Estado de la visita\n      page.drawText(`Estado: ${visit.status}`, {\n        x: margin + 250,\n        y: currentY,\n        size: 12,\n        font: helvetica,\n        color: textColor,\n      });\n      \n      currentY -= 20;\n      \n      // Tipo de visita (si está disponible)\n      if (visit.type || visit.visitType) {\n        page.drawText(`Tipo: ${visit.type || visit.visitType}`, {\n          x: margin,\n          y: currentY,\n          size: 12,\n          font: helvetica,\n          color: textColor,\n        });\n        \n        currentY -= 20;\n      }\n      \n      currentY -= 20;\n      \n      // -- DATOS CLÍNICOS --\n      if (evaluation) {\n        page.drawText('DATOS CLÍNICOS', {\n          x: margin,\n          y: currentY,\n          size: 14,\n          font: helveticaBold,\n          color: primaryColor,\n        });\n        \n        currentY -= 30;\n\n        // Motivo de consulta\n        if (evaluation.motivo || evaluation.anamnesis) {\n          page.drawText('Motivo de consulta / Anamnesis:', {\n            x: margin,\n            y: currentY,\n            size: 12,\n            font: helveticaBold,\n            color: textColor,\n          });\n          \n          currentY -= 20;\n          \n          const motivoText = evaluation.motivo || evaluation.anamnesis || 'No especificado';\n          const motivoLines = this.getTextLines(motivoText, helvetica, 11, contentWidth);\n          \n          motivoLines.forEach(line => {\n            page.drawText(line, {\n              x: margin,\n              y: currentY,\n              size: 11,\n              font: helvetica,\n              color: textColor,\n            });\n            \n            currentY -= 15;\n          });\n          \n          currentY -= 10;\n        }\n        \n        // Exploración física\n        if (evaluation.physicalExam) {\n          page.drawText('Exploración física:', {\n            x: margin,\n            y: currentY,\n            size: 12,\n            font: helveticaBold,\n            color: textColor,\n          });\n          \n          currentY -= 20;\n          \n          const explorationLines = this.getTextLines(evaluation.physicalExam, helvetica, 11, contentWidth);\n          \n          explorationLines.forEach(line => {\n            page.drawText(line, {\n              x: margin,\n              y: currentY,\n              size: 11,\n              font: helvetica,\n              color: textColor,\n            });\n            \n            currentY -= 15;\n          });\n          \n          currentY -= 10;\n        }\n        \n        // Diagnóstico\n        if (evaluation.diagnosis || evaluation.diagnosticoFisioterapeutico) {\n          page.drawText('Diagnóstico:', {\n            x: margin,\n            y: currentY,\n            size: 12,\n            font: helveticaBold,\n            color: textColor,\n          });\n          \n          currentY -= 20;\n          \n          const diagnosisText = evaluation.diagnosis || evaluation.diagnosticoFisioterapeutico || 'No especificado';\n          const diagnosisLines = this.getTextLines(diagnosisText, helvetica, 11, contentWidth);\n          \n          diagnosisLines.forEach(line => {\n            page.drawText(line, {\n              x: margin,\n              y: currentY,\n              size: 11,\n              font: helvetica,\n              color: textColor,\n            });\n            \n            currentY -= 15;\n          });\n          \n          currentY -= 10;\n        }\n        \n        // Plan de tratamiento\n        if (evaluation.treatment || evaluation.tratamientoPropuesto) {\n          page.drawText('Plan de tratamiento:', {\n            x: margin,\n            y: currentY,\n            size: 12,\n            font: helveticaBold,\n            color: textColor,\n          });\n          \n          currentY -= 20;\n          \n          const treatmentText = evaluation.treatment || evaluation.tratamientoPropuesto || 'No especificado';\n          const treatmentLines = this.getTextLines(treatmentText, helvetica, 11, contentWidth);\n          \n          treatmentLines.forEach(line => {\n            page.drawText(line, {\n              x: margin,\n              y: currentY,\n              size: 11,\n              font: helvetica,\n              color: textColor,\n            });\n            \n            currentY -= 15;\n          });\n          \n          currentY -= 10;\n        }\n        \n        // Observaciones (si están disponibles)\n        if (evaluation.observations) {\n          page.drawText('Observaciones:', {\n            x: margin,\n            y: currentY,\n            size: 12,\n            font: helveticaBold,\n            color: textColor,\n          });\n          \n          currentY -= 20;\n          \n          const observationsLines = this.getTextLines(evaluation.observations, helvetica, 11, contentWidth);\n          \n          observationsLines.forEach(line => {\n            page.drawText(line, {\n              x: margin,\n              y: currentY,\n              size: 11,\n              font: helvetica,\n              color: textColor,\n            });\n            \n            currentY -= 15;\n          });\n          \n          currentY -= 10;\n        }\n      } else {\n        // Mensaje cuando no hay datos clínicos\n        page.drawText('No hay datos clínicos disponibles', {\n          x: margin,\n          y: currentY,\n          size: 12,\n          font: helveticaOblique,\n          color: subtitleColor,\n        });\n        \n        currentY -= 30;\n      }\n      \n      // -- FIRMA DEL PROFESIONAL --\n      currentY = Math.min(currentY, 150); // Asegurar espacio para la firma\n      \n      // Línea de firma\n      page.drawLine({\n        start: { x: margin, y: currentY },\n        end: { x: margin + 200, y: currentY },\n        thickness: 1,\n        color: subtitleColor,\n      });\n      \n      currentY -= 15;\n      \n      // Nombre del profesional\n      page.drawText(`${professional.name}`, {\n        x: margin,\n        y: currentY,\n        size: 11,\n        font: helveticaBold,\n        color: textColor,\n      });\n      \n      currentY -= 15;\n      \n      // Rol del profesional\n      page.drawText(`${this.getRoleDisplay(professional.role)}`, {\n        x: margin,\n        y: currentY,\n        size: 10,\n        font: helvetica,\n        color: textColor,\n      });\n      \n      currentY -= 15;\n      \n      // Fecha de firma\n      page.drawText(`Fecha: ${formattedDate}`, {\n        x: margin,\n        y: currentY,\n        size: 10,\n        font: helvetica,\n        color: textColor,\n      });\n      \n      // -- PIE DE PÁGINA --\n      const footerY = 30;\n      \n      // Línea separadora del pie de página\n      page.drawLine({\n        start: { x: margin, y: footerY + 10 },\n        end: { x: width - margin, y: footerY + 10 },\n        thickness: 0.5,\n        color: subtitleColor,\n      });\n      \n      // Texto del pie de página\n      page.drawText('Este documento fue generado por AiDuxCare - Sistema de Gestión Clínica', {\n        x: margin,\n        y: footerY,\n        size: 8,\n        font: helvetica,\n        color: subtitleColor,\n      });\n      \n      // Numeración de página\n      page.drawText('Página 1 de 1', {\n        x: width - margin - 60,\n        y: footerY,\n        size: 8,\n        font: helvetica,\n        color: subtitleColor,\n      });\n      \n      // Serializar el documento a bytes\n      const pdfBytes = await pdfDoc.save();\n      \n      // Si se solicita la firma digital, registrarla\n      if (signDocument) {\n        try {\n          // Registrar la firma digital\n          const signResult = await DocumentSignatureService.signDocument(\n            visit.id,\n            professional.id,\n            pdfBytes\n          );\n          \n          if (!signResult.success) {\n            console.warn('No se pudo registrar la firma digital:', signResult.error);\n          } else {\n            console.log(`Documento firmado digitalmente. Hash: ${signResult.hash}`);\n          }\n        } catch (signError) {\n          console.error('Error al firmar digitalmente el documento:', signError);\n          // Continuamos para devolver el PDF aunque la firma falle\n        }\n      }\n      \n      return pdfBytes;\n    } catch (error) {\n      console.error('Error al generar PDF de visita:', error);\n      throw new Error('No se pudo generar el PDF de la visita');\n    }\n  }\n  \n  /**\n   * Divide un texto largo en líneas que quepan en el ancho disponible\n   */\n  private static getTextLines(\n    text: string,\n    font: any,\n    fontSize: number,\n    maxWidth: number\n  ): string[] {\n    const words = text.split(' ');\n    const lines: string[] = [];\n    let currentLine = '';\n    \n    words.forEach(word => {\n      // Manejar saltos de línea en el texto original\n      if (word.includes('\\n')) {\n        const segments = word.split('\\n');\n        \n        // Procesar primer segmento con la línea actual\n        const testLine = currentLine + (currentLine ? ' ' : '') + segments[0];\n        const width = font.widthOfTextAtSize(testLine, fontSize);\n        \n        if (width <= maxWidth) {\n          currentLine = testLine;\n        } else {\n          lines.push(currentLine);\n          currentLine = segments[0];\n        }\n        \n        // Agregar la línea actual\n        lines.push(currentLine);\n        \n        // Procesar los segmentos restantes (si hay)\n        currentLine = '';\n        for (let i = 1; i < segments.length; i++) {\n          if (i === segments.length - 1) {\n            // El último segmento se convierte en la línea actual\n            currentLine = segments[i];\n          } else {\n            // Los segmentos intermedios son líneas completas\n            lines.push(segments[i]);\n          }\n        }\n      } else {\n        // Comportamiento normal para palabras sin saltos de línea\n        const testLine = currentLine + (currentLine ? ' ' : '') + word;\n        const width = font.widthOfTextAtSize(testLine, fontSize);\n        \n        if (width <= maxWidth) {\n          currentLine = testLine;\n        } else {\n          lines.push(currentLine);\n          currentLine = word;\n        }\n      }\n    });\n    \n    // Agregar la última línea si no está vacía\n    if (currentLine) {\n      lines.push(currentLine);\n    }\n    \n    return lines;\n  }\n  \n  /**\n   * Convierte el rol del sistema a un texto más amigable\n   */\n  private static getRoleDisplay(role: string): string {\n    const roleMap: Record<string, string> = {\n      'admin': 'Administrador',\n      'professional': 'Profesional Médico',\n      'fisioterapeuta': 'Fisioterapeuta',\n      'secretary': 'Secretario/a',\n      'developer': 'Desarrollador'\n    };\n    \n    return roleMap[role] || role;\n  }\n\n  /**\n   * Verifica la firma digital de un documento PDF\n   * @param visitId ID de la visita asociada al documento\n   * @param pdfBytes Array de bytes del documento PDF\n   * @returns Promise con el resultado de la verificación\n   */\n  static async verifyDocumentSignature(\n    visitId: string,\n    pdfBytes: Uint8Array\n  ): Promise<{ valid: boolean; signature?: any; error?: string }> {\n    try {\n      // Generar el hash del documento\n      const hash = await DocumentSignatureService.generateHash(pdfBytes);\n      \n      // Verificar si existe una firma con ese hash\n      return await DocumentSignatureService.verifySignature(visitId, hash);\n    } catch (error) {\n      console.error('Error al verificar la firma del documento:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';\n      return { valid: false, error: errorMessage };\n    }\n  }\n}\n\n// Exportar una instancia única del servicio (singleton)\nexport default ExportService; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/services/impact/impactService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/services/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/services/patient/PatientService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PostgrestResponse' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Patient, PatientService as IPatientService  } from '@/core/types';\nimport { supabase } from '@/core/lib/supabase';\nimport { trackEvent } from '@/core/lib/langfuse.client';\nimport { PostgrestResponse, PostgrestSingleResponse } from '@supabase/supabase-js';\n\nconst TABLE_NAME = 'patients';\n\nexport class PatientNotFoundError extends Error {\n  constructor(patientId: string) {\n    super(`Paciente con ID ${patientId} no encontrado`);\n    this.name = 'PatientNotFoundError';\n  }\n}\n\n/**\n * Servicio para la gestión de pacientes utilizando Supabase\n * Implementa la interfaz PatientService definida en core/types\n */\nexport class PatientServiceImpl implements IPatientService {\n  /**\n   * Obtiene un paciente por su ID\n   */\n  async getById(id: string): Promise<Patient> {\n    try {\n      await trackEvent('emr.get_patient', {\n        patientId: id,\n        action: 'query',\n        operation: 'getById'\n      });\n\n      const { data, error }: PostgrestSingleResponse<Patient> = await supabase\n        .from(TABLE_NAME)\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) throw error;\n      if (!data) throw new PatientNotFoundError(id);\n\n      return data;\n    } catch (error) {\n      console.error('Error obteniendo paciente por ID:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obtiene todos los pacientes\n   */\n  async getAll(): Promise<Patient[]> {\n    try {\n      await trackEvent('emr.get_all_patients', {\n        action: 'query',\n        operation: 'getAll'\n      });\n\n      const response = await supabase\n        .from(TABLE_NAME)\n        .select('*')\n        .order('createdAt', { ascending: false });\n\n      if (response.error) throw response.error;\n      return response.data || [];\n    } catch (error) {\n      console.error('Error obteniendo todos los pacientes:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Crea un nuevo paciente\n   */\n  async create(patient: Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>): Promise<Patient> {\n    try {\n      const now = new Date().toISOString();\n      const newPatient = {\n        ...patient,\n        id: crypto.randomUUID(),\n        createdAt: now,\n        updatedAt: now,\n      };\n\n      await trackEvent('emr.create_patient', {\n        patientId: newPatient.id,\n        action: 'insert',\n        operation: 'create'\n      });\n\n      const { data, error }: PostgrestSingleResponse<Patient> = await supabase\n        .from(TABLE_NAME)\n        .insert(newPatient)\n        .select()\n        .single();\n\n      if (error) throw error;\n      if (!data) throw new Error('Error al crear el paciente');\n\n      return data;\n    } catch (error) {\n      console.error('Error creando paciente:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Actualiza un paciente existente\n   */\n  async update(id: string, patient: Partial<Patient>): Promise<Patient> {\n    try {\n      const updateData = {\n        ...patient,\n        updatedAt: new Date().toISOString()\n      };\n\n      await trackEvent('emr.update_patient', {\n        patientId: id,\n        action: 'update',\n        operation: 'update'\n      });\n\n      const { data, error }: PostgrestSingleResponse<Patient> = await supabase\n        .from(TABLE_NAME)\n        .update(updateData)\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      if (!data) throw new PatientNotFoundError(id);\n\n      return data;\n    } catch (error) {\n      console.error('Error actualizando paciente:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Elimina un paciente por su ID\n   */\n  async delete(id: string): Promise<void> {\n    try {\n      await trackEvent('emr.delete_patient', {\n        patientId: id,\n        action: 'delete',\n        operation: 'delete'\n      });\n\n      const { error } = await supabase\n        .from(TABLE_NAME)\n        .delete()\n        .eq('id', id);\n\n      if (error) throw error;\n    } catch (error) {\n      console.error('Error eliminando paciente:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Busca pacientes por nombre\n   */\n  async searchByName(name: string): Promise<Patient[]> {\n    try {\n      await trackEvent('emr.search_patients', {\n        search: name,\n        field: 'name',\n        action: 'query',\n        operation: 'searchByName'\n      });\n\n      const response = await supabase\n        .from(TABLE_NAME)\n        .select('*')\n        .ilike('firstName', `%${name}%`);\n\n      if (response.error) throw response.error;\n      return response.data || [];\n    } catch (error) {\n      console.error('Error buscando pacientes por nombre:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Busca pacientes por apellido\n   */\n  async searchBySurname(surname: string): Promise<Patient[]> {\n    try {\n      await trackEvent('emr.search_patients', {\n        search: surname,\n        field: 'lastName',\n        action: 'query',\n        operation: 'searchBySurname'\n      });\n\n      const response = await supabase\n        .from(TABLE_NAME)\n        .select('*')\n        .ilike('lastName', `%${surname}%`);\n\n      if (response.error) throw response.error;\n      return response.data || [];\n    } catch (error) {\n      console.error('Error buscando pacientes por apellido:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Verifica si un paciente existe\n   */\n  async patientExists(patientId: string): Promise<boolean> {\n    try {\n      const { count, error } = await supabase\n        .from(TABLE_NAME)\n        .select('*', { count: 'exact', head: true })\n        .eq('id', patientId);\n\n      if (error) throw error;\n      return !!count && count > 0;\n    } catch (error) {\n      console.error('Error verificando existencia de paciente:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Método para obtener un paciente por su ID (alias de getById para compatibilidad)\n   */\n  async getPatientById(id: string): Promise<Patient> {\n    return this.getById(id);\n  }\n\n  /**\n   * Método para crear un paciente (alias de create para compatibilidad)\n   */\n  async createPatient(patient: Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>): Promise<Patient> {\n    return this.create(patient);\n  }\n\n  /**\n   * Método para actualizar un paciente (alias de update para compatibilidad)\n   */\n  async updatePatient(id: string, patient: Partial<Patient>): Promise<Patient> {\n    return this.update(id, patient);\n  }\n}\n\n// Crear una instancia del servicio\nconst patientService = new PatientServiceImpl();\n\n// Exportar como default y nombrado para mantener compatibilidad\nexport const PatientService = patientService;\nexport default patientService;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/services/security/DocumentSignatureService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":67,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3550,3553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3550,3553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/core/lib/supabase';\nimport { trackEvent } from '@/core/lib/langfuse.client';\n\n/**\n * Servicio para firma digital de documentos clínicos\n * Permite generar hashes SHA-256 y registrar firmas digitales en la base de datos\n */\nexport class DocumentSignatureService {\n  /**\n   * Genera un hash SHA-256 a partir de datos binarios\n   * @param data Array de bytes (Uint8Array) para generar el hash\n   * @returns Promise con el hash en formato hexadecimal\n   */\n  static async generateHash(data: Uint8Array): Promise<string> {\n    try {\n      // Usar la API de Web Crypto para generar el hash SHA-256\n      const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n      \n      // Convertir el buffer a un array de bytes\n      const hashArray = Array.from(new Uint8Array(hashBuffer));\n      \n      // Convertir los bytes a string hexadecimal\n      const hashHex = hashArray\n        .map(byte => byte.toString(16).padStart(2, '0'))\n        .join('');\n      \n      return hashHex;\n    } catch (error) {\n      console.error('Error al generar hash SHA-256:', error);\n      throw new Error('No se pudo generar el hash del documento');\n    }\n  }\n  \n  /**\n   * Firma un documento médico y registra la firma en la base de datos\n   * @param visitId ID de la visita relacionada con el documento\n   * @param professionalId ID del profesional que firma el documento\n   * @param documentData Datos binarios del documento\n   * @returns Promise con el resultado de la operación\n   */\n  static async signDocument(\n    visitId: string,\n    professionalId: string,\n    documentData: Uint8Array\n  ): Promise<{ success: boolean; hash: string; error?: string }> {\n    try {\n      // Generar el hash del documento\n      const hash = await this.generateHash(documentData);\n      \n      // Verificar si ya existe una firma para este documento\n      const { data: existingSignatures } = await supabase\n        .from('signatures')\n        .select('id')\n        .eq('visit_id', visitId)\n        .eq('hash', hash);\n      \n      // Si ya existe una firma con el mismo hash, evitar duplicados\n      if (existingSignatures && existingSignatures.length > 0) {\n        return { \n          success: true, \n          hash, \n          error: 'El documento ya ha sido firmado previamente con el mismo contenido' \n        };\n      }\n      \n      // Registrar la firma en la base de datos\n      const { data, error } = await supabase\n        .from('signatures')\n        .insert({\n          visit_id: visitId,\n          professional_id: professionalId,\n          hash\n        });\n      \n      // Registrar evento en Langfuse\n      await trackEvent('document.signed', {\n        visitId,\n        professionalId,\n        hash,\n        action: 'sign_document',\n        timestamp: new Date().toISOString()\n      });\n      \n      if (error) {\n        console.error('Error al registrar firma:', error);\n        return { success: false, hash, error: error.message };\n      }\n      \n      return { success: true, hash };\n    } catch (error) {\n      console.error('Error al firmar documento:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';\n      return { success: false, hash: '', error: errorMessage };\n    }\n  }\n  \n  /**\n   * Verifica la validez de una firma digital\n   * @param visitId ID de la visita\n   * @param hash Hash SHA-256 a verificar\n   * @returns Promise con el resultado de la verificación\n   */\n  static async verifySignature(\n    visitId: string,\n    hash: string\n  ): Promise<{ valid: boolean; signature?: any; error?: string }> {\n    try {\n      // Buscar la firma en la base de datos\n      const { data: signatures, error } = await supabase\n        .from('signatures')\n        .select('*')\n        .eq('visit_id', visitId)\n        .eq('hash', hash);\n      \n      if (error) {\n        console.error('Error al verificar firma:', error);\n        return { valid: false, error: error.message };\n      }\n      \n      // Verificar si se encontró la firma\n      if (!signatures || signatures.length === 0) {\n        return { valid: false, error: 'No se encontró una firma válida para el documento' };\n      }\n      \n      // Registrar evento en Langfuse\n      await trackEvent('document.verified', {\n        visitId,\n        hash,\n        action: 'verify_signature',\n        timestamp: new Date().toISOString()\n      });\n      \n      return { valid: true, signature: signatures[0] };\n    } catch (error) {\n      console.error('Error al verificar firma:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';\n      return { valid: false, error: errorMessage };\n    }\n  }\n}\n\n// Exportar una instancia única del servicio\nexport default DocumentSignatureService; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/services/security/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/services/shared/huggingface.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[551,554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[551,554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[579,582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[579,582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Cliente simple para Hugging Face\nconst HF_API_KEY = import.meta.env.VITE_HUGGINGFACE_API_KEY as string | undefined;\n\n// Función para verificar las credenciales\nconst hasCredentials = (): boolean => {\n  return !!HF_API_KEY;\n};\n\n// Headers básicos para peticiones a Hugging Face\nconst getHeaders = (): Record<string, string> => {\n  return {\n    'Content-Type': 'application/json',\n    ...(HF_API_KEY ? { 'Authorization': `Bearer ${HF_API_KEY}` } : {})\n  };\n};\n\n// Función simple para inferencia de modelos\nasync function query(model: string, inputs: any, options = {}): Promise<any> {\n  if (!hasCredentials()) {\n    console.error('No se encontró API_KEY para Hugging Face');\n    return Promise.reject(new Error('No HF API key available'));\n  }\n\n  try {\n    const response = await fetch(\n      `https://api-inference.huggingface.co/models/${model}`,\n      {\n        headers: getHeaders(),\n        method: 'POST',\n        body: JSON.stringify({\n          inputs,\n          options\n        })\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(`Error en petición a Hugging Face: ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error en inferencia de Hugging Face:', error);\n    throw error;\n  }\n}\n\n// Exportar cliente con funciones principales\nexport const huggingFaceClient = {\n  query,\n  hasCredentials\n};\n\nexport default huggingFaceClient;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/services/visit/VisitService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/types/UserRoles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/types/fhir.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/types/global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/types/jsx.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[158,161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[158,161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":10,"column":13,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":10,"endColumn":20,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[170,227],"text":"type Element = React.ReactElement<any, any>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[215,218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[215,218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[220,223],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[220,223],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[279,282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[279,282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[284,287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[284,287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":23,"column":15,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":23,"endColumn":22,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[447,504],"text":"type Element = React.ReactElement<any, any>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[492,495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[492,495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[497,500],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[497,500],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[545,548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[545,548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[561,564],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[561,564],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[623,626],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[623,626],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[628,631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[628,631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[671,674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[671,674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[687,690],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[687,690],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[749,752],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[749,752],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[754,757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[754,757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[857,860],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[857,860],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[862,865],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[862,865],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n// Declaraciones para JSX\ndeclare namespace React {\n  interface ElementProps {\n    children?: React.ReactNode;\n    [key: string]: any;\n  }\n\n  interface Element extends React.ReactElement<any, any> {}\n\n  interface JSX {\n    Element: React.ReactElement<any, any>;\n  }\n}\n\ndeclare module '@types/react/jsx-runtime' {\n  export * from 'react/jsx-runtime';\n}\n\ndeclare module 'react/jsx-runtime' {\n  export namespace JSX {\n    interface Element extends React.ReactElement<any, any> {}\n  }\n  \n  export function jsx(\n    type: any,\n    props: any,\n    key?: string | number | null\n  ): React.ReactElement<any, any>;\n  \n  export function jsxs(\n    type: any,\n    props: any,\n    key?: string | number | null\n  ): React.ReactElement<any, any>;\n  \n  export function Fragment(\n    props: { children?: React.ReactNode }\n  ): React.ReactElement<any, any>;\n}\n\n// Declaraciones para los módulos de iconos de MUI\ndeclare module '@mui/icons-material/*' {\n  import { SvgIconProps } from '@mui/material';\n  const Icon: React.FC<SvgIconProps>;\n  export default Icon;\n}\n\n// Declaraciones específicas para iconos comúnmente utilizados\ndeclare module '@mui/icons-material/Assessment' {\n  import { SvgIconProps } from '@mui/material';\n  const AssessmentIcon: React.FC<SvgIconProps>;\n  export default AssessmentIcon;\n}\n\ndeclare module '@mui/icons-material/Cancel' {\n  import { SvgIconProps } from '@mui/material';\n  const CancelIcon: React.FC<SvgIconProps>;\n  export default CancelIcon;\n}\n\ndeclare module '@mui/icons-material/AccessTime' {\n  import { SvgIconProps } from '@mui/material';\n  const AccessTimeIcon: React.FC<SvgIconProps>;\n  export default AccessTimeIcon;\n}\n\ndeclare module '@mui/icons-material/AutoFixHigh' {\n  import { SvgIconProps } from '@mui/material';\n  const AutoFixHighIcon: React.FC<SvgIconProps>;\n  export default AutoFixHighIcon;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/types/supabase.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[106,109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[106,109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[136,139],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[136,139],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[170,173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[170,173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[200,203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[200,203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Message' is defined but never used. Allowed unused vars must match /^_/u.","line":189,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":189,"endColumn":37},{"ruleId":"@typescript-eslint/no-wrapper-object-types","severity":2,"message":"Prefer using the primitive `string` as a type name, rather than the upper-cased `String`.","line":189,"column":74,"nodeType":"Identifier","messageId":"bannedClassType","endLine":189,"endColumn":80,"fix":{"range":[5193,5199],"text":"string"}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"/**\n * Definiciones de tipos para Supabase\n */\n\nexport interface GenericSchema {\n  Tables: Record<string, any>;\n  Views: Record<string, any>;\n  Functions: Record<string, any>;\n  Enums: Record<string, any>;\n}\n\nexport type SchemaName = \"public\";\n\nexport interface Database {\n  public: {\n    Tables: {\n      patients: {\n        Row: {\n          id: string;\n          firstName: string;\n          lastName: string;\n          email: string | null;\n          phone: string | null;\n          birthDate: string | null;\n          gender: string | null;\n          sex: \"M\" | \"F\" | \"O\" | null;\n          address: string | null;\n          city: string | null;\n          state: string | null;\n          postalCode: string | null;\n          country: string | null;\n          age: number | null;\n          rut: string | null;\n          createdAt: string;\n          updatedAt: string;\n        };\n        Insert: {\n          id?: string;\n          firstName: string;\n          lastName: string;\n          email?: string | null;\n          phone?: string | null;\n          birthDate?: string | null;\n          gender?: string | null;\n          sex?: \"M\" | \"F\" | \"O\" | null;\n          address?: string | null;\n          city?: string | null;\n          state?: string | null;\n          postalCode?: string | null;\n          country?: string | null;\n          age?: number | null;\n          rut?: string | null;\n          createdAt?: string;\n          updatedAt?: string;\n        };\n        Update: {\n          id?: string;\n          firstName?: string;\n          lastName?: string;\n          email?: string | null;\n          phone?: string | null;\n          birthDate?: string | null;\n          gender?: string | null;\n          sex?: \"M\" | \"F\" | \"O\" | null;\n          address?: string | null;\n          city?: string | null;\n          state?: string | null;\n          postalCode?: string | null;\n          country?: string | null;\n          age?: number | null;\n          rut?: string | null;\n          createdAt?: string;\n          updatedAt?: string;\n        };\n      };\n      visits: {\n        Row: {\n          id: string;\n          patientId: string;\n          professionalId: string | null;\n          date: string;\n          visitDate: string | null;\n          visitType: string | null;\n          type: string | null;\n          reason: string | null;\n          status: \"scheduled\" | \"completed\" | \"cancelled\";\n          location: string | null;\n          notes: string | null;\n          createdAt: string;\n          updatedAt: string;\n        };\n        Insert: {\n          id?: string;\n          patientId: string;\n          professionalId?: string | null;\n          date: string;\n          visitDate?: string | null;\n          visitType?: string | null;\n          type?: string | null;\n          reason?: string | null;\n          status: \"scheduled\" | \"completed\" | \"cancelled\";\n          location?: string | null;\n          notes?: string | null;\n          createdAt?: string;\n          updatedAt?: string;\n        };\n        Update: {\n          id?: string;\n          patientId?: string;\n          professionalId?: string | null;\n          date?: string;\n          visitDate?: string | null;\n          visitType?: string | null;\n          type?: string | null;\n          reason?: string | null;\n          status?: \"scheduled\" | \"completed\" | \"cancelled\";\n          location?: string | null;\n          notes?: string | null;\n          createdAt?: string;\n          updatedAt?: string;\n        };\n      };\n      audit_logs: {\n        Row: {\n          id: string;\n          userId: string;\n          action: string;\n          resource: string;\n          resourceId: string;\n          details: Record<string, unknown> | null;\n          timestamp: string;\n        };\n        Insert: {\n          id?: string;\n          userId: string;\n          action: string;\n          resource: string;\n          resourceId: string;\n          details?: Record<string, unknown> | null;\n          timestamp?: string;\n        };\n        Update: {\n          id?: string;\n          userId?: string;\n          action?: string;\n          resource?: string;\n          resourceId?: string;\n          details?: Record<string, unknown> | null;\n          timestamp?: string;\n        };\n      };\n      signatures: {\n        Row: {\n          id: string;\n          visit_id: string;\n          professional_id: string;\n          hash: string;\n          created_at: string;\n        };\n        Insert: {\n          id?: string;\n          visit_id: string;\n          professional_id: string;\n          hash: string;\n          created_at?: string;\n        };\n        Update: {\n          id?: string;\n          visit_id?: string;\n          professional_id?: string;\n          hash?: string;\n          created_at?: string;\n        };\n      };\n    };\n  };\n}\n\n// Tipos auxiliares para simplificar el uso de Supabase\nexport type ContainsNull<T> = T extends (infer U)[] \n  ? ContainsNull<U> \n  : T extends object \n    ? { [K in keyof T]: ContainsNull<T[K]> } \n    : T | null;\n\n// Simplificación de GetResult para evitar problemas de tipo\nexport type GetResult<T> = T[] | null;\n\nexport type SelectQueryError<Message extends string> = { error: true } & String; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/types/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/utils/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/utils/mock.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1656,1659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1656,1659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1782,1785],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1782,1785],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'callback' is defined but never used. Allowed unused args must match /^_/u.","line":72,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1959,1962],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1959,1962],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Utilidades para generar datos de prueba y mocks\n * Usado para desarrollo y pruebas de la aplicación\n */\n\nimport { v4 as uuidv4 } from 'uuid';\n\n// Funciones helper para fechas\nexport function getCurrentISODate(): string {\n  return new Date().toISOString();\n}\n\nexport function getRandomFutureDate(minDays: number = 1, maxDays: number = 30): string {\n  const now = new Date();\n  const randomDays = Math.floor(Math.random() * (maxDays - minDays + 1)) + minDays;\n  now.setDate(now.getDate() + randomDays);\n  return now.toISOString();\n}\n\n// Generador de IDs únicos\nexport function generateId(): string {\n  return uuidv4();\n}\n\n// Mock para objetos Supabase\nexport const createSupabaseMock = () => {\n  return {\n    from: () => ({\n      select: () => ({\n        eq: () => ({\n          single: () => Promise.resolve({ data: null, error: null }),\n          order: () => ({\n            limit: () => Promise.resolve({ data: [], error: null })\n          }),\n          data: null,\n          error: null\n        }),\n        order: () => ({\n          limit: () => Promise.resolve({ data: [], error: null })\n        }),\n        data: [],\n        error: null\n      }),\n      insert: () => ({\n        select: () => Promise.resolve({ data: [], error: null })\n      }),\n      update: () => ({\n        eq: () => Promise.resolve({ data: null, error: null })\n      }),\n      delete: () => ({\n        eq: () => Promise.resolve({ data: null, error: null })\n      })\n    }),\n    auth: {\n      getUser: () => Promise.resolve({ data: { user: null }, error: null })\n    }\n  };\n};\n\n// Valor de muro para detener propagación de errores de tipos\nexport function assertType<T>(value: any): T {\n  return value as T;\n}\n\n// Mock para event sourcing\nexport class EventMock {\n  static emit(eventName: string, data: any) {\n    console.log(`[EventMock] Emitting ${eventName}:`, data);\n    return Promise.resolve({ success: true });\n  }\n  \n  static subscribe(eventName: string, callback: (data: any) => void) {\n    console.log(`[EventMock] Subscribed to ${eventName}`);\n    return () => console.log(`[EventMock] Unsubscribed from ${eventName}`);\n  }\n}\n\n// Tipos para AuditLog\nexport interface AuditLogEvent {\n  id: string;\n  userId: string;\n  action: string;\n  resource: string;\n  resourceId: string;\n  details?: Record<string, unknown>;\n  timestamp: string;\n}\n\n// Cliente mock para AuditLog\nexport class AuditLogClientMock {\n  static logEvent(data: Omit<AuditLogEvent, 'id' | 'timestamp'>): Promise<void> {\n    console.log('[AuditLogMock] Log event:', data);\n    return Promise.resolve();\n  }\n  \n  static getEvents(): Promise<AuditLogEvent[]> {\n    return Promise.resolve([]);\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/core/utils/router.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/emr/types/Evaluation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/hooks/useCopilot.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/hooks/usePatients.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/i18n/config.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[739,742],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[739,742],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\n// Importar traducciones (asegurando compatibilidad con TypeScript)\nconst es = {\n  common: {\n    welcome: 'Bienvenido a AiDuxCare',\n    login: 'Iniciar sesión',\n    logout: 'Cerrar sesión',\n    loading: 'Cargando...',\n    error: 'Error'\n  },\n  roles: {\n    admin: 'Administrador',\n    professional: 'Profesional',\n    secretary: 'Secretaria',\n    developer: 'Desarrollador',\n    fisioterapeuta: 'Fisioterapeuta'\n  },\n  dashboard: {\n    title: 'Panel de {{role}}',\n    dev: 'Panel de Desarrollador',\n    patients: 'Pacientes',\n    visits: 'Visitas',\n    stats: 'Estadísticas'\n  }\n};\n\n// Inicializar i18n con configuración mínima\ni18n\n  .use(initReactI18next as any)\n  .init({\n    resources: {\n      es: {\n        translation: es\n      }\n    },\n    lng: 'es',\n    fallbackLng: 'es',\n    interpolation: {\n      escapeValue: false\n    }\n  });\n\nexport default i18n; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/lib/zod.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ZodSchema' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as zod from 'zod';\nimport type { ZodSchema  } from '@/types/zod-utils';\n\n// Simplemente reexportamos zod para su uso en el resto de la aplicación\nexport const z = zod;\n\n// Tipo personalizado para inferir el tipo de un esquema\nexport type Infer<T> = T extends { _type: infer R } ? R : never;\n\n// Re-exportamos todo para consistencia en importaciones\nexport default zod; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/mock/evalResults.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/mock/impactStats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/admin/components/ProfessionalAuditDashboard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/admin/components/ProfessionalAuditDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1740,1743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1740,1743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5727,5730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5727,5730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect  } from 'react';\nimport { Langfuse } from 'langfuse';\nimport { supabase } from '@/core/lib/supabase';\nimport { User, FileText, Mic, File as FilePdf, Database, AlertCircle, Check, ChevronDown, ChevronUp } from 'lucide-react';\n\n// Tipos\ntype EventType = 'form.update' | 'audio.review' | 'pdf.export' | 'mcp.context.build';\n\ninterface Professional {\n  id: string;\n  name: string;\n  email: string;\n  role?: string;\n  created_at?: string;\n}\n\ninterface EventSummary {\n  count: number;\n  lastActivity: Date | null;\n  pendingAudit: number;\n}\n\ninterface ProfessionalStats {\n  totalVisits: number;\n  events: Record<EventType, EventSummary>;\n  incompleteVisits: number;\n}\n\nconst ProfessionalAuditDashboard: React.FC = () => {\n  const [professionals, setProfessionals] = useState<Professional[]>([]);\n  const [selectedProId, setSelectedProId] = useState<string | null>(null);\n  const [stats, setStats] = useState<ProfessionalStats | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [expandedSection, setExpandedSection] = useState<string | null>(null);\n\n  // Cargar lista de profesionales desde Supabase\n  useEffect(() => {\n    const fetchProfessionals = async () => {\n      try {\n        const { data, error } = await supabase\n          .from('users')\n          .select('id, name, email, role, created_at')\n          .order('name');\n\n        if (error) {\n          throw error;\n        }\n\n        setProfessionals(data || []);\n        \n        // Seleccionar el primer profesional por defecto si hay alguno\n        if (data && data.length > 0 && !selectedProId) {\n          setSelectedProId(data[0].id);\n        }\n      } catch (err: any) {\n        console.error('Error fetching professionals:', err);\n        setError('No se pudieron cargar los profesionales del sistema');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProfessionals();\n  }, []);\n\n  // Cargar estadísticas cuando se selecciona un profesional\n  useEffect(() => {\n    if (!selectedProId) return;\n\n    const fetchUserStats = async () => {\n      setLoading(true);\n      setError(null);\n      \n      try {\n        // Inicializar Langfuse\n        const langfuse = new Langfuse({\n          publicKey: process.env.LANGFUSE_PUBLIC_KEY || '',\n          secretKey: process.env.LANGFUSE_SECRET_KEY || '',\n          baseUrl: process.env.LANGFUSE_HOST || 'https://cloud.langfuse.com'\n        });\n\n        // Obtener trazas para este usuario\n        const { data: traces } = await langfuse.trace.list({\n          metadata: { userId: selectedProId },\n          limit: 500, // Un número razonable para analizar\n        });\n\n        // Si no hay trazas, intentar fallback local\n        if (!traces || traces.length === 0) {\n          await tryLoadLocalStats(selectedProId);\n          return;\n        }\n\n        // Conjunto para seguir visitIds únicos\n        const visitIds = new Set<string>();\n        \n        // Contadores por tipo de evento\n        const eventStats: Record<EventType, EventSummary> = {\n          'form.update': { count: 0, lastActivity: null, pendingAudit: 0 },\n          'audio.review': { count: 0, lastActivity: null, pendingAudit: 0 },\n          'pdf.export': { count: 0, lastActivity: null, pendingAudit: 0 },\n          'mcp.context.build': { count: 0, lastActivity: null, pendingAudit: 0 }\n        };\n        \n        // Visitas sin completar (sin PDF o sin audio validado)\n        const incompleteVisits = new Set<string>();\n        \n        // Procesar cada traza\n        for (const trace of traces) {\n          // Extraer visitId de los metadatos\n          const visitId = trace.metadata?.visitId;\n          if (visitId) {\n            visitIds.add(visitId.toString());\n          }\n          \n          // Obtener observaciones para esta traza\n          const { data: observations } = await langfuse.observation.list({\n            traceId: trace.id,\n            limit: 50\n          });\n          \n          // Procesar cada observación\n          if (observations) {\n            for (const obs of observations) {\n              const type = obs.type as EventType;\n              \n              // Solo contar tipos que nos interesan\n              if (type && ['form.update', 'audio.review', 'pdf.export', 'mcp.context.build'].includes(type)) {\n                // Incrementar contador\n                eventStats[type].count++;\n                \n                // Actualizar última actividad\n                const startTime = new Date(obs.startTime || Date.now());\n                if (!eventStats[type].lastActivity || startTime > eventStats[type].lastActivity) {\n                  eventStats[type].lastActivity = startTime;\n                }\n                \n                // Marcar visita como incompleta si el audio no está aprobado\n                if (type === 'audio.review' && visitId && !obs.metadata?.approved) {\n                  incompleteVisits.add(visitId.toString());\n                }\n              }\n            }\n            \n            // Verificar si la visita no tiene exportación PDF o review de audio\n            if (visitId) {\n              const hasPdfExport = observations.some(obs => obs.type === 'pdf.export');\n              const hasAudioReview = observations.some(obs => obs.type === 'audio.review');\n              \n              if (!hasPdfExport || !hasAudioReview) {\n                incompleteVisits.add(visitId.toString());\n              }\n            }\n          }\n        }\n        \n        // Actualizar estadísticas\n        setStats({\n          totalVisits: visitIds.size,\n          events: eventStats,\n          incompleteVisits: incompleteVisits.size\n        });\n      } catch (err: any) {\n        console.error('Error fetching user stats:', err);\n        setError('No se pudieron cargar las estadísticas del profesional');\n        \n        // Intentar fallback local\n        await tryLoadLocalStats(selectedProId);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUserStats();\n  }, [selectedProId]);\n\n  // Cargar estadísticas locales como fallback\n  const tryLoadLocalStats = async (userId: string): Promise<void> => {\n    try {\n      const response = await fetch(`/logs/user-${userId}.json`);\n      if (!response.ok) throw new Error('No local logs available');\n      \n      const localLogs = await response.json();\n      \n      // Transformar logs locales a estadísticas\n      const visitIds = new Set<string>();\n      const incompleteVisits = new Set<string>();\n      \n      const eventStats: Record<EventType, EventSummary> = {\n        'form.update': { count: 0, lastActivity: null, pendingAudit: 0 },\n        'audio.review': { count: 0, lastActivity: null, pendingAudit: 0 },\n        'pdf.export': { count: 0, lastActivity: null, pendingAudit: 0 },\n        'mcp.context.build': { count: 0, lastActivity: null, pendingAudit: 0 }\n      };\n      \n      for (const log of localLogs) {\n        const type = log.type as EventType;\n        const visitId = log.visitId;\n        \n        if (visitId) {\n          visitIds.add(visitId.toString());\n        }\n        \n        if (type && ['form.update', 'audio.review', 'pdf.export', 'mcp.context.build'].includes(type)) {\n          eventStats[type].count++;\n          \n          const timestamp = new Date(log.timestamp || Date.now());\n          if (!eventStats[type].lastActivity || timestamp > eventStats[type].lastActivity) {\n            eventStats[type].lastActivity = timestamp;\n          }\n          \n          if (type === 'audio.review' && visitId && !log.details?.approved) {\n            incompleteVisits.add(visitId.toString());\n          }\n        }\n      }\n      \n      // Agregamos visitas sin PDF o sin audio\n      for (const visitId of visitIds) {\n        const hasAudio = localLogs.some(log => \n          log.visitId === visitId && log.type === 'audio.review');\n        const hasPdf = localLogs.some(log => \n          log.visitId === visitId && log.type === 'pdf.export');\n          \n        if (!hasAudio || !hasPdf) {\n          incompleteVisits.add(visitId);\n        }\n      }\n      \n      setStats({\n        totalVisits: visitIds.size,\n        events: eventStats,\n        incompleteVisits: incompleteVisits.size\n      });\n    } catch (err) {\n      console.error('Error loading local stats:', err);\n      // Si también fallan los logs locales, mostramos datos vacíos\n      setStats({\n        totalVisits: 0,\n        events: {\n          'form.update': { count: 0, lastActivity: null, pendingAudit: 0 },\n          'audio.review': { count: 0, lastActivity: null, pendingAudit: 0 },\n          'pdf.export': { count: 0, lastActivity: null, pendingAudit: 0 },\n          'mcp.context.build': { count: 0, lastActivity: null, pendingAudit: 0 }\n        },\n        incompleteVisits: 0\n      });\n    }\n  };\n\n  // Cambiar profesional seleccionado\n  const handleProfessionalChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedProId(event.target.value);\n  };\n\n  // Manejar expansión de secciones\n  const toggleSection = (section: string) => {\n    setExpandedSection(expandedSection === section ? null : section);\n  };\n\n  // Renderizar selector de profesionales\n  const renderProfessionalSelector = () => (\n    <div className=\"mb-6\">\n      <label htmlFor=\"professional-select\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n        Seleccionar Profesional\n      </label>\n      <select\n        id=\"professional-select\"\n        className=\"block w-full md:w-64 px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n        value={selectedProId || ''}\n        onChange={handleProfessionalChange}\n        disabled={loading || professionals.length === 0}\n      >\n        {professionals.length === 0 ? (\n          <option value=\"\">No hay profesionales disponibles</option>\n        ) : (\n          professionals.map(pro => (\n            <option key={pro.id} value={pro.id}>\n              {pro.name || pro.email}\n            </option>\n          ))\n        )}\n      </select>\n    </div>\n  );\n\n  // Renderizar estadísticas de usuario\n  const renderUserStats = () => {\n    if (!stats) return null;\n\n    const eventIcons: Record<EventType, React.ReactNode> = {\n      'form.update': <FileText className=\"w-5 h-5 text-blue-500\" />,\n      'audio.review': <Mic className=\"w-5 h-5 text-green-500\" />,\n      'pdf.export': <FilePdf className=\"w-5 h-5 text-red-500\" />,\n      'mcp.context.build': <Database className=\"w-5 h-5 text-purple-500\" />\n    };\n\n    const eventTitles: Record<EventType, string> = {\n      'form.update': 'Actualización de formularios',\n      'audio.review': 'Revisión de audio',\n      'pdf.export': 'Exportación de PDF',\n      'mcp.context.build': 'Creación de contexto MCP'\n    };\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Visitas totales y visitas incompletas */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"bg-white p-6 rounded-lg shadow\">\n            <div className=\"flex items-center\">\n              <div className=\"rounded-md bg-blue-50 p-3 mr-4\">\n                <User className=\"h-6 w-6 text-blue-500\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-gray-500\">Total Visitas</p>\n                <p className=\"text-2xl font-semibold text-gray-900\">{stats.totalVisits}</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-white p-6 rounded-lg shadow\">\n            <div className=\"flex items-center\">\n              <div className={`rounded-md p-3 mr-4 ${stats.incompleteVisits > 0 ? 'bg-red-50' : 'bg-green-50'}`}>\n                {stats.incompleteVisits > 0 ? (\n                  <AlertCircle className=\"h-6 w-6 text-red-500\" />\n                ) : (\n                  <Check className=\"h-6 w-6 text-green-500\" />\n                )}\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-gray-500\">Visitas Incompletas</p>\n                <p className=\"text-2xl font-semibold text-gray-900\">{stats.incompleteVisits}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Estadísticas por tipo de evento */}\n        <div className=\"bg-white shadow overflow-hidden rounded-lg\">\n          <div className=\"px-4 py-5 sm:px-6\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Actividades por Tipo de Evento</h3>\n            <p className=\"mt-1 max-w-2xl text-sm text-gray-500\">\n              Resumen de eventos clínicos registrados por este profesional\n            </p>\n          </div>\n          \n          <div className=\"border-t border-gray-200\">\n            <dl>\n              {Object.entries(stats.events).map(([type, data], index) => {\n                const eventType = type as EventType;\n                return (\n                  <div \n                    key={type}\n                    className={`${index % 2 === 0 ? 'bg-gray-50' : 'bg-white'} px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6`}\n                  >\n                    <dt className=\"flex items-center text-sm font-medium text-gray-500\">\n                      {eventIcons[eventType]}\n                      <span className=\"ml-2\">{eventTitles[eventType]}</span>\n                    </dt>\n                    <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"font-semibold\">{data.count} eventos</span>\n                        <span className=\"text-gray-500\">\n                          {data.lastActivity \n                            ? `Última actividad: ${new Date(data.lastActivity).toLocaleDateString('es-ES', {\n                                day: '2-digit', month: 'short', year: 'numeric'\n                              })}` \n                            : 'Sin actividad registrada'}\n                        </span>\n                      </div>\n                    </dd>\n                  </div>\n                );\n              })}\n            </dl>\n          </div>\n        </div>\n\n        {/* Sección de visitas incompletas */}\n        {stats.incompleteVisits > 0 && (\n          <div className=\"bg-white shadow overflow-hidden rounded-lg\">\n            <div \n              className=\"px-4 py-5 sm:px-6 flex justify-between items-center cursor-pointer\"\n              onClick={() => toggleSection('incomplete')}\n            >\n              <h3 className=\"text-lg font-medium text-gray-900\">Auditorías Incompletas</h3>\n              {expandedSection === 'incomplete' ? (\n                <ChevronUp className=\"h-5 w-5 text-gray-500\" />\n              ) : (\n                <ChevronDown className=\"h-5 w-5 text-gray-500\" />\n              )}\n            </div>\n            \n            {expandedSection === 'incomplete' && (\n              <div className=\"border-t border-gray-200 px-4 py-5 sm:p-6\">\n                <div className=\"bg-yellow-50 p-4 rounded-md\">\n                  <div className=\"flex\">\n                    <div className=\"flex-shrink-0\">\n                      <AlertCircle className=\"h-5 w-5 text-yellow-400\" aria-hidden=\"true\" />\n                    </div>\n                    <div className=\"ml-3\">\n                      <h3 className=\"text-sm font-medium text-yellow-800\">\n                        Atención requerida\n                      </h3>\n                      <div className=\"mt-2 text-sm text-yellow-700\">\n                        <p>\n                          Este profesional tiene {stats.incompleteVisits} visitas que requieren acciones adicionales:\n                        </p>\n                        <ul className=\"list-disc pl-5 mt-1 space-y-1\">\n                          <li>Visitas sin validación de audio</li>\n                          <li>Visitas sin exportación a PDF</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"bg-gray-100 rounded-lg p-6\">\n      <h2 className=\"text-2xl font-bold mb-6\">Auditoría por Profesional</h2>\n      \n      {/* Selector de profesionales */}\n      {renderProfessionalSelector()}\n      \n      {/* Cargando o error */}\n      {loading ? (\n        <div className=\"flex justify-center items-center h-40\" role=\"status\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n        </div>\n      ) : error ? (\n        <div className=\"bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded\">\n          {error}\n        </div>\n      ) : (\n        renderUserStats()\n      )}\n    </div>\n  );\n};\n\nexport default ProfessionalAuditDashboard; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/admin/components/RiskMonitorDashboard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/admin/components/RiskMonitorDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'subMonths' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EventType' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":365,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":365,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12727,12730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12727,12730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect  } from 'react';\nimport { Langfuse } from 'langfuse';\nimport { supabase } from '@/core/lib/supabase';\nimport { AlertCircle, Calendar, Filter, User, CheckCircle, XCircle, FileText, Mic, File as FilePdf, Database, ChevronDown, ChevronUp } from 'lucide-react';\nimport { format, subWeeks, subMonths, startOfWeek, endOfWeek, startOfMonth, endOfMonth, isWithinInterval } from 'date-fns';\nimport { es } from 'date-fns/locale';\n\n// Tipos de eventos\ntype EventType = 'form.update' | 'audio.review' | 'pdf.export' | 'mcp.context.build';\n\n// Tipos de omisiones críticas\ntype OmissionType = 'checklist' | 'signature' | 'mcp' | 'export';\n\n// Períodos de tiempo para agrupación\ntype TimePeriod = 'current-week' | 'last-week' | 'current-month' | 'all';\n\n// Estado para cada validación\ninterface ValidationStatus {\n  checked: boolean;\n  passed: boolean;\n}\n\n// Estructura para una visita con información de riesgo\ninterface RiskVisit {\n  id: string;\n  date: Date;\n  patientId: string;\n  patientName: string;\n  professionalId: string;\n  professionalName: string;\n  validations: {\n    checklist: ValidationStatus;  // audio.review + approved\n    signature: ValidationStatus;  // pdf.export + signed\n    mcp: ValidationStatus;        // mcp.context.build\n    export: ValidationStatus;     // pdf.export exists\n  };\n  riskLevel: 'high' | 'medium' | 'low';\n  omissionCount: number;\n}\n\n// Agrupación de visitas por profesional\ninterface GroupedVisits {\n  [professionalId: string]: RiskVisit[];\n}\n\n// Props para el dashboard\ninterface RiskMonitorDashboardProps {\n  className?: string;\n}\n\nconst RiskMonitorDashboard: React.FC<RiskMonitorDashboardProps> = ({ className }) => {\n  // Estado para almacenar las visitas con riesgos\n  const [visits, setVisits] = useState<RiskVisit[]>([]);\n  \n  // Estados para filtros y agrupaciones\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedProfessional, setSelectedProfessional] = useState<string>('all');\n  const [selectedPeriod, setSelectedPeriod] = useState<TimePeriod>('current-week');\n  const [selectedOmissions, setSelectedOmissions] = useState<OmissionType[]>([]);\n  const [dateRange, setDateRange] = useState<{ start: Date | null; end: Date | null }>({ start: null, end: null });\n  \n  // Estados para la UI\n  const [professionals, setProfessionals] = useState<{ id: string; name: string }[]>([]);\n  const [expandedGroups, setExpandedGroups] = useState<Record<string, boolean>>({});\n  const [groupedVisits, setGroupedVisits] = useState<GroupedVisits>({});\n\n  // Función para calcular el rango de fechas basado en el período seleccionado\n  useEffect(() => {\n    const now = new Date();\n    let start = null;\n    let end = null;\n    \n    switch (selectedPeriod) {\n      case 'current-week':\n        start = startOfWeek(now, { locale: es });\n        end = endOfWeek(now, { locale: es });\n        break;\n      case 'last-week':\n        start = startOfWeek(subWeeks(now, 1), { locale: es });\n        end = endOfWeek(subWeeks(now, 1), { locale: es });\n        break;\n      case 'current-month':\n        start = startOfMonth(now);\n        end = endOfMonth(now);\n        break;\n      case 'all':\n        start = null;\n        end = null;\n        break;\n    }\n    \n    setDateRange({ start, end });\n  }, [selectedPeriod]);\n\n  // Cargar profesionales desde Supabase\n  useEffect(() => {\n    const fetchProfessionals = async () => {\n      try {\n        const { data, error } = await supabase\n          .from('users')\n          .select('id, name')\n          .order('name');\n          \n        if (error) throw error;\n        \n        setProfessionals(data || []);\n      } catch (err) {\n        console.error('Error fetching professionals:', err);\n        setError('No se pudieron cargar los profesionales');\n      }\n    };\n    \n    fetchProfessionals();\n  }, []);\n\n  // Cargar visitas con riesgos\n  useEffect(() => {\n    const fetchRiskyVisits = async () => {\n      setLoading(true);\n      setError(null);\n      \n      try {\n        // Inicializar cliente de Langfuse\n        const langfuse = new Langfuse({\n          publicKey: process.env.LANGFUSE_PUBLIC_KEY || '',\n          secretKey: process.env.LANGFUSE_SECRET_KEY || '',\n          baseUrl: process.env.LANGFUSE_HOST || 'https://cloud.langfuse.com'\n        });\n        \n        // Obtener trazas recientes (con un límite razonable)\n        const { data: traces } = await langfuse.trace.list({\n          limit: 500, // Un número razonable para analizar\n        });\n        \n        if (!traces || traces.length === 0) {\n          await tryLoadLocalVisits();\n          return;\n        }\n        \n        // Mapeo para guardar información sobre visitas\n        const visitsMap = new Map<string, {\n          visitId: string;\n          patientId?: string;\n          patientName?: string;\n          professionalId?: string;\n          professionalName?: string;\n          date: Date;\n          hasChecklist: boolean;\n          checklistApproved: boolean;\n          hasPdfExport: boolean;\n          pdfSigned: boolean;\n          hasMcpContext: boolean;\n        }>();\n        \n        // Procesar cada traza para extraer información sobre visitas\n        for (const trace of traces) {\n          const visitId = trace.metadata?.visitId;\n          const patientId = trace.metadata?.patientId;\n          const userId = trace.metadata?.userId;\n          \n          if (!visitId) continue;\n          \n          // Determinar la fecha de la visita\n          const visitDate = trace.metadata?.visitDate\n            ? new Date(trace.metadata.visitDate)\n            : new Date(trace.startTime || Date.now());\n          \n          // Inicializar visita si no existe\n          if (!visitsMap.has(visitId.toString())) {\n            visitsMap.set(visitId.toString(), {\n              visitId: visitId.toString(),\n              patientId: patientId?.toString(),\n              professionalId: userId?.toString(),\n              date: visitDate,\n              hasChecklist: false,\n              checklistApproved: false,\n              hasPdfExport: false,\n              pdfSigned: false,\n              hasMcpContext: false,\n            });\n          }\n          \n          // Obtener observaciones para cada traza\n          const { data: observations } = await langfuse.observation.list({\n            traceId: trace.id,\n            limit: 50\n          });\n          \n          if (!observations || observations.length === 0) continue;\n          \n          // Procesar observaciones para actualizar estado de la visita\n          const visit = visitsMap.get(visitId.toString());\n          if (!visit) continue;\n          \n          for (const obs of observations) {\n            switch (obs.type) {\n              case 'audio.review':\n                visit.hasChecklist = true;\n                visit.checklistApproved = !!obs.metadata?.approved;\n                break;\n              case 'pdf.export':\n                visit.hasPdfExport = true;\n                visit.pdfSigned = !!obs.metadata?.signed;\n                break;\n              case 'mcp.context.build':\n                visit.hasMcpContext = true;\n                break;\n            }\n          }\n        }\n        \n        // Convertir a formato RiskVisit y calcular nivel de riesgo\n        const riskyVisits: RiskVisit[] = [];\n        \n        // Cargar nombres de pacientes y profesionales\n        const patientIds = new Set<string>();\n        const professionalIds = new Set<string>();\n        \n        visitsMap.forEach(visit => {\n          if (visit.patientId) patientIds.add(visit.patientId);\n          if (visit.professionalId) professionalIds.add(visit.professionalId);\n        });\n        \n        // Obtener nombres de pacientes\n        const patientNames = await fetchPatientNames(Array.from(patientIds));\n        const professionalNames = await fetchProfessionalNames(Array.from(professionalIds));\n        \n        // Convertir visitas y calcular riesgos\n        visitsMap.forEach(visit => {\n          // Verificar si la visita está en el rango de fechas seleccionado\n          if (dateRange.start && dateRange.end) {\n            if (!isWithinInterval(visit.date, { start: dateRange.start, end: dateRange.end })) {\n              return; // No incluir esta visita\n            }\n          }\n          \n          // Calcular validaciones\n          const validations = {\n            checklist: { checked: visit.hasChecklist, passed: visit.checklistApproved },\n            export: { checked: true, passed: visit.hasPdfExport },\n            signature: { checked: visit.hasPdfExport, passed: visit.pdfSigned },\n            mcp: { checked: true, passed: visit.hasMcpContext }\n          };\n          \n          // Contar omisiones\n          const omissionCount = [\n            !validations.checklist.passed,\n            !validations.export.passed, \n            !validations.signature.passed,\n            !validations.mcp.passed\n          ].filter(Boolean).length;\n          \n          // Determinar nivel de riesgo\n          let riskLevel: 'high' | 'medium' | 'low' = 'low';\n          if (omissionCount >= 3) {\n            riskLevel = 'high';\n          } else if (omissionCount >= 1) {\n            riskLevel = 'medium';\n          }\n          \n          // Solo incluir visitas con alguna omisión\n          if (omissionCount > 0) {\n            riskyVisits.push({\n              id: visit.visitId,\n              date: visit.date,\n              patientId: visit.patientId || 'unknown',\n              patientName: patientNames[visit.patientId || ''] || 'Paciente desconocido',\n              professionalId: visit.professionalId || 'unknown',\n              professionalName: professionalNames[visit.professionalId || ''] || 'Profesional desconocido',\n              validations,\n              riskLevel,\n              omissionCount\n            });\n          }\n        });\n        \n        // Ordenar por fecha (más reciente primero) y nivel de riesgo\n        riskyVisits.sort((a, b) => {\n          // Primero por nivel de riesgo\n          const riskOrder = { high: 0, medium: 1, low: 2 };\n          const riskDiff = riskOrder[a.riskLevel] - riskOrder[b.riskLevel];\n          if (riskDiff !== 0) return riskDiff;\n          \n          // Luego por fecha\n          return b.date.getTime() - a.date.getTime();\n        });\n        \n        setVisits(riskyVisits);\n        \n        // Agrupar por profesional\n        const grouped: GroupedVisits = {};\n        riskyVisits.forEach(visit => {\n          if (!grouped[visit.professionalId]) {\n            grouped[visit.professionalId] = [];\n          }\n          grouped[visit.professionalId].push(visit);\n        });\n        \n        setGroupedVisits(grouped);\n      } catch (err) {\n        console.error('Error fetching risky visits:', err);\n        setError('Error al cargar las visitas de riesgo');\n        \n        // Intentar cargar desde logs locales\n        await tryLoadLocalVisits();\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchRiskyVisits();\n  }, [dateRange]);\n\n  // Función para obtener nombres de pacientes\n  const fetchPatientNames = async (patientIds: string[]): Promise<Record<string, string>> => {\n    if (patientIds.length === 0) return {};\n    \n    try {\n      const { data } = await supabase\n        .from('patients')\n        .select('id, name')\n        .in('id', patientIds);\n      \n      return (data || []).reduce((acc, patient) => {\n        acc[patient.id] = patient.name;\n        return acc;\n      }, {} as Record<string, string>);\n    } catch (err) {\n      console.error('Error fetching patient names:', err);\n      return {};\n    }\n  };\n\n  // Función para obtener nombres de profesionales\n  const fetchProfessionalNames = async (professionalIds: string[]): Promise<Record<string, string>> => {\n    if (professionalIds.length === 0) return {};\n    \n    try {\n      const { data } = await supabase\n        .from('users')\n        .select('id, name')\n        .in('id', professionalIds);\n      \n      return (data || []).reduce((acc, user) => {\n        acc[user.id] = user.name;\n        return acc;\n      }, {} as Record<string, string>);\n    } catch (err) {\n      console.error('Error fetching professional names:', err);\n      return {};\n    }\n  };\n\n  // Cargar visitas desde logs locales (fallback)\n  const tryLoadLocalVisits = async (): Promise<void> => {\n    try {\n      // Intento cargar un archivo general de visitas de riesgo\n      const response = await fetch('/logs/risky-visits.json');\n      if (!response.ok) throw new Error('No local logs available');\n      \n      const localVisits = await response.json();\n      \n      // Transformar a formato RiskVisit\n      const riskyVisits: RiskVisit[] = localVisits.map((visit: any) => ({\n        ...visit,\n        date: new Date(visit.date),\n        validations: {\n          checklist: { \n            checked: true, \n            passed: visit.validations?.checklist?.passed || false \n          },\n          export: { \n            checked: true, \n            passed: visit.validations?.export?.passed || false \n          },\n          signature: { \n            checked: true, \n            passed: visit.validations?.signature?.passed || false \n          },\n          mcp: { \n            checked: true, \n            passed: visit.validations?.mcp?.passed || false \n          }\n        }\n      }));\n      \n      // Aplicar filtros de fecha\n      const filteredVisits = dateRange.start && dateRange.end \n        ? riskyVisits.filter(visit => \n            isWithinInterval(visit.date, { start: dateRange.start!, end: dateRange.end! })\n          )\n        : riskyVisits;\n      \n      setVisits(filteredVisits);\n      \n      // Agrupar por profesional\n      const grouped: GroupedVisits = {};\n      filteredVisits.forEach(visit => {\n        if (!grouped[visit.professionalId]) {\n          grouped[visit.professionalId] = [];\n        }\n        grouped[visit.professionalId].push(visit);\n      });\n      \n      setGroupedVisits(grouped);\n    } catch (err) {\n      console.error('Error loading local visits:', err);\n      setVisits([]);\n      setGroupedVisits({});\n    }\n  };\n\n  // Cambiar filtro de período\n  const handlePeriodChange = (period: TimePeriod) => {\n    setSelectedPeriod(period);\n  };\n\n  // Cambiar filtro de profesional\n  const handleProfessionalChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedProfessional(event.target.value);\n  };\n\n  // Manejar cambios en los filtros de omisiones\n  const handleOmissionFilterChange = (omission: OmissionType) => {\n    setSelectedOmissions(prev => \n      prev.includes(omission) \n        ? prev.filter(o => o !== omission)\n        : [...prev, omission]\n    );\n  };\n\n  // Alternar expansión de un grupo\n  const toggleGroupExpansion = (groupId: string) => {\n    setExpandedGroups(prev => ({\n      ...prev,\n      [groupId]: !prev[groupId]\n    }));\n  };\n\n  // Filtrar visitas según los criterios seleccionados\n  const getFilteredVisits = (): RiskVisit[] => {\n    let filtered = [...visits];\n    \n    // Filtrar por profesional\n    if (selectedProfessional !== 'all') {\n      filtered = filtered.filter(visit => visit.professionalId === selectedProfessional);\n    }\n    \n    // Filtrar por omisiones\n    if (selectedOmissions.length > 0) {\n      filtered = filtered.filter(visit => \n        selectedOmissions.some(omission => !visit.validations[omission].passed)\n      );\n    }\n    \n    return filtered;\n  };\n\n  // Componente para mostrar una validación de riesgo\n  const ValidationIndicator: React.FC<{ \n    type: OmissionType,\n    status: ValidationStatus\n  }> = ({ type, status }) => {\n    // Iconos y texto por tipo\n    const config = {\n      checklist: {\n        icon: <Mic className=\"w-5 h-5\" />,\n        label: 'Checklist',\n        tooltip: status.passed ? 'Audio validado' : 'Checklist no validado'\n      },\n      export: {\n        icon: <FilePdf className=\"w-5 h-5\" />,\n        label: 'Exportación',\n        tooltip: status.passed ? 'PDF exportado' : 'Sin exportación PDF'\n      },\n      signature: {\n        icon: <FileText className=\"w-5 h-5\" />,\n        label: 'Firma',\n        tooltip: status.passed ? 'Documento firmado' : 'Sin firma digital'\n      },\n      mcp: {\n        icon: <Database className=\"w-5 h-5\" />,\n        label: 'MCP',\n        tooltip: status.passed ? 'Contexto MCP creado' : 'Sin contexto MCP'\n      }\n    };\n    \n    // Colores según el estado\n    const colorClass = status.passed \n      ? 'text-green-500 bg-green-50'\n      : 'text-red-500 bg-red-50';\n      \n    return (\n      <div className={`flex items-center px-3 py-1 rounded-full ${colorClass}`} title={config[type].tooltip}>\n        <div className=\"mr-1\">\n          {config[type].icon}\n        </div>\n        <span className=\"text-xs font-medium\">{config[type].label}</span>\n        {status.passed \n          ? <CheckCircle className=\"w-4 h-4 ml-1\" /> \n          : <XCircle className=\"w-4 h-4 ml-1\" />\n        }\n      </div>\n    );\n  };\n\n  // Componente para indicador de nivel de riesgo\n  const RiskLevelIndicator: React.FC<{ level: 'high' | 'medium' | 'low', count: number }> = ({ level, count }) => {\n    const config = {\n      high: {\n        bgColor: 'bg-red-100',\n        textColor: 'text-red-800',\n        label: 'Alto'\n      },\n      medium: {\n        bgColor: 'bg-yellow-100',\n        textColor: 'text-yellow-800',\n        label: 'Medio'\n      },\n      low: {\n        bgColor: 'bg-green-100',\n        textColor: 'text-green-800',\n        label: 'Bajo'\n      }\n    };\n    \n    return (\n      <div className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config[level].bgColor} ${config[level].textColor}`}>\n        <AlertCircle className=\"w-3 h-3 mr-1\" />\n        <span>{config[level].label}</span>\n        <span className=\"ml-1\">({count})</span>\n      </div>\n    );\n  };\n\n  // Renderizar la sección de filtros\n  const renderFilters = () => (\n    <div className=\"bg-gray-50 p-4 rounded-lg mb-6\">\n      <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4\">\n        <div>\n          <h3 className=\"text-sm font-medium text-gray-700 mb-2\">Filtros</h3>\n          <div className=\"flex flex-wrap gap-2\">\n            {/* Filtro por período */}\n            <div className=\"flex items-center space-x-2\">\n              <Calendar className=\"w-4 h-4 text-gray-500\" />\n              <select \n                aria-label=\"Filtrar por período de tiempo\"\n                className=\"text-sm border-gray-300 rounded-md shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50\"\n                value={selectedPeriod}\n                onChange={(e) => handlePeriodChange(e.target.value as TimePeriod)}\n              >\n                <option value=\"current-week\">Esta semana</option>\n                <option value=\"last-week\">Semana anterior</option>\n                <option value=\"current-month\">Este mes</option>\n                <option value=\"all\">Todo el historial</option>\n              </select>\n            </div>\n            \n            {/* Filtro por profesional */}\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"w-4 h-4 text-gray-500\" />\n              <select \n                aria-label=\"Filtrar por profesional\"\n                className=\"text-sm border-gray-300 rounded-md shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50\"\n                value={selectedProfessional}\n                onChange={handleProfessionalChange}\n              >\n                <option value=\"all\">Todos los profesionales</option>\n                {professionals.map(pro => (\n                  <option key={pro.id} value={pro.id}>{pro.name}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n        \n        {/* Filtros por omisión */}\n        <div>\n          <h3 className=\"text-sm font-medium text-gray-700 mb-2\">Tipo de omisión</h3>\n          <div className=\"flex flex-wrap gap-2\">\n            <button\n              className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium transition-colors ${\n                selectedOmissions.includes('checklist') \n                  ? 'bg-red-100 text-red-800' \n                  : 'bg-gray-100 text-gray-800 hover:bg-gray-200'\n              }`}\n              onClick={() => handleOmissionFilterChange('checklist')}\n            >\n              <Mic className=\"w-3 h-3 mr-1\" />\n              Sin validación\n            </button>\n            \n            <button\n              className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium transition-colors ${\n                selectedOmissions.includes('export') \n                  ? 'bg-red-100 text-red-800' \n                  : 'bg-gray-100 text-gray-800 hover:bg-gray-200'\n              }`}\n              onClick={() => handleOmissionFilterChange('export')}\n            >\n              <FilePdf className=\"w-3 h-3 mr-1\" />\n              Sin exportación\n            </button>\n            \n            <button\n              className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium transition-colors ${\n                selectedOmissions.includes('signature') \n                  ? 'bg-red-100 text-red-800' \n                  : 'bg-gray-100 text-gray-800 hover:bg-gray-200'\n              }`}\n              onClick={() => handleOmissionFilterChange('signature')}\n            >\n              <FileText className=\"w-3 h-3 mr-1\" />\n              Sin firma\n            </button>\n            \n            <button\n              className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium transition-colors ${\n                selectedOmissions.includes('mcp') \n                  ? 'bg-red-100 text-red-800' \n                  : 'bg-gray-100 text-gray-800 hover:bg-gray-200'\n              }`}\n              onClick={() => handleOmissionFilterChange('mcp')}\n            >\n              <Database className=\"w-3 h-3 mr-1\" />\n              Sin MCP\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className={`bg-white rounded-lg shadow-md p-6 ${className}`}>\n      <h2 className=\"text-2xl font-bold text-gray-800 mb-4\">Panel de Monitoreo de Riesgos</h2>\n      \n      {/* Filtros */}\n      {renderFilters()}\n      \n      {/* Estado de carga o error */}\n      {loading ? (\n        <div className=\"flex justify-center items-center py-10\">\n          <div className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500\"></div>\n        </div>\n      ) : error ? (\n        <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md\">\n          {error}\n        </div>\n      ) : getFilteredVisits().length === 0 ? (\n        <div className=\"bg-gray-50 border border-gray-200 text-gray-700 px-4 py-8 rounded-md text-center\">\n          No hay visitas con omisiones que coincidan con los filtros seleccionados.\n        </div>\n      ) : (\n        <div className=\"overflow-hidden shadow ring-1 ring-black ring-opacity-5 rounded-lg\">\n          <table className=\"min-w-full divide-y divide-gray-300\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th scope=\"col\" className=\"py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6\">\n                  Profesional / Paciente\n                </th>\n                <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">\n                  Fecha\n                </th>\n                <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">\n                  Estado\n                </th>\n                <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">\n                  Riesgo\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200 bg-white\">\n              {selectedProfessional === 'all' ? (\n                // Mostrar agrupado por profesional\n                Object.entries(groupedVisits).map(([professionalId, proVisits]) => {\n                  // Aplicar filtros de omisión al grupo\n                  const filteredProVisits = selectedOmissions.length > 0\n                    ? proVisits.filter(visit => \n                        selectedOmissions.some(omission => !visit.validations[omission].passed)\n                      )\n                    : proVisits;\n                    \n                  if (filteredProVisits.length === 0) return null;\n                  \n                  // Obtener nombre del profesional\n                  const professional = professionals.find(p => p.id === professionalId);\n                  const professionalName = professional?.name || 'Profesional desconocido';\n                  \n                  return (\n                    <React.Fragment key={professionalId}>\n                      {/* Fila de grupo de profesional */}\n                      <tr \n                        className=\"bg-gray-50 cursor-pointer hover:bg-gray-100\"\n                        onClick={() => toggleGroupExpansion(professionalId)}\n                      >\n                        <td colSpan={4} className=\"whitespace-nowrap py-2 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center\">\n                              <User className=\"mr-2 h-5 w-5 text-gray-500\" />\n                              <span>{professionalName}</span>\n                              <span className=\"ml-2 rounded-full bg-gray-200 px-2 py-0.5 text-xs font-medium text-gray-800\">\n                                {filteredProVisits.length} {filteredProVisits.length === 1 ? 'visita' : 'visitas'}\n                              </span>\n                            </div>\n                            {expandedGroups[professionalId] ? \n                              <ChevronUp className=\"h-5 w-5 text-gray-500\" /> : \n                              <ChevronDown className=\"h-5 w-5 text-gray-500\" />\n                            }\n                          </div>\n                        </td>\n                      </tr>\n                      \n                      {/* Filas de visitas del profesional (expandibles) */}\n                      {expandedGroups[professionalId] && filteredProVisits.map(visit => (\n                        <tr key={visit.id} className=\"hover:bg-gray-50\">\n                          <td className=\"whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6\">\n                            {visit.patientName}\n                          </td>\n                          <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">\n                            {format(visit.date, 'dd MMM yyyy', { locale: es })}\n                          </td>\n                          <td className=\"px-3 py-4 text-sm text-gray-500\">\n                            <div className=\"flex flex-wrap gap-1\">\n                              {!visit.validations.checklist.passed && (\n                                <ValidationIndicator type=\"checklist\" status={visit.validations.checklist} />\n                              )}\n                              {!visit.validations.export.passed && (\n                                <ValidationIndicator type=\"export\" status={visit.validations.export} />\n                              )}\n                              {!visit.validations.signature.passed && (\n                                <ValidationIndicator type=\"signature\" status={visit.validations.signature} />\n                              )}\n                              {!visit.validations.mcp.passed && (\n                                <ValidationIndicator type=\"mcp\" status={visit.validations.mcp} />\n                              )}\n                            </div>\n                          </td>\n                          <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">\n                            <RiskLevelIndicator level={visit.riskLevel} count={visit.omissionCount} />\n                          </td>\n                        </tr>\n                      ))}\n                    </React.Fragment>\n                  );\n                })\n              ) : (\n                // Mostrar solo visitas del profesional seleccionado\n                getFilteredVisits().map(visit => (\n                  <tr key={visit.id} className=\"hover:bg-gray-50\">\n                    <td className=\"whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6\">\n                      {visit.patientName}\n                    </td>\n                    <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">\n                      {format(visit.date, 'dd MMM yyyy', { locale: es })}\n                    </td>\n                    <td className=\"px-3 py-4 text-sm text-gray-500\">\n                      <div className=\"flex flex-wrap gap-1\">\n                        {!visit.validations.checklist.passed && (\n                          <ValidationIndicator type=\"checklist\" status={visit.validations.checklist} />\n                        )}\n                        {!visit.validations.export.passed && (\n                          <ValidationIndicator type=\"export\" status={visit.validations.export} />\n                        )}\n                        {!visit.validations.signature.passed && (\n                          <ValidationIndicator type=\"signature\" status={visit.validations.signature} />\n                        )}\n                        {!visit.validations.mcp.passed && (\n                          <ValidationIndicator type=\"mcp\" status={visit.validations.mcp} />\n                        )}\n                      </div>\n                    </td>\n                    <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">\n                      <RiskLevelIndicator level={visit.riskLevel} count={visit.omissionCount} />\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RiskMonitorDashboard; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/ai/CopilotService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/ai/components/LangfuseLink.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/assistant/components/ActiveListeningPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/assistant/components/AssistantPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/assistant/components/CopilotPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/assistant/hooks/useCopilot.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/assistant/models/AssistantContext.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/assistant/pages/AssistantPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/assistant/pages/ChatPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/assistant/services/aiService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/assistant/services/assistantEngine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/assistant/types/copilot.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/auth/LoginPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/auth/OnboardingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/auth/authService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/auth/pages/LoginPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/auth/seedUsers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/copilot/services/CopilotService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/core/pages/HomePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/dashboard/ImpactDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/dashboard/PublicImpactDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/dashboard/metrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/ClinicalCopilotPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/ClinicalLogbook.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/EvalResultsViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/EvalTimeline.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/FieldWithSuggestion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/StructuredVisitForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/VisitLogDashboard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/VisitLogDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[682,685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[682,685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5752,5755],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5752,5755],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":183,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6436,6439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6436,6439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":186,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":186,"endColumn":78,"suggestions":[{"messageId":"addBrackets","fix":{"range":[6514,6696],"text":"{ const fieldsCount = Object.keys(event.metadata?.fields || {}).length;\n        return `${fieldsCount} campo${fieldsCount !== 1 ? 's' : ''} actualizado${fieldsCount !== 1 ? 's' : ''}`; }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect  } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Langfuse } from 'langfuse';\nimport { supabase } from '@/core/lib/supabaseClient';\nimport { FileText, Mic, File as FilePdf, Database, Clock, ChevronDown, ChevronUp, User } from 'lucide-react';\nimport { format } from 'date-fns';\nimport { es } from 'date-fns/locale';\n\n// Tipos de eventos que manejamos\ntype EventType = 'form.update' | 'audio.review' | 'pdf.export' | 'mcp.context.build';\n\n// Estructura para un evento de log\ninterface LogEvent {\n  id: string;\n  timestamp: Date;\n  type: EventType;\n  userId?: string;\n  userName?: string;\n  result: string;\n  details?: Record<string, any>;\n}\n\n// Mapa de iconos por tipo de evento\nconst eventIcons: Record<EventType, React.ReactNode> = {\n  'form.update': <FileText className=\"w-5 h-5 text-blue-500\" />,\n  'audio.review': <Mic className=\"w-5 h-5 text-green-500\" />,\n  'pdf.export': <FilePdf className=\"w-5 h-5 text-red-500\" />,\n  'mcp.context.build': <Database className=\"w-5 h-5 text-purple-500\" />\n};\n\n// Títulos descriptivos por tipo de evento\nconst eventTitles: Record<EventType, string> = {\n  'form.update': 'Actualización de formulario clínico',\n  'audio.review': 'Revisión de audio',\n  'pdf.export': 'Exportación de PDF',\n  'mcp.context.build': 'Creación de contexto MCP'\n};\n\n// Componente para la chip de tipo de evento\nconst EventTypeChip: React.FC<{ type: EventType }> = ({ type }) => {\n  const bgColors: Record<EventType, string> = {\n    'form.update': 'bg-blue-100 text-blue-800',\n    'audio.review': 'bg-green-100 text-green-800',\n    'pdf.export': 'bg-red-100 text-red-800',\n    'mcp.context.build': 'bg-purple-100 text-purple-800'\n  };\n\n  return (\n    <span className={`px-2 py-1 rounded-full text-xs font-medium ${bgColors[type]}`}>\n      {type}\n    </span>\n  );\n};\n\nconst VisitLogDashboard: React.FC = () => {\n  const { id: visitId } = useParams<{ id: string }>();\n  const [events, setEvents] = useState<LogEvent[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [collapsedGroups, setCollapsedGroups] = useState<Record<EventType, boolean>>({\n    'form.update': false,\n    'audio.review': false,\n    'pdf.export': false,\n    'mcp.context.build': false\n  });\n\n  // Cargar los eventos de Langfuse\n  useEffect(() => {\n    const fetchEvents = async () => {\n      if (!visitId) return;\n\n      setLoading(true);\n      try {\n        // Inicializar cliente de Langfuse\n        const langfuse = new Langfuse({\n          publicKey: process.env.LANGFUSE_PUBLIC_KEY || '',\n          secretKey: process.env.LANGFUSE_SECRET_KEY || '',\n          baseUrl: process.env.LANGFUSE_HOST || 'https://cloud.langfuse.com'\n        });\n\n        // Obtener trazas relacionadas con la visita\n        const { data: traces } = await langfuse.trace.list({\n          metadata: { visitId },\n          limit: 100,\n        });\n\n        // Transformar trazas a nuestro formato de eventos\n        let fetchedEvents: LogEvent[] = [];\n        \n        if (traces && traces.length > 0) {\n          for (const trace of traces) {\n            // Obtener observaciones para esta traza\n            const { data: observations } = await langfuse.observation.list({\n              traceId: trace.id,\n              limit: 50\n            });\n\n            // Filtrar por tipos de eventos que nos interesan\n            const filteredObservations = observations.filter(obs => \n              ['form.update', 'audio.review', 'pdf.export', 'mcp.context.build'].includes(obs.type ?? '')\n            );\n            \n            // Mapear a nuestro formato\n            const mappedEvents = await Promise.all(filteredObservations.map(async (event) => {\n              let userName = undefined;\n              \n              // Si hay userId, buscar datos del usuario en Supabase\n              if (event.metadata?.userId) {\n                const { data } = await supabase\n                  .from('users')\n                  .select('name, email')\n                  .eq('id', event.metadata.userId)\n                  .single();\n                \n                if (data) {\n                  userName = data.name || data.email;\n                }\n              }\n              \n              return {\n                id: event.id,\n                timestamp: new Date(event.startTime || Date.now()),\n                type: event.type as EventType,\n                userId: event.metadata?.userId,\n                userName,\n                result: getEventResultSummary(event),\n                details: event.metadata\n              };\n            }));\n            \n            fetchedEvents = [...fetchedEvents, ...mappedEvents];\n          }\n        } else {\n          // Fallback a logs locales\n          await tryLoadLocalLogs(visitId);\n        }\n        \n        // Ordenar por timestamp (más reciente primero)\n        fetchedEvents.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n        \n        setEvents(fetchedEvents);\n      } catch (err) {\n        console.error('Error fetching logs:', err);\n        setError('No se pudieron cargar los logs de la visita');\n        \n        // Intentar cargar logs locales como fallback\n        await tryLoadLocalLogs(visitId);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchEvents();\n  }, [visitId]);\n\n  // Función para cargar logs locales si fallan los de Langfuse\n  const tryLoadLocalLogs = async (visitId: string): Promise<void> => {\n    try {\n      const response = await fetch(`/logs/visit-${visitId}.json`);\n      if (response.ok) {\n        const localLogs = await response.json();\n        \n        // Transformar logs locales a nuestro formato\n        const localEvents = localLogs.map((log: any) => ({\n          id: log.id || `local-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          timestamp: new Date(log.timestamp || Date.now()),\n          type: log.type as EventType,\n          userId: log.userId,\n          userName: log.userName,\n          result: log.message || 'Sin detalles disponibles',\n          details: log.details || {}\n        }));\n        \n        setEvents(localEvents);\n      }\n    } catch (err) {\n      console.error('Error loading local logs:', err);\n      // Si también fallan los logs locales, dejamos el error original\n    }\n  };\n\n  // Función para obtener un resumen del resultado del evento\n  const getEventResultSummary = (event: any): string => {\n    switch (event.type) {\n      case 'form.update':\n        const fieldsCount = Object.keys(event.metadata?.fields || {}).length;\n        return `${fieldsCount} campo${fieldsCount !== 1 ? 's' : ''} actualizado${fieldsCount !== 1 ? 's' : ''}`;\n      \n      case 'audio.review':\n        return event.metadata?.approved \n          ? 'Audio revisado y aprobado' \n          : 'Audio revisado - requiere cambios';\n      \n      case 'pdf.export':\n        return event.metadata?.signed \n          ? 'PDF exportado y firmado digitalmente' \n          : 'PDF exportado sin firma';\n      \n      case 'mcp.context.build':\n        return `Contexto MCP creado: ${event.metadata?.contextSize || 0} elementos`;\n      \n      default:\n        return event.metadata?.message || 'Evento registrado';\n    }\n  };\n\n  // Obtener eventos agrupados por tipo\n  const getEventsByType = (type: EventType): LogEvent[] => {\n    return events.filter(event => event.type === type);\n  };\n\n  // Manejar colapso/expansión de grupos\n  const toggleGroup = (type: EventType) => {\n    setCollapsedGroups(prev => ({\n      ...prev,\n      [type]: !prev[type]\n    }));\n  };\n\n  // Renderizar cronología de eventos\n  const renderEventTimeline = () => {\n    const eventTypes: EventType[] = ['form.update', 'audio.review', 'pdf.export', 'mcp.context.build'];\n    \n    return (\n      <div className=\"space-y-6\">\n        {eventTypes.map((type) => {\n          const typeEvents = getEventsByType(type);\n          const eventCount = typeEvents.length;\n          \n          if (eventCount === 0) return null;\n          \n          return (\n            <div key={type} className=\"border rounded-lg shadow-sm overflow-hidden\">\n              <div \n                className=\"bg-gray-50 p-4 flex justify-between items-center cursor-pointer hover:bg-gray-100\"\n                onClick={() => toggleGroup(type)}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  {eventIcons[type]}\n                  <h3 className=\"font-medium\">{eventTitles[type]}</h3>\n                  <span className=\"bg-gray-200 text-gray-800 text-xs font-medium px-2.5 py-0.5 rounded-full\">\n                    {eventCount}\n                  </span>\n                </div>\n                {collapsedGroups[type] ? <ChevronDown className=\"w-5 h-5\" /> : <ChevronUp className=\"w-5 h-5\" />}\n              </div>\n              \n              {!collapsedGroups[type] && (\n                <div className=\"divide-y divide-gray-200\">\n                  {typeEvents.map((event) => (\n                    <div key={event.id} className=\"p-4 hover:bg-gray-50\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex items-start space-x-3\">\n                          <EventTypeChip type={event.type} />\n                          <div>\n                            <p className=\"font-medium text-gray-900\">{event.result}</p>\n                            \n                            {event.userName && (\n                              <div className=\"flex items-center text-sm text-gray-500 mt-1\">\n                                <User className=\"w-4 h-4 mr-1\" />\n                                <span>{event.userName}</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center text-sm text-gray-500\">\n                          <Clock className=\"w-4 h-4 mr-1\" />\n                          <span title={event.timestamp.toISOString()}>\n                            {format(event.timestamp, 'dd MMM yyyy, HH:mm', { locale: es })}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg p-6\">\n      <h2 className=\"text-2xl font-bold mb-6\">Registro de Actividad</h2>\n      \n      {loading ? (\n        <div className=\"flex justify-center items-center h-40\" role=\"status\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n        </div>\n      ) : error ? (\n        <div className=\"bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded\">\n          {error}\n        </div>\n      ) : events.length === 0 ? (\n        <div className=\"bg-gray-50 border border-gray-200 text-gray-800 px-4 py-6 rounded text-center\">\n          No hay eventos registrados para esta visita\n        </div>\n      ) : (\n        renderEventTimeline()\n      )}\n    </div>\n  );\n};\n\nexport default VisitLogDashboard; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/VisitQualityPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/alerts/VisitAlert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/audit/PatientAuditDashboard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/audit/PatientAuditDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[917,920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[917,920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":185,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6171,6174],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6171,6174],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":233,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7789,7792],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7789,7792],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect  } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Langfuse } from 'langfuse';\nimport { supabase } from '@/core/lib/supabase';\nimport { FileText, Mic, File as FilePdf, Database, Calendar, CheckCircle, XCircle, AlertCircle, ChevronDown, ChevronUp } from 'lucide-react';\nimport { format } from 'date-fns';\nimport { es } from 'date-fns/locale';\n\n// Tipos\ntype EventType = 'form.update' | 'audio.review' | 'pdf.export' | 'mcp.context.build';\n\ninterface Patient {\n  id: string;\n  name: string;\n  birthDate?: string;\n  email?: string;\n  gender?: string;\n}\n\ninterface VisitSummary {\n  id: string;\n  date: Date;\n  hasAudioReview: boolean;\n  isAudioApproved: boolean;\n  hasPdfExport: boolean;\n  isPdfSigned: boolean;\n  hasMcpContext: boolean;\n  events: EventSummary[];\n}\n\ninterface EventSummary {\n  id: string;\n  type: EventType;\n  timestamp: Date;\n  details?: Record<string, any>;\n}\n\n// Agrupar visitas por año\ninterface VisitsByYear {\n  [year: string]: VisitSummary[];\n}\n\nconst PatientAuditDashboard: React.FC = () => {\n  const { patientId } = useParams<{ patientId: string }>();\n  const [patient, setPatient] = useState<Patient | null>(null);\n  const [visitsByYear, setVisitsByYear] = useState<VisitsByYear>({});\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [expandedVisits, setExpandedVisits] = useState<Record<string, boolean>>({});\n  const [expandedYears, setExpandedYears] = useState<Record<string, boolean>>({});\n\n  // Cargar datos del paciente\n  useEffect(() => {\n    const fetchPatientData = async () => {\n      if (!patientId) return;\n\n      setLoading(true);\n      setError(null);\n      \n      try {\n        // Obtener datos básicos del paciente\n        const { data: patientData, error: patientError } = await supabase\n          .from('patients')\n          .select('id, name, birthDate, email, gender')\n          .eq('id', patientId)\n          .single();\n\n        if (patientError) throw patientError;\n        \n        if (!patientData) {\n          setError('No se encontró el paciente solicitado');\n          setLoading(false);\n          return;\n        }\n        \n        setPatient(patientData);\n        \n        // Inicializar Langfuse\n        const langfuse = new Langfuse({\n          publicKey: process.env.LANGFUSE_PUBLIC_KEY || '',\n          secretKey: process.env.LANGFUSE_SECRET_KEY || '',\n          baseUrl: process.env.LANGFUSE_HOST || 'https://cloud.langfuse.com'\n        });\n\n        // Obtener trazas relacionadas con el paciente\n        const { data: traces } = await langfuse.trace.list({\n          metadata: { patientId },\n          limit: 500, // Un número razonable para historial\n        });\n\n        // Si no hay trazas, intentar fallback local\n        if (!traces || traces.length === 0) {\n          await tryLoadLocalVisits(patientId);\n          return;\n        }\n\n        // Procesar visitas desde las trazas\n        const visitsMap = new Map<string, VisitSummary>();\n        \n        for (const trace of traces) {\n          // Extraer visitId de los metadatos\n          const visitId = trace.metadata?.visitId;\n          if (!visitId) continue;\n          \n          // Obtener fecha de la visita (del metadato o de la traza)\n          const visitDate = trace.metadata?.visitDate\n            ? new Date(trace.metadata.visitDate)\n            : new Date(trace.startTime || Date.now());\n          \n          // Inicializar visita si no existe\n          if (!visitsMap.has(visitId.toString())) {\n            visitsMap.set(visitId.toString(), {\n              id: visitId.toString(),\n              date: visitDate,\n              hasAudioReview: false,\n              isAudioApproved: false,\n              hasPdfExport: false,\n              isPdfSigned: false,\n              hasMcpContext: false,\n              events: []\n            });\n          }\n          \n          // Obtener observaciones para esta traza\n          const { data: observations } = await langfuse.observation.list({\n            traceId: trace.id,\n            limit: 100\n          });\n          \n          if (!observations) continue;\n          \n          // Procesar observaciones\n          for (const obs of observations) {\n            if (!obs.type) continue;\n            \n            const type = obs.type as EventType;\n            const visitSummary = visitsMap.get(visitId.toString());\n            \n            if (!visitSummary) continue;\n            \n            // Guardar evento\n            if (['form.update', 'audio.review', 'pdf.export', 'mcp.context.build'].includes(type)) {\n              visitSummary.events.push({\n                id: obs.id,\n                type: type,\n                timestamp: new Date(obs.startTime || Date.now()),\n                details: obs.metadata\n              });\n              \n              // Actualizar flags específicos\n              switch (type) {\n                case 'audio.review':\n                  visitSummary.hasAudioReview = true;\n                  visitSummary.isAudioApproved = !!obs.metadata?.approved;\n                  break;\n                case 'pdf.export':\n                  visitSummary.hasPdfExport = true;\n                  visitSummary.isPdfSigned = !!obs.metadata?.signed;\n                  break;\n                case 'mcp.context.build':\n                  visitSummary.hasMcpContext = true;\n                  break;\n              }\n            }\n          }\n        }\n        \n        // Agrupar visitas por año\n        const groupedVisits: VisitsByYear = {};\n        \n        // Convertir el Map a Array, ordenarlo por fecha y agrupar\n        Array.from(visitsMap.values())\n          .sort((a, b) => b.date.getTime() - a.date.getTime())\n          .forEach(visit => {\n            const year = visit.date.getFullYear().toString();\n            if (!groupedVisits[year]) {\n              groupedVisits[year] = [];\n              // Expandir el año actual por defecto\n              setExpandedYears(prev => ({ ...prev, [year]: true }));\n            }\n            groupedVisits[year].push(visit);\n          });\n          \n        setVisitsByYear(groupedVisits);\n      } catch (err: any) {\n        console.error('Error fetching patient data:', err);\n        setError('Error al cargar el historial del paciente');\n        \n        // Intentar fallback local\n        if (patientId) {\n          await tryLoadLocalVisits(patientId);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPatientData();\n  }, [patientId]);\n\n  // Cargar visitas locales como fallback\n  const tryLoadLocalVisits = async (patientId: string): Promise<void> => {\n    try {\n      // Primero intentamos cargar los datos del paciente\n      const patientResponse = await fetch(`/logs/patient-${patientId}.json`);\n      if (patientResponse.ok) {\n        const patientData = await patientResponse.json();\n        setPatient(patientData);\n      }\n      \n      // Luego cargamos las visitas de logs locales\n      const response = await fetch(`/logs/patient-visits-${patientId}.json`);\n      if (!response.ok) throw new Error('No local logs available');\n      \n      const localVisits = await response.json();\n      \n      // Procesamiento similar al flujo principal\n      const groupedVisits: VisitsByYear = {};\n      \n      for (const visit of localVisits) {\n        const visitDate = new Date(visit.date);\n        const year = visitDate.getFullYear().toString();\n        \n        if (!groupedVisits[year]) {\n          groupedVisits[year] = [];\n          // Expandir el año actual por defecto\n          setExpandedYears(prev => ({ ...prev, [year]: true }));\n        }\n        \n        groupedVisits[year].push({\n          ...visit,\n          date: visitDate,\n          events: (visit.events || []).map((event: any) => ({\n            ...event,\n            timestamp: new Date(event.timestamp)\n          }))\n        });\n      }\n      \n      // Ordenar visitas dentro de cada año (más recientes primero)\n      Object.keys(groupedVisits).forEach(year => {\n        groupedVisits[year].sort((a, b) => b.date.getTime() - a.date.getTime());\n      });\n      \n      setVisitsByYear(groupedVisits);\n    } catch (err) {\n      console.error('Error loading local visits:', err);\n      \n      // Si no hay datos locales, mostrar estado vacío\n      if (!patient) {\n        setPatient({\n          id: patientId || 'unknown',\n          name: 'Paciente no encontrado',\n          email: 'No disponible'\n        });\n      }\n      \n      setVisitsByYear({});\n    }\n  };\n\n  // Manejar expansión de visitas\n  const toggleVisit = (visitId: string) => {\n    setExpandedVisits(prev => ({\n      ...prev,\n      [visitId]: !prev[visitId]\n    }));\n  };\n\n  // Manejar expansión de años\n  const toggleYear = (year: string) => {\n    setExpandedYears(prev => ({\n      ...prev,\n      [year]: !prev[year]\n    }));\n  };\n\n  // Renderizar cabecera del paciente\n  const renderPatientHeader = () => {\n    if (!patient) return null;\n    \n    return (\n      <div className=\"bg-white shadow sm:rounded-lg mb-6\">\n        <div className=\"px-4 py-5 sm:px-6\">\n          <div className=\"flex justify-between\">\n            <div>\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n                {patient.name}\n              </h3>\n              <p className=\"mt-1 max-w-2xl text-sm text-gray-500\">\n                {patient.email || 'Email no disponible'}\n              </p>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm text-gray-500\">Fecha de nacimiento</p>\n              <p className=\"text-sm font-medium text-gray-900\">\n                {patient.birthDate \n                  ? format(new Date(patient.birthDate), 'dd/MM/yyyy')\n                  : 'No disponible'}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Renderizar indicador de estado\n  const renderStatusIndicator = (\n    condition: boolean | undefined,\n    isRequired: boolean = true,\n    label: string\n  ) => {\n    if (condition === undefined) {\n      return (\n        <div className=\"flex items-center\">\n          <AlertCircle className=\"w-5 h-5 text-gray-400\" />\n          <span className=\"ml-2 text-gray-500\">Dato no disponible</span>\n        </div>\n      );\n    }\n    \n    if (condition) {\n      return (\n        <div className=\"flex items-center\">\n          <CheckCircle className=\"w-5 h-5 text-green-500\" />\n          <span className=\"ml-2 text-green-700\">{label}</span>\n        </div>\n      );\n    }\n    \n    return (\n      <div className=\"flex items-center\">\n        <XCircle className=\"w-5 h-5 text-red-500\" />\n        <span className=\"ml-2 text-red-700\">{isRequired ? `Falta ${label.toLowerCase()}` : `Sin ${label.toLowerCase()}`}</span>\n      </div>\n    );\n  };\n\n  // Renderizar lista de visitas por año\n  const renderVisitsByYear = () => {\n    if (Object.keys(visitsByYear).length === 0) {\n      return (\n        <div className=\"bg-gray-50 border border-gray-200 text-gray-800 px-4 py-6 rounded text-center\">\n          No hay visitas registradas para este paciente\n        </div>\n      );\n    }\n    \n    return (\n      <div className=\"space-y-4\">\n        {Object.entries(visitsByYear)\n          .sort(([yearA], [yearB]) => parseInt(yearB) - parseInt(yearA))\n          .map(([year, visits]) => (\n            <div key={year} className=\"border rounded-lg shadow-sm overflow-hidden\">\n              <div \n                className=\"bg-gray-50 p-4 flex justify-between items-center cursor-pointer hover:bg-gray-100\"\n                onClick={() => toggleYear(year)}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <Calendar className=\"w-5 h-5 text-gray-600\" />\n                  <h3 className=\"font-medium text-gray-800\">Año {year}</h3>\n                  <span className=\"bg-gray-200 text-gray-800 text-xs font-medium px-2.5 py-0.5 rounded-full\">\n                    {visits.length} visita{visits.length !== 1 ? 's' : ''}\n                  </span>\n                </div>\n                {expandedYears[year] ? <ChevronUp className=\"w-5 h-5\" /> : <ChevronDown className=\"w-5 h-5\" />}\n              </div>\n              \n              {expandedYears[year] && (\n                <div className=\"divide-y divide-gray-200\">\n                  {visits.map((visit) => (\n                    <div key={visit.id} className=\"bg-white\">\n                      <div \n                        className=\"p-4 hover:bg-gray-50 cursor-pointer\"\n                        onClick={() => toggleVisit(visit.id)}\n                      >\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <p className=\"font-medium text-gray-900\">\n                              Visita {format(visit.date, 'dd MMM yyyy', { locale: es })}\n                            </p>\n                            <p className=\"text-sm text-gray-500\">\n                              ID: {visit.id}\n                            </p>\n                          </div>\n                          \n                          <div className=\"flex items-center text-sm text-gray-500\">\n                            {expandedVisits[visit.id] ? (\n                              <ChevronUp className=\"w-4 h-4\" />\n                            ) : (\n                              <ChevronDown className=\"w-4 h-4\" />\n                            )}\n                          </div>\n                        </div>\n                        \n                        {/* Badges de estado (visible siempre) */}\n                        <div className=\"mt-3 grid grid-cols-1 md:grid-cols-3 gap-2\">\n                          {renderStatusIndicator(visit.isAudioApproved, true, 'Audio validado')}\n                          {renderStatusIndicator(visit.isPdfSigned, true, 'PDF firmado')}\n                          {renderStatusIndicator(visit.hasMcpContext, false, 'Contexto MCP')}\n                        </div>\n                      </div>\n                      \n                      {/* Eventos detallados (expandibles) */}\n                      {expandedVisits[visit.id] && (\n                        <div className=\"px-4 pb-4 pt-1\">\n                          <div className=\"border-t border-gray-200 pt-3\">\n                            <h4 className=\"text-sm font-medium text-gray-900 mb-2\">\n                              Detalles de eventos\n                            </h4>\n                            \n                            {visit.events.length === 0 ? (\n                              <p className=\"text-sm text-gray-500\">No hay eventos detallados disponibles</p>\n                            ) : (\n                              <ul className=\"space-y-2\">\n                                {visit.events\n                                  .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n                                  .map(event => {\n                                    const eventIcons: Record<EventType, React.ReactNode> = {\n                                      'form.update': <FileText className=\"w-4 h-4 text-blue-500\" />,\n                                      'audio.review': <Mic className=\"w-4 h-4 text-green-500\" />,\n                                      'pdf.export': <FilePdf className=\"w-4 h-4 text-red-500\" />,\n                                      'mcp.context.build': <Database className=\"w-4 h-4 text-purple-500\" />\n                                    };\n                                    \n                                    const eventLabels: Record<EventType, string> = {\n                                      'form.update': 'Actualización de formulario',\n                                      'audio.review': 'Revisión de audio',\n                                      'pdf.export': 'Exportación de PDF',\n                                      'mcp.context.build': 'Creación de contexto MCP'\n                                    };\n                                    \n                                    return (\n                                      <li key={event.id} className=\"text-sm\">\n                                        <div className=\"flex items-center\">\n                                          {eventIcons[event.type]}\n                                          <span className=\"ml-2 font-medium\">{eventLabels[event.type]}</span>\n                                          <span className=\"ml-2 text-gray-500\">\n                                            {format(event.timestamp, 'dd MMM yyyy, HH:mm', { locale: es })}\n                                          </span>\n                                        </div>\n                                        \n                                        {event.type === 'audio.review' && (\n                                          <div className=\"ml-6 mt-1\">\n                                            {event.details?.approved \n                                              ? <span className=\"text-green-600\">✓ Audio aprobado</span>\n                                              : <span className=\"text-red-600\">✗ Audio rechazado</span>\n                                            }\n                                          </div>\n                                        )}\n                                        \n                                        {event.type === 'pdf.export' && (\n                                          <div className=\"ml-6 mt-1\">\n                                            {event.details?.signed \n                                              ? <span className=\"text-green-600\">✓ Documento firmado digitalmente</span>\n                                              : <span className=\"text-yellow-600\">⚠ Documento sin firma digital</span>\n                                            }\n                                          </div>\n                                        )}\n                                      </li>\n                                    );\n                                  })\n                                }\n                              </ul>\n                            )}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          ))}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"bg-gray-100 rounded-lg p-6\">\n      <h2 className=\"text-2xl font-bold mb-6\">Historial de Visitas del Paciente</h2>\n      \n      {/* Datos del paciente */}\n      {renderPatientHeader()}\n      \n      {/* Cargando o error */}\n      {loading ? (\n        <div className=\"flex justify-center items-center h-40\" role=\"status\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n        </div>\n      ) : error ? (\n        <div className=\"bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded\">\n          {error}\n        </div>\n      ) : (\n        renderVisitsByYear()\n      )}\n    </div>\n  );\n};\n\nexport default PatientAuditDashboard; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/dev/DevTools.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/export/VisitPDFExporter.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[707,710],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[707,710],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[817,820],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[817,820],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState  } from 'react';\nimport { Box, Button, Snackbar, Alert, CircularProgress, Tooltip, Typography } from '@mui/material';\nimport PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';\nimport VerifiedIcon from '@mui/icons-material/Verified';\nimport InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';\nimport ExportService from '@/core/services/export/ExportService';\nimport type { Visit, Patient, User, PatientEval  } from '@/core/types';\nimport { useSession } from '@/core/hooks/useSession';\n\n// Tipo más flexible para permitir compatibilidad entre diferentes versiones de Visit\ntype VisitLike = {\n  id: string;\n  patientId: string;\n  date: string;\n  status: string;\n  [key: string]: any;\n};\n\n// Tipo más flexible para evaluaciones\ntype EvaluationLike = {\n  patientId: string;\n  [key: string]: any;\n};\n\ninterface VisitPDFExporterProps {\n  visit: VisitLike;\n  patient: Patient;\n  evaluation?: EvaluationLike;\n  onExportStart?: () => void;\n  onExportComplete?: () => void;\n  onExportError?: (error: Error) => void;\n  buttonText?: string;\n  className?: string;\n}\n\n/**\n * Componente para exportar una visita a PDF\n * \n * @param props - Propiedades del componente\n * @returns Componente React\n */\nconst VisitPDFExporter: React.FC<VisitPDFExporterProps> = ({\n  visit,\n  patient,\n  evaluation,\n  onExportStart,\n  onExportComplete,\n  onExportError,\n  buttonText = 'Exportar PDF',\n  className\n}) => {\n  const { session } = useSession();\n  const [loading, setLoading] = useState(false);\n  const [verifyLoading, setVerifyLoading] = useState(false);\n  const [lastSignatureInfo, setLastSignatureInfo] = useState<{\n    hash?: string;\n    timestamp?: string;\n    success?: boolean;\n  } | null>(null);\n  const [snackbar, setSnackbar] = useState({\n    open: false,\n    message: '',\n    severity: 'success' as 'success' | 'error' | 'info' | 'warning'\n  });\n\n  // Verificar si el usuario actual tiene permisos para exportar\n  const canExport = session?.user?.role === 'professional' || session?.user?.role === 'admin';\n\n  /**\n   * Gestiona la exportación a PDF\n   */\n  const handleExport = async () => {\n    if (!canExport || !session?.user) {\n      setSnackbar({\n        open: true,\n        message: 'No tienes permisos para exportar esta visita',\n        severity: 'error'\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      \n      // Notificar inicio de exportación\n      onExportStart?.();\n      \n      // Crear el profesional a partir de la sesión\n      const professional: User = {\n        id: session.user.id,\n        name: session.user.name,\n        email: session.user.email,\n        role: session.user.role\n      };\n      \n      // Normalizar la visita para cumplir con la interfaz Visit\n      const normalizedVisit: Visit = {\n        id: visit.id,\n        patientId: visit.patientId,\n        date: visit.date,\n        status: visit.status as 'scheduled' | 'completed' | 'cancelled',\n        professionalId: visit.professionalId || professional.id,\n        updatedAt: visit.updatedAt || new Date().toISOString(),\n        createdAt: visit.createdAt || new Date().toISOString(),\n      };\n      \n      // Normalizar la evaluación (si existe)\n      const normalizedEvaluation = evaluation ? {\n        visitId: visit.id,\n        ...evaluation\n      } as PatientEval : undefined;\n      \n      // Generar el PDF con firma digital\n      console.log(`Generando PDF para visita ${visit.id} (${patient.firstName} ${patient.lastName})`);\n      const pdfBytes = await ExportService.generateVisitPDF(\n        normalizedVisit, \n        patient, \n        professional, \n        normalizedEvaluation,\n        true // Habilitar firma digital\n      );\n      \n      // Crear un blob con los bytes del PDF\n      const blob = new Blob([pdfBytes], { type: 'application/pdf' });\n      \n      // Crear URL para el blob\n      const url = URL.createObjectURL(blob);\n      \n      // Crear elemento <a> para la descarga\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `Visita_${visit.id}.pdf`;\n      \n      // Simular clic en el enlace para iniciar la descarga\n      document.body.appendChild(link);\n      link.click();\n      \n      // Limpiar\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      \n      // Verificar la firma recién creada\n      const verificationResult = await ExportService.verifyDocumentSignature(\n        normalizedVisit.id,\n        pdfBytes\n      );\n      \n      if (verificationResult.valid && verificationResult.signature) {\n        // Guardar información de la firma\n        setLastSignatureInfo({\n          hash: verificationResult.signature.hash,\n          timestamp: verificationResult.signature.created_at,\n          success: true\n        });\n        \n        // Mostrar mensaje de éxito con información de firma\n        setSnackbar({\n          open: true,\n          message: 'PDF generado, firmado digitalmente y descargado correctamente',\n          severity: 'success'\n        });\n      } else {\n        // Guardar información de error de firma\n        setLastSignatureInfo({\n          success: false\n        });\n        \n        // Mostrar mensaje de éxito pero con advertencia sobre firma\n        setSnackbar({\n          open: true,\n          message: 'PDF generado y descargado, pero no se pudo verificar la firma digital',\n          severity: 'warning'\n        });\n      }\n      \n      console.log(`PDF generado y descargado: Visita_${visit.id}.pdf`);\n      \n      // Notificar finalización\n      onExportComplete?.();\n    } catch (error) {\n      console.error('Error al exportar la visita a PDF:', error);\n      \n      // Mostrar mensaje de error\n      setSnackbar({\n        open: true,\n        message: 'Error al generar el PDF. Inténtalo de nuevo.',\n        severity: 'error'\n      });\n      \n      // Notificar error\n      if (error instanceof Error) {\n        onExportError?.(error);\n      } else {\n        onExportError?.(new Error('Error desconocido al exportar PDF'));\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Verificar una firma digital desde un archivo PDF subido por el usuario\n   */\n  const handleVerifySignature = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files || files.length === 0) return;\n    \n    try {\n      setVerifyLoading(true);\n      \n      // Leer el archivo PDF\n      const file = files[0];\n      const fileData = await file.arrayBuffer();\n      const fileBytes = new Uint8Array(fileData);\n      \n      // Verificar la firma\n      const verificationResult = await ExportService.verifyDocumentSignature(\n        visit.id,\n        fileBytes\n      );\n      \n      if (verificationResult.valid && verificationResult.signature) {\n        // Guardar información de la firma verificada\n        setLastSignatureInfo({\n          hash: verificationResult.signature.hash,\n          timestamp: verificationResult.signature.created_at,\n          success: true\n        });\n        \n        // Mostrar mensaje de éxito\n        setSnackbar({\n          open: true,\n          message: 'El documento es auténtico y su firma digital es válida',\n          severity: 'success'\n        });\n      } else {\n        // Guardar información de error\n        setLastSignatureInfo({\n          success: false\n        });\n        \n        // Mostrar mensaje de error\n        setSnackbar({\n          open: true,\n          message: verificationResult.error || 'El documento no tiene una firma digital válida',\n          severity: 'error'\n        });\n      }\n    } catch (error) {\n      console.error('Error al verificar firma digital:', error);\n      \n      // Mostrar mensaje de error\n      setSnackbar({\n        open: true,\n        message: 'Error al verificar la firma digital. Inténtalo de nuevo.',\n        severity: 'error'\n      });\n    } finally {\n      setVerifyLoading(false);\n      // Limpiar el input de archivo\n      event.target.value = '';\n    }\n  };\n\n  // Si el usuario no tiene permisos, no mostrar el botón\n  if (!canExport) return null;\n\n  return (\n    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          startIcon={loading ? <CircularProgress size={20} color=\"inherit\" /> : <PictureAsPdfIcon />}\n          onClick={handleExport}\n          disabled={loading || verifyLoading}\n          className={className}\n          sx={{\n            backgroundColor: '#1976d2',\n            '&:hover': {\n              backgroundColor: '#1565c0',\n            }\n          }}\n        >\n          {loading ? 'Generando...' : buttonText}\n        </Button>\n        \n        {/* Botón para verificar firma */}\n        <Tooltip title=\"Verificar autenticidad de un documento PDF\">\n          <Button\n            variant=\"outlined\"\n            color=\"secondary\"\n            component=\"label\"\n            startIcon={verifyLoading ? <CircularProgress size={20} color=\"inherit\" /> : <VerifiedIcon />}\n            disabled={loading || verifyLoading}\n            sx={{ ml: 1 }}\n          >\n            {verifyLoading ? 'Verificando...' : 'Verificar PDF'}\n            <input\n              type=\"file\"\n              accept=\".pdf\"\n              hidden\n              onChange={handleVerifySignature}\n              onClick={(e) => {\n                // Permitir seleccionar el mismo archivo varias veces\n                (e.target as HTMLInputElement).value = '';\n              }}\n            />\n          </Button>\n        </Tooltip>\n        \n        {lastSignatureInfo && (\n          <Tooltip\n            title={\n              lastSignatureInfo.success\n                ? `Documento firmado digitalmente el ${new Date(lastSignatureInfo.timestamp || '').toLocaleString()}. \n                   Hash: ${lastSignatureInfo.hash}`\n                : 'No se ha podido verificar la firma digital del documento'\n            }\n          >\n            <Box sx={{ display: 'flex', alignItems: 'center', ml: 1 }}>\n              <InfoOutlinedIcon\n                color={lastSignatureInfo.success ? 'success' : 'warning'}\n                fontSize=\"small\"\n              />\n              <Typography variant=\"caption\" sx={{ ml: 0.5 }}>\n                {lastSignatureInfo.success ? 'Firmado digitalmente' : 'Sin firma verificada'}\n              </Typography>\n            </Box>\n          </Tooltip>\n        )}\n      </Box>\n      \n      <Snackbar \n        open={snackbar.open} \n        autoHideDuration={6000} \n        onClose={() => setSnackbar({ ...snackbar, open: false })}\n      >\n        <Alert \n          onClose={() => setSnackbar({ ...snackbar, open: false })} \n          severity={snackbar.severity}\n          sx={{ width: '100%' }}\n        >\n          {snackbar.message}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n};\n\nexport default VisitPDFExporter; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/patients/PatientDetail.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/patients/PatientDetailPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/patients/PatientForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PatientService' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'genderOptions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":12,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":20}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect  } from 'react';\nimport { TextField, Button, Box, MenuItem, Paper, Typography } from \"@mui/material\";\nimport type { Patient } from '@/types/Patient';\nimport type { ChangeEvent, FormEvent } from 'react';\nimport type { PatientService  } from '@/types/services/PatientService';\n\ninterface PatientFormProps {\n  patient?: Patient;\n  onSubmit: (patient: Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;\n}\n\nconst genderOptions = [\n  { value: \"male\", label: \"Masculino\" },\n  { value: \"female\", label: \"Femenino\" },\n  { value: \"other\", label: \"Otro\" },\n];\n\nexport const PatientForm = ({ patient, onSubmit }: PatientFormProps) => {\n  const [formData, setFormData] = useState<Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>>({\n    firstName: patient?.firstName || '',\n    lastName: patient?.lastName || '',\n    email: patient?.email || '',\n    phone: patient?.phone || '',\n    birthDate: patient?.birthDate || '',\n    gender: patient?.gender || 'O',\n    address: patient?.address || {\n      street: '',\n      city: '',\n      state: '',\n      zipCode: ''\n    },\n    medicalHistory: patient?.medicalHistory || [],\n    allergies: patient?.allergies || []\n  });\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: FormEvent) => {\n    e.preventDefault();\n    await onSubmit(formData);\n  };\n\n  return (\n    <Paper elevation={3} sx={{ p: 4 }}>\n      <Typography variant=\"h6\" sx={{ mb: 3 }}>\n        {patient ? \"Editar paciente\" : \"Nuevo paciente\"}\n      </Typography>\n      <form onSubmit={handleSubmit}>\n        <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n          <TextField\n            label=\"Nombre\"\n            name=\"firstName\"\n            value={formData.firstName}\n            onChange={handleChange}\n            required\n          />\n          <TextField\n            label=\"Apellido\"\n            name=\"lastName\"\n            value={formData.lastName}\n            onChange={handleChange}\n            required\n          />\n          <TextField\n            label=\"Email\"\n            name=\"email\"\n            type=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n          />\n          <TextField\n            label=\"Teléfono\"\n            name=\"phone\"\n            type=\"tel\"\n            value={formData.phone}\n            onChange={handleChange}\n          />\n          <TextField\n            label=\"Fecha de nacimiento\"\n            name=\"birthDate\"\n            type=\"date\"\n            value={formData.birthDate}\n            onChange={handleChange}\n            required\n            InputLabelProps={{ shrink: true }}\n          />\n          <TextField\n            select\n            label=\"Género\"\n            name=\"gender\"\n            value={formData.gender}\n            onChange={handleChange}\n            required\n          >\n            <MenuItem value=\"M\">Masculino</MenuItem>\n            <MenuItem value=\"F\">Femenino</MenuItem>\n            <MenuItem value=\"O\">Otro</MenuItem>\n          </TextField>\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            {patient ? \"Guardar cambios\" : \"Crear paciente\"}\n          </Button>\n        </Box>\n      </form>\n    </Paper>\n  );\n};\n\nexport default PatientForm;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/patients/PatientList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/visits/NewVisitForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/components/visits/StructuredVisitForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/config/demoPatient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/models/Patient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/models/PatientVisit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/models/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/pages/LoginPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/pages/NewVisitPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/pages/PatientCreatePage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState  } from 'react';\nimport { useNavigate } from \"react-router\";\nimport { Box, Typography, Paper, Container } from '@mui/material';\nimport PatientForm from \"@/modules/emr/components/patients/PatientForm\";\nimport PatientService from \"@/core/services/patient/PatientService\";\nimport type { Patient  } from '@/core/types';\n\nexport default function PatientCreatePage() {\n  const navigate = useNavigate();\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Función para crear un nuevo paciente\n  const handleCreate = async (newPatient: Patient): Promise<void> => {\n    try {\n      setIsLoading(true);\n      // Omitimos el ID ya que se generará automáticamente\n      const createdPatient = await PatientService.createPatient(newPatient);\n      navigate(`/patients/${createdPatient.id}`);\n    } catch (err) {\n      console.error(\"Error al crear paciente:\", err);\n      setError(\"No se pudo crear el paciente. Por favor, inténtelo de nuevo.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Container maxWidth=\"md\">\n      <Box sx={{ my: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Registrar Nuevo Paciente\n        </Typography>\n        \n        {error && (\n          <Paper sx={{ p: 2, mb: 2, bgcolor: 'error.light', color: 'error.contrastText' }}>\n            <Typography>{error}</Typography>\n          </Paper>\n        )}\n        \n        <PatientForm onSubmit={handleCreate} />\n      </Box>\n    </Container>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/pages/PatientDetailPage.tsx","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":10,"column":64,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":10,"endColumn":65,"suggestions":[{"messageId":"removeEscape","fix":{"range":[563,564],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[563,563],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { Container, Typography, CircularProgress, Alert, List, ListItem, ListItemText } from \"@mui/material\";\nimport PatientService from \"@/core/services/patient/PatientService\";\nimport VisitService from \"@/core/services/visit/VisitService\";\nimport type { Patient, Visit  } from '@/core/types';\n\n// Esta función extrae el ID del paciente de la URL actual\nconst getPatientIdFromUrl = (): string | null => {\n  // Ejemplo: /patients/123/detail -> extrae 123\n  const match = window.location.pathname.match(/\\/patients\\/([^\\/]+)/);\n  return match ? match[1] : null;\n};\n\nconst PatientDetailPage = () => {\n  const patientId = getPatientIdFromUrl();\n  const [patient, setPatient] = useState<Patient | null>(null);\n  const [visits, setVisits] = useState<Visit[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!patientId) return;\n      const fetchedPatient = await PatientService.getById(patientId);\n      const fetchedVisits = await VisitService.getByPatientId(patientId);\n      setPatient(fetchedPatient || null);\n      setVisits(fetchedVisits || []);\n      setLoading(false);\n    };\n    fetchData();\n  }, [patientId]);\n\n  if (loading) return <CircularProgress />;\n  if (!patient) return <Alert severity=\"error\">Paciente no encontrado</Alert>;\n\n  return (\n    <Container>\n      <Typography variant=\"h4\" gutterBottom>{patient.firstName} {patient.lastName}</Typography>\n      <Typography variant=\"body1\">Fecha de nacimiento: {patient.birthDate}</Typography>\n      <Typography variant=\"body1\">Sexo: {patient.gender}</Typography>\n      <Typography variant=\"body2\" color=\"textSecondary\">ID: {patient.id}</Typography>\n      <Typography variant=\"h6\" sx={{ mt: 4 }}>Visitas clínicas</Typography>\n      {visits.length === 0 ? (\n        <Typography variant=\"body2\">No hay visitas registradas.</Typography>\n      ) : (\n        <List>\n          {visits.map(visit => (\n            <ListItem key={visit.id} divider>\n              <ListItemText\n                primary={`${visit.type} — ${visit.visitDate}`}\n                secondary={visit.notes || \"Sin notas\"}\n              />\n            </ListItem>\n          ))}\n        </List>\n      )}\n    </Container>\n  );\n};\n\nexport default PatientDetailPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/pages/PatientEditPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/pages/PatientListPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/pages/PatientNewPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/pages/PatientVisitCreatePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/pages/PatientVisitListPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/pages/PatientsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/pages/ProfessionalDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/pages/RecordsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/pages/VisitDetailPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/services/EvalService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FeedbackSchema' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":7,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PatientEvalSchema' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":14,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":24}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { PatientEval  } from '@/core/types';\nimport type { z  } from '@/types/schema-utils';\nimport type { Evaluation  } from '../types/Evaluation';\nimport { generateId } from '@/utils/id';\n\n// Esquema de validación para feedback\nconst FeedbackSchema = z.object({\n  type: z.enumValues(['omission', 'suggestion', 'diagnostic', 'risk'] as const),\n  severity: z.enumValues(['info', 'warning', 'error'] as const),\n  message: z.string()\n});\n\n// Definir el esquema para PatientEval\nconst PatientEvalSchema = z.object({\n  id: z.string(),\n  visitId: z.string(),\n  patientId: z.string(),\n  anamnesis: z.optional(z.string()),\n  physicalExam: z.optional(z.string()),\n  diagnosis: z.optional(z.string()),\n  treatment: z.optional(z.string()),\n  observations: z.optional(z.string()),\n  voiceApprovedNotes: z.optional(z.array(z.string())),\n  createdAt: z.optional(z.string()),\n  updatedAt: z.optional(z.string()),\n  diagnosticoFisioterapeutico: z.optional(z.string()),\n  tratamientoPropuesto: z.optional(z.string()),\n  motivo: z.optional(z.string()),\n  alertas: z.optional(z.array(z.string())),\n  traceId: z.optional(z.string())\n});\n\n// Exportar tipo usando PatientEval de core/types\nexport type { PatientEval };\n\n// Clase personalizada para errores de evaluación\nexport class EvalServiceError extends Error {\n  constructor(\n    message: string,\n    public readonly code: string,\n    public readonly originalError?: unknown\n  ) {\n    super(message);\n    this.name = 'EvalServiceError';\n  }\n}\n\n// Función auxiliar para retry con backoff exponencial\nconst retry = async <T>(\n  fn: () => Promise<T>,\n  maxAttempts: number = 3,\n  baseDelay: number = 1000\n): Promise<T> => {\n  let lastError: unknown;\n  \n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error;\n      if (attempt === maxAttempts) break;\n      \n      const delay = baseDelay * Math.pow(2, attempt - 1);\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n  \n  throw lastError;\n};\n\n// Función auxiliar para validar y parsear respuesta JSON\nconst parseJSONResponse = async (response: Response): Promise<unknown> => {\n  const contentType = response.headers.get('content-type');\n  \n  if (!contentType?.includes('application/json')) {\n    const text = await response.text();\n    throw new EvalServiceError(\n      'Respuesta no válida: Se esperaba JSON',\n      'INVALID_CONTENT_TYPE',\n      { contentType, responseText: text }\n    );\n  }\n\n  try {\n    return await response.json();\n  } catch (error) {\n    throw new EvalServiceError(\n      'Error al parsear respuesta JSON',\n      'PARSE_ERROR',\n      error\n    );\n  }\n};\n\nexport interface EvalFilter {\n  startDate?: Date;\n  endDate?: Date;\n  diagnosisText?: string;\n  feedbackType?: 'alerta' | 'sugerencia' | 'test';\n}\n\n/**\n * Servicio para gestionar evaluaciones de pacientes\n */\nexport class EvalService {\n  // Almacenamiento de evaluaciones\n  private static evaluations: PatientEval[] = [];\n\n  /**\n   * Crear una nueva evaluación\n   */\n  async create(evalData: Omit<PatientEval, 'id' | 'createdAt' | 'updatedAt' | 'visitId'> & { visitId: string }): Promise<PatientEval> {\n    try {\n      const newEval: PatientEval = {\n        id: generateId(),\n        ...evalData,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      // Almacenar en la colección\n      EvalService.evaluations.push(newEval);\n      return newEval;\n    } catch (error) {\n      console.error('Error creando evaluación:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obtener una evaluación por ID\n   */\n  async getById(evalId: string): Promise<PatientEval | null> {\n    try {\n      const foundEval = EvalService.evaluations.find(e => e.id === evalId);\n      return foundEval || null;\n    } catch (error) {\n      console.error('Error obteniendo evaluación:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Actualizar una evaluación existente\n   */\n  async update(evalId: string, evalData: Partial<PatientEval>): Promise<PatientEval> {\n    const evalIndex = EvalService.evaluations.findIndex(e => e.id === evalId);\n    if (evalIndex === -1) {\n      throw new Error('Evaluación no encontrada');\n    }\n    \n    const updatedEval: PatientEval = {\n      ...EvalService.evaluations[evalIndex],\n      ...evalData,\n      updatedAt: new Date().toISOString()\n    };\n    \n    // Actualizar\n    EvalService.evaluations[evalIndex] = updatedEval;\n    return updatedEval;\n  }\n\n  /**\n   * Eliminar una evaluación\n   */\n  async delete(evalId: string): Promise<void> {\n    const evalIndex = EvalService.evaluations.findIndex(e => e.id === evalId);\n    if (evalIndex === -1) {\n      throw new Error('Evaluación no encontrada');\n    }\n    \n    EvalService.evaluations.splice(evalIndex, 1);\n  }\n\n  /**\n   * Obtener evaluaciones por visita\n   */\n  async getByVisitId(visitId: string): Promise<PatientEval[]> {\n    return EvalService.evaluations.filter(e => e.visitId === visitId);\n  }\n\n  /**\n   * Obtener evaluaciones por paciente\n   */\n  static async getPatientEvals(patientId: string): Promise<PatientEval[]> {\n    try {\n      // Filtrar por paciente\n      return this.evaluations.filter(item => item.patientId === patientId);\n    } catch (error) {\n      console.error('Error obteniendo evaluaciones:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Filtrar evaluaciones según criterios\n   */\n  static async filterEvals(evals: PatientEval[], filters: EvalFilter): Promise<PatientEval[]> {\n    return evals.filter(evaluation => {\n      // Filtro por fecha inicio\n      if (filters.startDate && evaluation.createdAt && new Date(evaluation.createdAt) < filters.startDate) {\n        return false;\n      }\n      \n      // Filtro por fecha fin\n      if (filters.endDate && evaluation.createdAt && new Date(evaluation.createdAt) > filters.endDate) {\n        return false;\n      }\n      \n      // Filtro por texto en diagnóstico\n      if (filters.diagnosisText && evaluation.diagnosis) {\n        const matchesDiagnosis = evaluation.diagnosis.toLowerCase().includes(\n          filters.diagnosisText.toLowerCase()\n        );\n        if (!matchesDiagnosis) return false;\n      }\n      \n      // Filtro por tipo de feedback\n      if (filters.feedbackType) {\n        // Implementar lógica según necesidad del proyecto\n      }\n      \n      return true;\n    });\n  }\n\n  /**\n   * Obtener todas las evaluaciones\n   */\n  static async getEvaluations(): Promise<Evaluation[]> {\n    return retry(async () => {\n      try {\n        const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/evaluations`);\n        \n        if (!response.ok) {\n          throw new EvalServiceError(\n            `Error HTTP: ${response.status} ${response.statusText}`,\n            'HTTP_ERROR',\n            { status: response.status }\n          );\n        }\n\n        const data = await parseJSONResponse(response);\n        return data as Evaluation[];\n      } catch (error) {\n        if (error instanceof EvalServiceError) {\n          throw error;\n        }\n        throw new EvalServiceError(\n          'Error al obtener evaluaciones',\n          'UNKNOWN_ERROR',\n          error\n        );\n      }\n    });\n  }\n\n  /**\n   * Obtener una evaluación específica por ID\n   */\n  static async getEvaluationById(id: string): Promise<Evaluation | null> {\n    return retry(async () => {\n      try {\n        const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/evaluations/${id}`);\n        \n        if (!response.ok) {\n          if (response.status === 404) {\n            return null;\n          }\n          throw new EvalServiceError(\n            `Error HTTP: ${response.status} ${response.statusText}`,\n            'HTTP_ERROR',\n            { status: response.status }\n          );\n        }\n\n        const data = await parseJSONResponse(response);\n        return data as Evaluation;\n      } catch (error) {\n        if (error instanceof EvalServiceError) {\n          throw error;\n        }\n        throw new EvalServiceError(\n          'Error al obtener evaluación por ID',\n          'UNKNOWN_ERROR',\n          error\n        );\n      }\n    });\n  }\n}\n\nexport default EvalService; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/services/PaymentTracker.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PaymentStatusSchema' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":6,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { z  } from '@/types/schema-utils';\n\n// Definición de estados de pago usando enum para type-safety\nexport type PaymentStatus = 'pending' | 'paid' | 'overdue' | 'refunded' | 'canceled';\n\nconst PaymentStatusSchema = z.enumValues([\n  'pending',\n  'paid',\n  'overdue',\n  'refunded',\n  'canceled'\n] as const);\n\n// Modelo de pago\nexport interface Payment {\n  id: string;\n  patientId: string;\n  visitId: string;\n  amount: number;\n  status: PaymentStatus;\n  method?: string;\n  date: string;\n  dueDate?: string;\n  notes?: string;\n}\n\n/**\n * Servicio para gestionar pagos asociados a visitas médicas\n */\nexport class PaymentTracker {\n  private payments: Payment[] = [];\n\n  constructor() {\n    // Inicialización del tracker\n  }\n\n  addPayment(payment: Payment): void {\n    // Validación básica\n    if (!payment.id || !payment.patientId || !payment.visitId) {\n      throw new Error('Datos de pago incompletos');\n    }\n    this.payments.push(payment);\n  }\n\n  updatePaymentStatus(paymentId: string, newStatus: PaymentStatus): boolean {\n    const index = this.payments.findIndex(p => p.id === paymentId);\n    if (index === -1) return false;\n    \n    this.payments[index].status = newStatus;\n    return true;\n  }\n\n  getPatientPayments(patientId: string): Payment[] {\n    return this.payments.filter(p => p.patientId === patientId);\n  }\n\n  getVisitPayment(visitId: string): Payment | undefined {\n    return this.payments.find(p => p.visitId === visitId);\n  }\n\n  getOverduePayments(): Payment[] {\n    const today = new Date();\n    return this.payments.filter(p => \n      p.status === 'pending' && \n      p.dueDate && \n      new Date(p.dueDate) < today\n    );\n  }\n\n  calculateTotalRevenue(): number {\n    return this.payments\n      .filter(p => p.status === 'paid')\n      .reduce((sum, p) => sum + p.amount, 0);\n  }\n\n  getPaymentsByStatus(status: PaymentStatus): Payment[] {\n    return this.payments.filter(p => p.status === status);\n  }\n}\n\nexport class PaymentTrackerError extends Error {\n  constructor(\n    message: string,\n    public readonly code: string,\n    public readonly originalError?: unknown\n  ) {\n    super(message);\n    this.name = 'PaymentTrackerError';\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/services/StorageService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/types/Evaluation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/emr/views/VisitDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/feedback/components/FeedbackForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Card' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardContent' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardTitle' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RadioGroup' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RadioGroupItem' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Label' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Textarea' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FeedbackFormData' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[963,966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[963,966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState  } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Box, TextField, Typography, Rating, CircularProgress } from '@mui/material';\nimport type { ChangeEvent, FormEvent } from 'react';\n\ninterface FeedbackFormData {\n  intuitiveness: 'very' | 'clear' | 'confusing' | 'difficult';\n  voiceInput: 'useful' | 'unclear' | 'interested' | 'not-interested';\n  aiSuggestions: 'very-useful' | 'interesting' | 'not-useful' | 'not-seen';\n  security: 'definitely' | 'somewhat' | 'not-noticed' | 'not-believe';\n  futureFeatures: string;\n  additionalComments: string;\n}\n\ninterface FeedbackData {\n  rating: number;\n  comment: string;\n  category: string;\n  metadata?: {\n    [key: string]: any;\n  };\n}\n\ninterface FeedbackFormProps {\n  onSubmit: (data: FeedbackData) => Promise<void>;\n  onCancel: () => void;\n  initialData?: Partial<FeedbackData>;\n}\n\nconst FeedbackForm: React.FC<FeedbackFormProps> = ({ onSubmit, onCancel, initialData }) => {\n  const [formData, setFormData] = useState<FeedbackData>({\n    rating: initialData?.rating || 0,\n    comment: initialData?.comment || '',\n    category: initialData?.category || 'general',\n    metadata: initialData?.metadata || {}\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleRatingChange = (_: unknown, newValue: number | null) => {\n    setFormData(prev => ({\n      ...prev,\n      rating: newValue || 0\n    }));\n  };\n\n  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    try {\n      setLoading(true);\n      await onSubmit(formData);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Error al enviar el feedback');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Box component=\"form\" onSubmit={handleSubmit} sx={{ maxWidth: 600, mx: 'auto', p: 3 }}>\n      <Typography variant=\"h6\" gutterBottom>\n        Enviar Feedback\n      </Typography>\n\n      <Box sx={{ mb: 3 }}>\n        <Typography component=\"legend\">Calificación</Typography>\n        <Rating\n          name=\"rating\"\n          value={formData.rating}\n          onChange={handleRatingChange}\n          precision={0.5}\n        />\n      </Box>\n\n      <TextField\n        fullWidth\n        multiline\n        rows={4}\n        label=\"Comentario\"\n        name=\"comment\"\n        value={formData.comment}\n        onChange={handleChange}\n        sx={{ mb: 3 }}\n      />\n\n      <TextField\n        fullWidth\n        label=\"Categoría\"\n        name=\"category\"\n        value={formData.category}\n        onChange={handleChange}\n        sx={{ mb: 3 }}\n      />\n\n      {error && (\n        <Typography color=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Typography>\n      )}\n\n      <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>\n        <Button\n          variant=\"outlined\"\n          onClick={onCancel}\n          disabled={loading}\n        >\n          Cancelar\n        </Button>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          disabled={loading}\n        >\n          {loading ? <CircularProgress size={24} /> : 'Enviar'}\n            </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default FeedbackForm; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/modules/impact/components/ImpactDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/404.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/PatientListPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/PublicImpactDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/admin/activity.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/admin/impact-copilot.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/admin/reports.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/admin/risk-monitor.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":8,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\nimport { useAuth } from '@/core/context/AuthContext';\nimport { useNavigate } from 'react-router';\nimport RiskMonitorDashboard from '@/modules/admin/components/RiskMonitorDashboard';\nimport { AlertTriangle } from 'lucide-react';\n\nexport default function RiskMonitorPage() {\n  const { user, isAuthenticated } = useAuth();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (isAuthenticated === false) {\n      navigate('/login');\n    }\n  }, [isAuthenticated, navigate]);\n\n  if (isAuthenticated === false) {\n    return null;\n  }\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <AlertTriangle className=\"h-6 w-6 text-amber-500\" />\n          <h1 className=\"text-2xl font-bold text-slate-900\">\n            Monitoreo de Riesgos y Alertas Críticas\n          </h1>\n        </div>\n      </div>\n      \n      <div className=\"bg-gray-50 p-4 rounded-lg border border-gray-200 mb-6\">\n        <p className=\"text-gray-700\">\n          Este panel muestra las sesiones clínicas con potenciales riesgos administrativos o de calidad.\n          Se consideran visitas de riesgo aquellas que presentan omisiones en la validación de checklist, \n          firma digital, exportación de documentos o carga del contexto MCP.\n        </p>\n      </div>\n      \n      <RiskMonitorDashboard className=\"mb-6\" />\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/admin/stats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/api/auth/[...nextauth].ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/api/clinical-search/pubmed.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/api/feedback.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/auth/login.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Grid' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useMemo' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AssignmentTurnedIn' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Analytics' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DataUsage' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VerifiedUser' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ClinicalLogbook' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mockVisits' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":27,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MetricCard' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":67,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":17}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect  } from 'react';\nimport { useNavigate } from 'react-router';\nimport { useAuth } from \"@/core/context/AuthContext\";\nimport { Grid, Card, CardContent, Typography, Box, CircularProgress } from \"@mui/material\";\nimport { useMemo } from \"react\";\nimport { \n  AssignmentTurnedIn, \n  Analytics, \n  DataUsage, \n  VerifiedUser \n} from \"@mui/icons-material\";\nimport ClinicalLogbook from \"@/modules/emr/components/ClinicalLogbook\";\n\ninterface Visit {\n  id: string;\n  userEmail: string;\n  motivo: string;\n  diagnosticoFisioterapeutico: string;\n  tratamientoPropuesto: string;\n  status: string;\n  langfuseEvents: number;\n  date: string;\n  [key: string]: string | number; // Índice de firma para acceso dinámico\n}\n\n// Mock de visitas para desarrollo\nconst mockVisits: Visit[] = [\n  {\n    id: \"1\",\n    userEmail: \"mauricio@aiduxcare.ai\",\n    motivo: \"Dolor lumbar crónico\",\n    diagnosticoFisioterapeutico: \"Lumbalgia mecánica\",\n    tratamientoPropuesto: \"Ejercicios de estabilización\",\n    status: \"completed\",\n    langfuseEvents: 5,\n    date: \"2024-03-15\"\n  },\n  {\n    id: \"2\",\n    userEmail: \"mauricio@aiduxcare.ai\",\n    motivo: \"Cervicalgia\",\n    diagnosticoFisioterapeutico: \"\",\n    tratamientoPropuesto: \"Terapia manual\",\n    status: \"completed\",\n    langfuseEvents: 3,\n    date: \"2024-03-16\"\n  },\n  {\n    id: \"3\",\n    userEmail: \"otro@aiduxcare.ai\",\n    motivo: \"Esguince tobillo\",\n    diagnosticoFisioterapeutico: \"Esguince grado II\",\n    tratamientoPropuesto: \"RICE protocol\",\n    status: \"completed\",\n    langfuseEvents: 4,\n    date: \"2024-03-17\"\n  }\n];\n\ninterface MetricCardProps {\n  icon: React.ReactNode;\n  value: string | number;\n  label: string;\n  color: string;\n}\n\nconst MetricCard = ({ icon, value, label, color }: MetricCardProps) => (\n  <Card sx={{ height: '100%' }}>\n    <CardContent>\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n        <Box sx={{ \n          p: 1, \n          borderRadius: 1, \n          bgcolor: `${color}15`,\n          color: color,\n          mr: 2 \n        }}>\n          {icon}\n        </Box>\n      </Box>\n      <Typography variant=\"h4\" component=\"div\" gutterBottom>\n        {value}\n      </Typography>\n      <Typography variant=\"body2\" color=\"text.secondary\">\n        {label}\n      </Typography>\n    </CardContent>\n  </Card>\n);\n\nconst roleRedirects = {\n  professional: '/dashboard/professional',\n  secretary: '/dashboard/secretary',\n  admin: '/dashboard/admin',\n  developer: '/dashboard/dev'\n};\n\nconst DashboardRedirect: React.FC = () => {\n  const navigate = useNavigate();\n  const { user } = useAuth();\n\n  useEffect(() => {\n    if (!user || !user.role) {\n      return;\n    }\n\n    const targetPath = roleRedirects[user.role as keyof typeof roleRedirects];\n    \n    if (targetPath) {\n      navigate(targetPath, { replace: true });\n    }\n  }, [user, navigate]);\n\n  if (!user) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (!roleRedirects[user.role as keyof typeof roleRedirects]) {\n    return (\n      <Box sx={{ \n        display: 'flex', \n        flexDirection: 'column',\n        justifyContent: 'center', \n        alignItems: 'center', \n        height: '100vh',\n        gap: 2 \n      }}>\n        <Typography variant=\"h5\" color=\"error\">\n          Rol no reconocido\n        </Typography>\n        <Typography>\n          Por favor, contacta con el administrador del sistema.\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n      <CircularProgress />\n    </Box>\n  );\n};\n\nexport default DashboardRedirect; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/dashboard/admin.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/dashboard/dev.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/dashboard/professional.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/dashboard/secretary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/impact.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[459,462],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[459,462],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery } from '@tanstack/react-query';\nimport {\n  ChartBarIcon,\n  CheckCircleIcon,\n} from '@heroicons/react/24/outline';\n\ninterface ImpactStats {\n  avgScore: number;\n  percentHighQuality: number;\n  topMissingFields: Array<{ field: string; count: number }>;\n  topWarnings: Array<{ warning: string; count: number }>;\n}\n\nconst StatCard = ({ \n  title, \n  value, \n  icon: Icon, \n  description \n}: { \n  title: string; \n  value: string | number; \n  icon: any; \n  description?: string;\n}) => (\n  <div className=\"bg-white overflow-hidden shadow rounded-lg\">\n    <div className=\"p-5\">\n      <div className=\"flex items-center\">\n        <div className=\"flex-shrink-0\">\n          <Icon className=\"h-6 w-6 text-gray-400\" />\n        </div>\n        <div className=\"ml-5 w-0 flex-1\">\n          <dl>\n            <dt className=\"text-sm font-medium text-gray-500 truncate\">\n              {title}\n            </dt>\n            <dd className=\"flex items-baseline\">\n              <div className=\"text-2xl font-semibold text-gray-900\">\n                {value}\n              </div>\n            </dd>\n            {description && (\n              <dd className=\"mt-2 text-sm text-gray-500\">\n                {description}\n              </dd>\n            )}\n          </dl>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nconst TopList = ({ \n  title, \n  items, \n  valueLabel \n}: { \n  title: string; \n  items: Array<{ field?: string; warning?: string; count: number }>; \n  valueLabel: string;\n}) => (\n  <div className=\"bg-white shadow rounded-lg\">\n    <div className=\"px-4 py-5 sm:p-6\">\n      <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n        {title}\n      </h3>\n      <div className=\"mt-5\">\n        <div className=\"flow-root\">\n          <ul className=\"-mb-8\">\n            {items.map((item, itemIdx) => (\n              <li key={itemIdx}>\n                <div className=\"relative pb-8\">\n                  {itemIdx !== items.length - 1 ? (\n                    <span\n                      className=\"absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200\"\n                      aria-hidden=\"true\"\n                    />\n                  ) : null}\n                  <div className=\"relative flex space-x-3\">\n                    <div>\n                      <span className=\"h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center ring-8 ring-white\">\n                        {itemIdx + 1}\n                      </span>\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"text-sm text-gray-500\">\n                        <span className=\"font-medium text-gray-900\">\n                          {item.field || item.warning}\n                        </span>\n                        <span className=\"ml-2 font-medium text-indigo-600\">\n                          {item.count} {valueLabel}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default function PublicImpactDashboard() {\n  const { data, isLoading, error } = useQuery<ImpactStats>({\n    queryKey: ['impactStats'],\n    queryFn: async () => {\n      const response = await fetch('/api/public/impact');\n      if (!response.ok) {\n        throw new Error('Error al cargar estadísticas');\n      }\n      return response.json();\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-100 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <h2 className=\"text-3xl font-extrabold text-gray-900 sm:text-4xl\">\n              Cargando estadísticas...\n            </h2>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !data) {\n    return (\n      <div className=\"min-h-screen bg-gray-100 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <h2 className=\"text-3xl font-extrabold text-red-600 sm:text-4xl\">\n              Error al cargar estadísticas\n            </h2>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      <div className=\"py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <h2 className=\"text-3xl font-extrabold text-gray-900 sm:text-4xl\">\n              Impacto Clínico de AiDuxCare\n            </h2>\n            <p className=\"mt-4 text-lg text-gray-500\">\n              Estadísticas de los últimos 30 días\n            </p>\n          </div>\n\n          <div className=\"mt-10\">\n            <div className=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-2\">\n              <StatCard\n                title=\"Score Promedio de Completitud\"\n                value={`${data.avgScore}%`}\n                icon={ChartBarIcon}\n                description=\"Promedio de completitud de datos clínicos\"\n              />\n              <StatCard\n                title=\"Visitas de Alta Calidad\"\n                value={`${data.percentHighQuality}%`}\n                icon={CheckCircleIcon}\n                description=\"Porcentaje de visitas con score >80%\"\n              />\n            </div>\n          </div>\n\n          <div className=\"mt-10 grid grid-cols-1 gap-5 lg:grid-cols-2\">\n            <TopList\n              title=\"Campos Más Comúnmente Omitidos\"\n              items={data.topMissingFields}\n              valueLabel=\"veces\"\n            />\n            <TopList\n              title=\"Advertencias Más Frecuentes\"\n              items={data.topWarnings}\n              valueLabel=\"ocurrencias\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/mcp/[visitId].tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/onboarding.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/pages/professional/Dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ClipboardCheck' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useAuth } from '@/core/context/AuthContext';\nimport { Link } from '@/core/utils/router';\nimport { \n  Users, \n  Calendar, \n  ClipboardCheck, \n  Brain, \n  ArrowRight \n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { StatCard } from '@/components/ui/stat-card';\n\nexport default function ProfessionalDashboard() {\n  const { user } = useAuth();\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header y bienvenida */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">\n          Bienvenido, {user?.name || 'Dr. Profesional'}\n        </h1>\n        <p className=\"text-gray-600 mt-2\">\n          Este es el panel de control de AiDuxCare para profesionales de la salud\n        </p>\n      </div>\n      \n      {/* Estadísticas principales */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        <StatCard\n          title=\"Total pacientes\"\n          value=\"42\"\n          icon={Users}\n          trend={{ value: 8, isPositive: true }}\n          subtitle=\"8% más que el mes pasado\"\n        />\n        <StatCard\n          title=\"Visitas activas\"\n          value=\"12\"\n          icon={Calendar}\n          subtitle=\"4 pendientes para hoy\"\n        />\n        <StatCard\n          title=\"Actividad IA\"\n          value=\"75+\"\n          icon={Brain}\n          trend={{ value: 12, isPositive: true }}\n          subtitle=\"Interacciones este mes\"\n        />\n      </div>\n\n      {/* Secciones principales */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Sección de visitas recientes */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle className=\"text-lg font-medium\">Visitas recientes</CardTitle>\n            <Link \n              to=\"/visits\" \n              className=\"text-sm text-blue-600 hover:text-blue-800 flex items-center\"\n            >\n              Ver todas <ArrowRight className=\"ml-1 h-4 w-4\" />\n            </Link>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {visitas.length > 0 ? (\n                visitas.map((visita) => (\n                  <div \n                    key={visita.id} \n                    className=\"flex items-center p-3 rounded-lg hover:bg-gray-50 border border-gray-100\"\n                  >\n                    <Calendar className=\"h-9 w-9 text-blue-500 bg-blue-50 p-2 rounded-full mr-4\" />\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium text-gray-900 truncate\">\n                        {visita.paciente}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        {formatDate(visita.fecha)} - {visita.motivo}\n                      </p>\n                    </div>\n                    <Link \n                      to={`/visits/${visita.id}`} \n                      className=\"ml-2 text-sm text-blue-600 hover:text-blue-800\"\n                    >\n                      Ver\n                    </Link>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-6\">\n                  <Calendar className=\"h-12 w-12 mx-auto text-gray-400\" />\n                  <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No hay visitas recientes</h3>\n                  <p className=\"mt-1 text-sm text-gray-500\">\n                    Aún no tienes visitas registradas en el sistema.\n                  </p>\n                  <div className=\"mt-6\">\n                    <Link\n                      to=\"/visits\"\n                      className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700\"\n                    >\n                      Crear visita\n                    </Link>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Sección de pacientes recientes */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle className=\"text-lg font-medium\">Pacientes recientes</CardTitle>\n            <Link \n              to=\"/patients\" \n              className=\"text-sm text-blue-600 hover:text-blue-800 flex items-center\"\n            >\n              Ver todos <ArrowRight className=\"ml-1 h-4 w-4\" />\n            </Link>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {pacientes.length > 0 ? (\n                pacientes.map((paciente) => (\n                  <div \n                    key={paciente.id} \n                    className=\"flex items-center p-3 rounded-lg hover:bg-gray-50 border border-gray-100\"\n                  >\n                    <div className=\"h-9 w-9 rounded-full bg-gray-200 mr-4 flex items-center justify-center overflow-hidden\">\n                      {paciente.avatar ? (\n                        <img src={paciente.avatar} alt={paciente.nombre} className=\"h-full w-full object-cover\" />\n                      ) : (\n                        <Users className=\"h-5 w-5 text-gray-500\" />\n                      )}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium text-gray-900 truncate\">\n                        {paciente.nombre}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        {paciente.edad} años - {paciente.motivo}\n                      </p>\n                    </div>\n                    <Link \n                      to={`/patients/${paciente.id}`} \n                      className=\"ml-2 text-sm text-blue-600 hover:text-blue-800\"\n                    >\n                      Ver\n                    </Link>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-6\">\n                  <Users className=\"h-12 w-12 mx-auto text-gray-400\" />\n                  <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No hay pacientes</h3>\n                  <p className=\"mt-1 text-sm text-gray-500\">\n                    Comienza agregando pacientes a tu lista.\n                  </p>\n                  <div className=\"mt-6\">\n                    <Link\n                      to=\"/patients/new\"\n                      className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700\"\n                    >\n                      Añadir paciente\n                    </Link>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Sección asistencia IA */}\n      <Card className=\"bg-blue-50 border-blue-100\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-medium text-blue-800\">Asistencia IA</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center\">\n            <Brain className=\"h-12 w-12 text-blue-500 mr-4\" />\n            <div>\n              <h3 className=\"text-base font-medium text-blue-800\">Panel IA disponible para ayudarte</h3>\n              <p className=\"text-sm text-blue-600 mt-1\">\n                Utiliza nuestra IA para diagnósticos, notas clínicas y recomendaciones de tratamiento.\n              </p>\n              <Link\n                to=\"/mcp\"\n                className=\"inline-flex items-center mt-3 px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700\"\n              >\n                Abrir Panel IA\n              </Link>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// Datos de ejemplo para mostrar en el dashboard\nconst visitas = [\n  {\n    id: '1',\n    paciente: 'María García',\n    fecha: new Date('2023-05-15T10:30:00'),\n    motivo: 'Revisión mensual',\n  },\n  {\n    id: '2',\n    paciente: 'Juan López',\n    fecha: new Date('2023-05-14T16:00:00'),\n    motivo: 'Dolor lumbar',\n  },\n  {\n    id: '3',\n    paciente: 'Ana Martínez',\n    fecha: new Date('2023-05-12T09:00:00'),\n    motivo: 'Rehabilitación',\n  },\n];\n\nconst pacientes = [\n  {\n    id: '1',\n    nombre: 'María García',\n    edad: 42,\n    motivo: 'Dolor crónico',\n    avatar: null,\n  },\n  {\n    id: '2',\n    nombre: 'Juan López',\n    edad: 35,\n    motivo: 'Rehabilitación deportiva',\n    avatar: null,\n  },\n  {\n    id: '3',\n    nombre: 'Ana Martínez',\n    edad: 68,\n    motivo: 'Post-operatorio',\n    avatar: null,\n  },\n];\n\nfunction formatDate(date: Date): string {\n  return new Intl.DateTimeFormat('es-ES', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  }).format(date);\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/server/lib/langfuse-server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1120,1123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1120,1123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Cliente Langfuse para entorno de servidor - Versión simplificada\n */\n\ninterface LangfuseConfig {\n  publicKey?: string;\n  baseUrl?: string;\n}\n\ninterface TraceOptions {\n  name: string;\n  metadata?: Record<string, unknown>;\n}\n\n// Parámetros posibles para eventos\nexport interface EventParams {\n  name: string;\n  payload?: Record<string, unknown>;\n  traceId?: string;\n}\n\nexport type EventOptions = string | EventParams;\n\n// Configuración para Langfuse Server\nconst langfuseConfig: LangfuseConfig = {\n  publicKey: process.env.VITE_LANGFUSE_PUBLIC_KEY,\n  baseUrl: process.env.VITE_LANGFUSE_BASE_URL\n};\n\n// Función para verificar si tenemos las credenciales necesarias\nexport const isLangfuseConfigured = (): boolean => {\n  return !!langfuseConfig.publicKey;\n};\n\n// Implementación mock del cliente Langfuse para servidor\nclass ServerLangfuseClient {\n  constructor(private config: LangfuseConfig) {}\n  \n  async trace(options: TraceOptions): Promise<{ id: string }> {\n    console.log('[Langfuse Server] Trace:', options);\n    return { id: `mock-trace-${Date.now()}` };\n  }\n  \n  async observation(traceId: string, options: any): Promise<{ id: string }> {\n    console.log('[Langfuse Server] Observation:', { traceId, ...options });\n    return { id: `mock-obs-${Date.now()}` };\n  }\n}\n\n// Crear instancia del cliente\nexport const langfuse = new ServerLangfuseClient(langfuseConfig);\n\n/**\n * Seguir un evento en Langfuse con nombre y metadatos\n * Soporta ambos formatos de llamada:\n * 1. trackServerEvent({ name, payload, traceId })\n * 2. trackServerEvent(name, metadata)\n */\nexport const trackServerEvent = async (\n  eventOrName: EventOptions,\n  metadata?: Record<string, unknown>\n): Promise<{ id: string }> => {\n  try {\n    let name: string;\n    let payload: Record<string, unknown> = {};\n    let traceId: string | undefined;\n    \n    // Detectar qué formato de parámetros se está utilizando\n    if (typeof eventOrName === 'string') {\n      // Formato antiguo: trackServerEvent(name, metadata)\n      name = eventOrName;\n      payload = metadata || {};\n    } else {\n      // Formato nuevo: trackServerEvent({ name, payload, traceId })\n      name = eventOrName.name;\n      payload = eventOrName.payload || {};\n      traceId = eventOrName.traceId;\n    }\n    \n    return await langfuse.trace({\n      name,\n      metadata: {\n        ...payload,\n        source: 'server',\n        timestamp: new Date().toISOString(),\n        traceId\n      }\n    });\n  } catch (error) {\n    console.error('Error al enviar evento a Langfuse:', error);\n    return { id: `error-${Date.now()}` };\n  }\n};\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/server/middleware/auth.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[527,530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[527,530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextApiRequest, NextApiResponse } from 'next';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/pages/api/auth/[...nextauth]';\n\ntype NextApiHandler = (req: NextApiRequest, res: NextApiResponse) => Promise<void>;\n\nexport const validateAdminAccess = (handler: NextApiHandler): NextApiHandler => {\n  return async (req: NextApiRequest, res: NextApiResponse) => {\n    try {\n      const session = await getServerSession(req, res, authOptions);\n      \n      if (!session?.user || (session.user as any).role !== 'admin') {\n        return res.status(403).json({ message: 'No autorizado' });\n      }\n\n      return handler(req, res);\n    } catch (error) {\n      console.error('Error en validación de acceso:', error);\n      return res.status(500).json({ message: 'Error interno del servidor' });\n    }\n  };\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/server/routes/__tests__/mcp.integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'beforeAll' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":41}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeAll } from 'vitest';\nimport express from 'express';\nimport request from 'supertest';\nimport mcpRouter from '../mcp';\n\ndescribe('MCP API Endpoints', () => {\n  const app = express();\n  app.use(express.json());\n  app.use('/api/mcp', mcpRouter);\n\n  const validContext = {\n    user_input: 'Paciente refiere dolor lumbar intenso',\n    patient_state: {\n      age: 42,\n      sex: 'F',\n      history: ['Dolor lumbar crónico', 'HTA controlada']\n    },\n    visit_metadata: {\n      visit_id: 'c7d6f3e1-7a9b-4c1d-8a9e-3c6d7f3e1a9b',\n      date: new Date().toISOString(),\n      professional: 'mauricio@axonvalencia.es'\n    },\n    rules_and_constraints: [\n      'Respetar confidencialidad del paciente',\n      'No realizar diagnósticos sin evidencia'\n    ],\n    system_instructions: 'Actúa como un asistente clínico profesional.'\n  };\n\n  it('POST /api/mcp/invoke debe validar un contexto correcto', async () => {\n    const response = await request(app)\n      .post('/api/mcp/invoke')\n      .send(validContext);\n\n    expect(response.status).toBe(200);\n    expect(response.body.success).toBe(true);\n  });\n\n  it('POST /api/mcp/invoke debe rechazar un contexto inválido', async () => {\n    const invalidContext = {\n      ...validContext,\n      patient_state: {\n        ...validContext.patient_state,\n        age: -1 // Edad inválida\n      }\n    };\n\n    const response = await request(app)\n      .post('/api/mcp/invoke')\n      .send(invalidContext);\n\n    expect(response.status).toBe(400);\n    expect(response.body.success).toBe(false);\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/server/routes/admin/copilot-impact.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LangfuseObservationResponse' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextApiRequest, NextApiResponse } from 'next';\nimport { getServerSession } from 'next-auth';\nimport { Langfuse } from 'langfuse-node';\nimport { UserRole } from '@/modules/auth/authService';\nimport type { LangfuseObservation, \n  LangfuseObservationResponse, \n  GetObservationsOptions \n } from '@/types/langfuse.events';\nimport { authOptions } from '@/pages/api/auth/[...nextauth]';\n\ninterface LangfuseResponse {\n  data: LangfuseObservation[];\n}\n\nconst langfuse = new Langfuse({\n  publicKey: process.env.VITE_LANGFUSE_PUBLIC_KEY ?? '',\n  secretKey: process.env.LANGFUSE_SECRET_KEY ?? '',\n  baseUrl: process.env.VITE_LANGFUSE_BASE_URL ?? ''\n}) as Langfuse & {\n  getObservations(options: GetObservationsOptions): Promise<LangfuseResponse>;\n};\n\ninterface CopilotImpactMetrics {\n  totalSuggestions: number;\n  acceptedSuggestions: number;\n  feedbackByType: {\n    positive: number;\n    negative: number;\n    ignored: number;\n  };\n  suggestionsByField: {\n    [key: string]: {\n      total: number;\n      accepted: number;\n      feedback: {\n        positive: number;\n        negative: number;\n        ignored: number;\n      };\n    };\n  };\n  topPatients: Array<{\n    patientId: string;\n    suggestions: number;\n    accepted: number;\n    lastInteraction: string;\n  }>;\n  lastUpdated: string;\n}\n\ntype FeedbackType = 'positive' | 'negative' | 'ignored';\n\ninterface PatientStats {\n  suggestions: number;\n  accepted: number;\n  lastInteraction: string;\n}\n\n// Función auxiliar para inicializar métricas\nconst initializeMetrics = (): CopilotImpactMetrics => ({\n  totalSuggestions: 0,\n  acceptedSuggestions: 0,\n  feedbackByType: {\n    positive: 0,\n    negative: 0,\n    ignored: 0,\n  },\n  suggestionsByField: {},\n  topPatients: [],\n  lastUpdated: new Date().toISOString(),\n});\n\n// Función auxiliar para procesar sugerencias\nconst processSuggestion = (metrics: CopilotImpactMetrics, event: LangfuseObservation) => {\n  metrics.totalSuggestions++;\n  const field = event.input?.field;\n  if (field) {\n    if (!metrics.suggestionsByField[field]) {\n      metrics.suggestionsByField[field] = {\n        total: 0,\n        accepted: 0,\n        feedback: { positive: 0, negative: 0, ignored: 0 },\n      };\n    }\n    metrics.suggestionsByField[field].total++;\n  }\n};\n\n// Función auxiliar para procesar feedback\nconst processFeedback = (metrics: CopilotImpactMetrics, event: LangfuseObservation) => {\n  const feedbackType = event.input?.feedback;\n  if (feedbackType && feedbackType in metrics.feedbackByType) {\n    metrics.feedbackByType[feedbackType as FeedbackType]++;\n    if (feedbackType === 'positive') {\n      metrics.acceptedSuggestions++;\n      const field = event.input?.field;\n      if (field && metrics.suggestionsByField[field]) {\n        metrics.suggestionsByField[field].accepted++;\n        metrics.suggestionsByField[field].feedback.positive++;\n      }\n    }\n  }\n};\n\n// Función auxiliar para actualizar estadísticas de pacientes\nconst updatePatientStats = (\n  patientStats: Map<string, PatientStats>,\n  event: LangfuseObservation\n) => {\n  const patientId = event.metadata?.patientId;\n  if (!patientId) return;\n\n  const stats = patientStats.get(patientId) || {\n    suggestions: 0,\n    accepted: 0,\n    lastInteraction: event.startTime,\n  };\n\n  if (event.name === 'copilot.suggestion') {\n    stats.suggestions++;\n  } else if (event.name === 'copilot.feedback' && event.input?.feedback === 'positive') {\n    stats.accepted++;\n  }\n\n  if (new Date(event.startTime) > new Date(stats.lastInteraction)) {\n    stats.lastInteraction = event.startTime;\n  }\n\n  patientStats.set(patientId, stats);\n};\n\n// Función auxiliar para procesar eventos de sugerencias\nconst processSuggestionEvents = (events: LangfuseObservation[]) => {\n  const metrics = initializeMetrics();\n  const patientStats = new Map<string, PatientStats>();\n\n  events.forEach(event => {\n    if (event.name === 'copilot.suggestion') {\n      processSuggestion(metrics, event);\n    } else if (event.name === 'copilot.feedback') {\n      processFeedback(metrics, event);\n    }\n    updatePatientStats(patientStats, event);\n  });\n\n  // Convertir estadísticas de pacientes a array y ordenar\n  metrics.topPatients = Array.from(patientStats.entries())\n    .map(([patientId, stats]) => ({\n      patientId,\n      ...stats,\n    }))\n    .sort((a, b) => b.suggestions - a.suggestions)\n    .slice(0, 10);\n\n  return metrics;\n};\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ message: 'Método no permitido' });\n  }\n\n  try {\n    const session = await getServerSession(req, res, authOptions);\n    if (!session?.user || (session.user as { role?: UserRole }).role !== 'admin') {\n      return res.status(403).json({ message: 'No autorizado' });\n    }\n\n    // Obtener eventos de los últimos 30 días\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    // Usar el método correcto de la API de Langfuse\n    const response = await langfuse.getObservations({\n      startTime: thirtyDaysAgo.toISOString(),\n      name: 'copilot.suggestion',\n    }) as LangfuseResponse;\n\n    const feedbackResponse = await langfuse.getObservations({\n      startTime: thirtyDaysAgo.toISOString(),\n      name: 'copilot.feedback',\n    }) as LangfuseResponse;\n\n    const allEvents = [...(response.data || []), ...(feedbackResponse.data || [])];\n    const metrics = processSuggestionEvents(allEvents);\n\n    res.status(200).json(metrics);\n  } catch (error) {\n    console.error('Error al obtener métricas del copiloto:', error);\n    res.status(500).json({ message: 'Error interno del servidor' });\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/server/routes/admin/emr-stats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/server/routes/admin/patient-activity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/server/routes/admin/weekly-report.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/server/routes/api/mcp.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/server/routes/api/patient.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2850,2853],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2850,2853],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Router } from 'express';\nimport * as zod from '@/types/zod-utils';\n\n// Definimos los esquemas directamente en este archivo\nconst PatientDataSchema = zod.z.object({\n  id: zod.z.string(),\n  name: zod.z.string(),\n  birthDate: zod.z.string(),\n  allergies: zod.z.array(zod.z.string()),\n  chronicConditions: zod.z.array(zod.z.string()),\n  medications: zod.z.array(zod.z.string())\n});\n\nconst VisitSchema = zod.z.object({\n  id: zod.z.string(),\n  date: zod.z.string(),\n  type: zod.z.string(),\n  summary: zod.z.string(),\n  professional: zod.z.string()\n});\n\n// Tipo inferido del esquema para uso en TypeScript\ntype Patient = {\n  id: string;\n  name: string;\n  birthDate: string;\n  allergies: string[];\n  chronicConditions: string[];\n  medications: string[];\n};\n\ntype Visit = {\n  id: string;\n  date: string;\n  type: string;\n  summary: string;\n  professional: string;\n};\n\n// Simulación de base de datos local\nconst mockDatabase = {\n  patients: new Map<string, Patient>([\n    ['p1', {\n      id: 'p1',\n      name: 'Juan García López',\n      birthDate: '1975-08-15T00:00:00Z',\n      allergies: ['Penicilina', 'Sulfas'],\n      chronicConditions: ['Hipertensión Arterial', 'Diabetes Mellitus tipo 2'],\n      medications: ['Metformina 850mg', 'Enalapril 10mg']\n    }],\n    ['p2', {\n      id: 'p2',\n      name: 'María Rodríguez Sánchez',\n      birthDate: '1982-03-21T00:00:00Z',\n      allergies: ['AINES'],\n      chronicConditions: ['Asma'],\n      medications: ['Salbutamol inhalador']\n    }]\n  ]),\n  visits: new Map<string, Visit[]>([\n    ['p1', [\n      {\n        id: 'v1',\n        date: '2024-03-01T10:00:00Z',\n        type: 'Control Crónico',\n        summary: 'Paciente estable. HTA controlada. Ajuste de dosis de metformina.',\n        professional: 'dr.garcia@aiduxcare.com'\n      },\n      {\n        id: 'v2',\n        date: '2024-02-01T15:30:00Z',\n        type: 'Control Diabetes',\n        summary: 'HbA1c 6.8%. Continuar mismo esquema.',\n        professional: 'dr.rodriguez@aiduxcare.com'\n      }\n    ]],\n    ['p2', [\n      {\n        id: 'v3',\n        date: '2024-03-10T09:00:00Z',\n        type: 'Control Asma',\n        summary: 'Buen control de síntomas. Mantener tratamiento.',\n        professional: 'dr.garcia@aiduxcare.com'\n      }\n    ]]\n  ])\n};\n\nclass PatientNotFoundError extends Error {\n  constructor(patientId: string) {\n    super(`Paciente con ID ${patientId} no encontrado`);\n    this.name = 'PatientNotFoundError';\n  }\n}\n\n// Tipo para ZodError para cuando no tenemos acceso directo a la clase\ninterface ZodErrorType {\n  errors: Array<{\n    path: string[];\n    message: string;\n    code: string;\n  }>;\n}\n\n// Función para verificar si un error es de tipo ZodError\nfunction isZodError(error: unknown): error is ZodErrorType {\n  return (\n    typeof error === 'object' && \n    error !== null && \n    'errors' in error && \n    Array.isArray((error as any).errors)\n  );\n}\n\nconst router = Router();\n\nrouter.get('/:id', async (req, res) => {\n  try {\n    const patientId = req.params.id;\n    const patient = mockDatabase.patients.get(patientId);\n    \n    if (!patient) {\n      throw new PatientNotFoundError(patientId);\n    }\n\n    // Validar datos del paciente\n    const validatedPatient = PatientDataSchema.parse(patient);\n    \n    // Obtener y validar visitas\n    const visits = mockDatabase.visits.get(patientId) || [];\n    const validatedVisits = zod.z.array(VisitSchema).parse(visits);\n\n    res.json({\n      patient: validatedPatient,\n      visits: validatedVisits\n    });\n  } catch (error) {\n    if (error instanceof PatientNotFoundError) {\n      res.status(404).json({ error: error.message });\n    } else if (isZodError(error)) {\n      res.status(400).json({ \n        error: 'Datos inválidos en el EMR', \n        details: error.errors \n      });\n    } else {\n      console.error('Error al obtener datos del paciente:', error);\n      res.status(500).json({ error: 'Error interno del servidor' });\n    }\n  }\n});\n\nexport default router; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/server/routes/emr/patients 2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/server/routes/emr/patients.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/server/routes/event.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'traceOptions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":15,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { langfuseBackend } from '@/core/lib/langfuse.backend';\nimport { verifyBackendConfig } from '@/core/lib/langfuse.backend';\nimport type { TraceOptions  } from '@/types/langfuse.events';\n\nexport async function handleEvent(req: Request) {\n  try {\n    verifyBackendConfig();\n    \n    const { name, metadata } = await req.json();\n    \n    if (!name) {\n      return new Response('Missing event name', { status: 400 });\n    }\n\n    const traceOptions: TraceOptions = {\n      name,\n      metadata: {\n        ...metadata,\n        timestamp: new Date().toISOString(),\n        userAgent: req.headers.get('user-agent'),\n        origin: req.headers.get('origin')\n      }\n    };\n\n    const trace = await langfuseBackend.trace(name);\n\n    return new Response(JSON.stringify({ success: true, traceId: trace.id }), {\n      headers: { 'Content-Type': 'application/json' }\n    });\n\n  } catch (error) {\n    console.error('[Event Handler]', error);\n    return new Response(\n      JSON.stringify({ \n        error: error instanceof Error ? error.message : 'Unknown error'\n      }), \n      { \n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/server/routes/mcp.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/server/routes/public/impact.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[333,336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[333,336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ImpactStats' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":22}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Langfuse } from 'langfuse-node';\nimport { evaluatePatientVisit } from '@/utils/evals/structuredVisit';\n\ninterface LangfuseTrace {\n  id: string;\n  startTime: string;\n  metadata?: {\n    patientId?: string;\n  };\n}\n\n// Define un tipo correcto para Response\ninterface ApiResponse {\n  status: (code: number) => {\n    json: (data: any) => void;\n  };\n}\n\n// Inicializar cliente de Langfuse con la configuración correcta\nconst langfuse = new Langfuse({\n  publicKey: process.env.VITE_LANGFUSE_PUBLIC_KEY || '',\n  secretKey: process.env.LANGFUSE_SECRET_KEY || '',\n  baseUrl: process.env.VITE_LANGFUSE_BASE_URL || 'https://cloud.langfuse.com'\n});\n\ninterface ImpactStats {\n  avgScore: number;\n  percentHighQuality: number;\n  topMissingFields: Array<{ field: string; count: number }>;\n  topWarnings: Array<{ warning: string; count: number }>;\n}\n\n// Función auxiliar para obtener traces manualmente (ya que langfuse no tiene getTraces)\nasync function fetchTraces(startTime: string, name: string): Promise<LangfuseTrace[]> {\n  try {\n    if (!process.env.VITE_LANGFUSE_BASE_URL) {\n      return [];\n    }\n    \n    const apiUrl = `${process.env.VITE_LANGFUSE_BASE_URL}/api/public/traces`;\n    const url = new URL(apiUrl);\n    url.searchParams.append('startTime', startTime);\n    url.searchParams.append('name', name);\n    \n    const response = await fetch(url.toString(), {\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': `${process.env.VITE_LANGFUSE_PUBLIC_KEY}:${process.env.LANGFUSE_SECRET_KEY}`\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Error al obtener traces: ${response.status} ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    return data.data || [];\n  } catch (error) {\n    console.error('Error al obtener traces:', error);\n    return [];\n  }\n}\n\nexport default async function handler(\n  req: Request,\n  res: ApiResponse\n) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ message: 'Método no permitido' });\n  }\n\n  try {\n    // Obtener traces de los últimos 30 días\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    const traces = await fetchTraces(thirtyDaysAgo.toISOString(), 'form.update');\n\n    // Agrupar por paciente (último trace por paciente)\n    const patientTraces = new Map<string, LangfuseTrace>();\n    for (const trace of traces) {\n      const patientId = trace.metadata?.patientId;\n      if (patientId) {\n        const existingTrace = patientTraces.get(patientId);\n        if (!existingTrace || new Date(trace.startTime) > new Date(existingTrace.startTime)) {\n          patientTraces.set(patientId, trace);\n        }\n      }\n    }\n\n    // Realizar evaluaciones\n    const evaluations = await Promise.all(\n      Array.from(patientTraces.values()).map(async trace => {\n        try {\n          return await evaluatePatientVisit(langfuse, trace.id);\n        } catch (error) {\n          console.error(`Error evaluando visita para trace ${trace.id}:`, error);\n          return {\n            patientId: trace.metadata?.patientId || 'unknown',\n            completenessScore: 0,\n            missingFields: [],\n            warnings: []\n          };\n        }\n      })\n    );\n\n    // Calcular estadísticas\n    const totalEvals = evaluations.length;\n    if (totalEvals === 0) {\n      return res.status(200).json({\n        avgScore: 0,\n        percentHighQuality: 0,\n        topMissingFields: [],\n        topWarnings: []\n      });\n    }\n\n    // Promedio de scores\n    const avgScore = Math.round(\n      evaluations.reduce((sum, evaluation) => sum + evaluation.completenessScore, 0) / totalEvals\n    );\n\n    // Porcentaje de alta calidad (>80)\n    const highQualityCount = evaluations.filter(evaluation => evaluation.completenessScore > 80).length;\n    const percentHighQuality = Math.round((highQualityCount / totalEvals) * 100);\n\n    // Campos faltantes más comunes\n    const missingFieldsCount = new Map<string, number>();\n    evaluations.forEach(evaluation => {\n      evaluation.missingFields.forEach(field => {\n        missingFieldsCount.set(field, (missingFieldsCount.get(field) || 0) + 1);\n      });\n    });\n\n    const topMissingFields = Array.from(missingFieldsCount.entries())\n      .map(([field, count]) => ({ field, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5);\n\n    // Advertencias más comunes\n    const warningsCount = new Map<string, number>();\n    evaluations.forEach(evaluation => {\n      evaluation.warnings.forEach(warning => {\n        warningsCount.set(warning, (warningsCount.get(warning) || 0) + 1);\n      });\n    });\n\n    const topWarnings = Array.from(warningsCount.entries())\n      .map(([warning, count]) => ({ warning, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5);\n\n    return res.status(200).json({\n      avgScore,\n      percentHighQuality,\n      topMissingFields,\n      topWarnings\n    });\n  } catch (error) {\n    console.error('Error al obtener estadísticas de impacto:', error);\n    return res.status(500).json({ message: 'Error interno del servidor' });\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/tests/basic.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/tests/e2e/mcp.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/AuditLogEntry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/ChecklistAudioItem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/ClinicalEvaluation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/CopilotSuggestion.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/Evaluation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/Visit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/VisitPDFMetadata.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/audio/ChecklistAudioItem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/audit/AuditLogEntry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/auth.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[352,355],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[352,355],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[410,413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[410,413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[422,425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[422,425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[439,442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[439,442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[474,477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[474,477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[486,489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[486,489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[503,506],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[503,506],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[540,543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[540,543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[554,557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[554,557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[569,572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[569,572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[710,713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[710,713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[775,778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[775,778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[884,887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[884,887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[936,939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[936,939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[954,957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[954,957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1126,1129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1126,1129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1559,1562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1559,1562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { UserRole } from '@/modules/auth/authService';\n\ndeclare module '@auth/core/types' {\n  export interface Session {\n    user?: {\n      id: string;\n      name?: string;\n      email?: string;\n      image?: string;\n      role?: UserRole;\n    };\n    expires: string;\n  }\n}\n\ndeclare module '@auth/core' {\n  export interface AuthOptions {\n    adapter?: any;\n    callbacks?: {\n      session?: (params: {session: any; token: any}) => Promise<any>;\n      jwt?: (params: {token: any; user?: any}) => Promise<any>;\n      signIn?: (params: {user: any; account: any; profile?: any}) => Promise<boolean>;\n      redirect?: (params: {url: string; baseUrl: string}) => Promise<string>;\n    };\n    cookies?: Record<string, any>;\n    debug?: boolean;\n    events?: Record<string, (...args: any[]) => Promise<void>>;\n    jwt?: {\n      secret?: string;\n      maxAge?: number;\n      encode?: (...args: any[]) => Promise<string>;\n      decode?: (...args: any[]) => Promise<any>;\n    };\n    pages?: {\n      signIn?: string;\n      signOut?: string;\n      error?: string;\n      verifyRequest?: string;\n      newUser?: string;\n    };\n    providers: any[];\n    secret?: string;\n    session?: {\n      strategy?: 'jwt' | 'database';\n      maxAge?: number;\n      updateAge?: number;\n    };\n    theme?: {\n      colorScheme?: 'auto' | 'dark' | 'light';\n      logo?: string;\n      brandColor?: string;\n    };\n    trustHost?: boolean;\n    useSecureCookies?: boolean;\n  }\n}\n\n// Exportar authOptions como un tipo utilizable\nexport interface NextAuthOptions extends AuthOptions {\n  providers: any[];\n}\n\nexport const authOptions: NextAuthOptions = {\n  providers: [],\n  // Valores predeterminados que pueden ser sobreescritos\n  pages: {\n    signIn: '/auth/login',\n  },\n  session: {\n    strategy: 'jwt',\n  },\n  callbacks: {\n    async session({ session, token }) {\n      if (session?.user) {\n        session.user.id = token.sub!;\n      }\n      return session;\n    },\n    async jwt({ token, user }) {\n      if (user) {\n        token.sub = user.id;\n      }\n      return token;\n    }\n  },\n};\n\nexport type UserRole = 'admin' | 'professional' | 'patient';\n\nexport interface User {\n  id: string;\n  email: string;\n  role: UserRole;\n  name?: string;\n  profilePicture?: string;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\nexport interface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  error: string | null;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  register: (userData: Partial<User> & { password: string }) => Promise<void>;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/clinical/ClinicalEvaluation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/clinical/Patient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/clinical/Visit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/copilot/CopilotSuggestion.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/custom/LangfuseTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/custom/SessionTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/events.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/export/VisitPDFMetadata.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/express.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[615,618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[615,618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[642,645],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[642,645],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[706,709],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[706,709],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[753,756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[753,756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[808,811],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[808,811],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Request, Response, NextFunction } from 'express';\nimport type { UserRole  } from '@/core/types';\n\n// Amplía la definición Request para incluir propiedades adicionales\ndeclare namespace Express {\n  export interface Request {\n    user?: {\n      id: string;\n      email: string;\n      name: string;\n      role: UserRole;\n    };\n  }\n}\n\n// Declaración global de express\ndeclare module 'express' {\n  export interface Request {\n    user?: {\n      id: string;\n      email: string;\n      name: string;\n      role: UserRole;\n    };\n  }\n  \n  export interface Response {\n    status(code: number): this;\n    json(body: any): this;\n    send(body: any): this;\n  }\n  \n  export interface NextFunction {\n    (err?: any): void;\n  }\n  \n  export function Router(): any;\n  \n  export default function createApplication(): any;\n}\n\n// Declaración para uuid\ndeclare module 'uuid' {\n  export function v4(): string;\n}\n\n// Tipos comunes de Express para referencia\nexport type ExpressRequest = Request;\nexport type ExpressResponse = Response;\nexport type ExpressNextFunction = NextFunction;\n\n// Tipos personalizados para los handlers con async/await\nexport type AsyncRequestHandler = (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => Promise<void | Response>;\n\n// Tipos para rutas API comunes\nexport interface ApiResponse<T = unknown> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  message?: string;\n  code?: string;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/impact.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/index.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/langfuse.d.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ObservationOptions' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LangfuseGeneration' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LangfuseSpan' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-declaration-merging","severity":2,"message":"Unsafe declaration merging between classes and interfaces.","line":15,"column":13,"nodeType":"Identifier","messageId":"unsafeMerging","endLine":15,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-declaration-merging","severity":2,"message":"Unsafe declaration merging between classes and interfaces.","line":22,"column":16,"nodeType":"Identifier","messageId":"unsafeMerging","endLine":22,"endColumn":24}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Langfuse as LangfuseBase } from 'langfuse';\nimport type {\n  LangfuseOptions,\n  TraceOptions,\n  ObservationOptions,\n  GetTracesOptions,\n  GetObservationsOptions,\n  LangfuseTrace,\n  LangfuseObservation,\n  LangfuseGeneration,\n  LangfuseSpan\n} from './custom/LangfuseTypes';\n\ndeclare module 'langfuse' {\n  interface Langfuse extends LangfuseBase {\n    track(event: {name: string; payload?: Record<string, unknown>; traceId?: string}): Promise<{id: string; traceId: string}>;\n    getObservations(options: GetObservationsOptions): Promise<{data: LangfuseObservation[]; totalCount: number}>;\n    getTraces(options: GetTracesOptions): Promise<{data: LangfuseTrace[]; totalCount: number}>;\n    getTrace(traceId: string): Promise<LangfuseTrace>;\n  }\n\n  export class Langfuse {\n    constructor(options: LangfuseOptions);\n    trace(options: TraceOptions | string): Promise<LangfuseTrace>;\n    getTraces(options?: GetTracesOptions): Promise<{ data: LangfuseTrace[]; hasMore: boolean }>;\n    getObservations(options?: GetObservationsOptions): Promise<{ data: LangfuseObservation[]; hasMore: boolean }>;\n  }\n}\n\ndeclare module 'langfuse-core' {\n  interface LangfuseCoreOptions {\n    host?: string;\n  }\n}\n\n// Declaración para langfuse-node\ndeclare module 'langfuse-node' {\n  export interface LangfuseOptions {\n    publicKey: string;\n    secretKey?: string;\n    baseUrl?: string;\n    host?: string;\n    debug?: boolean;\n    release?: string;\n    project?: string;\n    flushAt?: number;\n    flushInterval?: number;\n  }\n\n  export class Langfuse {\n    constructor(options: LangfuseOptions);\n    \n    trace(name: string, metadata?: Record<string, unknown>, userId?: string, tags?: string[]): LangfuseTrace;\n    \n    generation(params: {\n      name: string;\n      traceId?: string;\n      startTime?: Date;\n      endTime?: Date;\n      metadata?: Record<string, unknown>;\n      input?: string | Record<string, unknown>;\n      output?: string | Record<string, unknown>;\n      model?: string;\n      modelParameters?: Record<string, unknown>;\n      usage?: {\n        promptTokens?: number;\n        completionTokens?: number;\n        totalTokens?: number;\n      };\n    }): LangfuseGeneration;\n    \n    event(params: {\n      name: string;\n      traceId?: string;\n      startTime?: Date;\n      endTime?: Date;\n      metadata?: Record<string, unknown>;\n      input?: string | Record<string, unknown>;\n      output?: string | Record<string, unknown>;\n    }): void;\n    \n    span(params: {\n      name: string;\n      traceId?: string;\n      startTime?: Date;\n      endTime?: Date;\n      metadata?: Record<string, unknown>;\n      input?: string | Record<string, unknown>;\n      output?: string | Record<string, unknown>;\n    }): LangfuseSpan;\n    \n    score(params: {\n      name: string;\n      traceId?: string;\n      value: number;\n      comment?: string;\n    }): void;\n    \n    flush(): Promise<void>;\n  }\n\n  export class LangfuseTrace {\n    id: string;\n    \n    constructor(id: string, langfuse: Langfuse);\n    \n    generation(params: {\n      name: string;\n      startTime?: Date;\n      endTime?: Date;\n      metadata?: Record<string, unknown>;\n      input?: string | Record<string, unknown>;\n      output?: string | Record<string, unknown>;\n      model?: string;\n      modelParameters?: Record<string, unknown>;\n      usage?: {\n        promptTokens?: number;\n        completionTokens?: number;\n        totalTokens?: number;\n      };\n    }): LangfuseGeneration;\n    \n    event(params: {\n      name: string;\n      startTime?: Date;\n      endTime?: Date;\n      metadata?: Record<string, unknown>;\n      input?: string | Record<string, unknown>;\n      output?: string | Record<string, unknown>;\n    }): void;\n    \n    span(params: {\n      name: string;\n      startTime?: Date;\n      endTime?: Date;\n      metadata?: Record<string, unknown>;\n      input?: string | Record<string, unknown>;\n      output?: string | Record<string, unknown>;\n    }): LangfuseSpan;\n    \n    score(params: {\n      name: string;\n      value: number;\n      comment?: string;\n    }): void;\n    \n    update(params: {\n      name?: string;\n      userId?: string;\n      metadata?: Record<string, unknown>;\n      tags?: string[];\n      public?: boolean;\n    }): void;\n  }\n\n  export class LangfuseGeneration {\n    id: string;\n  }\n\n  export class LangfuseSpan {\n    id: string;\n  }\n}\n\nexport {};","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/langfuse.events.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LangfuseEventSchema' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":170,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":213,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5478,5481],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5478,5481],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":215,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":215,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5499,5502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5499,5502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":220,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5605,5608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5605,5608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":237,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5953,5956],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5953,5956],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":278,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6769,6772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6769,6772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":289,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":289,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7162,7165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7162,7165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":296,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7326,7329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7326,7329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":299,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":299,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7398,7401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7398,7401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":300,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7414,7417],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7414,7417],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":306,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":306,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7560,7563],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7560,7563],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from './schema-utils';\n\n/**\n * Definiciones de tipo para eventos de Langfuse\n */\n\n// Tipos base para eventos\nexport interface EventMetadata {\n  timestamp: string;\n  sessionId?: string;\n  userId?: string;\n  environment: string;\n}\n\n// Esquemas básicos para validación\nexport const baseEventSchema = z.object({\n  timestamp: z.string(),\n  sessionId: z.optional(z.string()),\n  userId: z.optional(z.string()),\n  environment: z.string()\n});\n\n// Eventos de formulario\nexport interface FormEvent {\n  formId: string;\n  action: 'submit' | 'validate' | 'error';\n  fieldCount: number;\n  completionTime?: number;\n  errorCount?: number;\n  timestamp: string;\n}\n\nconst formEventSchema = z.object({\n  formId: z.string(),\n  action: z.enumValues(['submit', 'validate', 'error'] as const),\n  fieldCount: z.number(),\n  completionTime: z.optional(z.number()),\n  errorCount: z.optional(z.number()),\n  timestamp: z.string()\n});\n\n// Eventos de visita\nexport interface VisitEvent {\n  visitId: string;\n  patientId: string;\n  action: 'create' | 'update' | 'delete' | 'view';\n  timestamp: string;\n  userId: string;\n}\n\n// Eventos de paciente\nexport interface PatientEvent {\n  patientId: string;\n  action: 'create' | 'update' | 'delete' | 'view';\n  timestamp: string;\n  userId: string;\n}\n\n// Eventos de AI\nexport interface AIEvent {\n  type: 'suggestion' | 'completion' | 'generation';\n  inputTokens: number;\n  outputTokens: number;\n  model: string;\n  duration: number;\n  timestamp: string;\n  success: boolean;\n  error?: string;\n}\n\n// Eventos de audio\nexport type AudioEvent = {\n  action: 'start_listening' | 'validate_field' | 'approve_data';\n  field?: string;\n  value?: string;\n  validated?: boolean;\n  timestamp: string;\n};\n\nconst audioEventSchema = z.object({\n  action: z.enumValues(['start_listening', 'validate_field', 'approve_data'] as const),\n  field: z.optional(z.string()),\n  value: z.optional(z.string()),\n  validated: z.optional(z.boolean()),\n  timestamp: z.string()\n});\n\n// Eventos de copiloto\nexport type CopilotEvent = {\n  action: 'generate' | 'feedback' | 'select' | 'reject';\n  source?: string;\n  field?: string;\n  value?: string;\n  modelId?: string;\n  timestamp: string;\n};\n\nconst copilotEventSchema = z.object({\n  action: z.enumValues(['generate', 'feedback', 'select', 'reject'] as const),\n  source: z.optional(z.string()),\n  field: z.optional(z.string()),\n  value: z.optional(z.string()),\n  modelId: z.optional(z.string()),\n  timestamp: z.string()\n});\n\n// Eventos de administrador\nexport type AdminEvent = {\n  action: 'view_report' | 'export_data' | 'settings_change' | 'user_management';\n  userId: string;\n  details?: Record<string, unknown>;\n  resourceId?: string;\n  resourceType?: string;\n  result?: 'success' | 'error' | 'warning';\n  timestamp: string;\n};\n\nconst adminEventSchema = z.object({\n  action: z.enumValues(['view_report', 'export_data', 'settings_change', 'user_management'] as const),\n  userId: z.string(),\n  details: z.optional(z.object({})),\n  resourceId: z.optional(z.string()),\n  resourceType: z.optional(z.string()),\n  result: z.optional(z.enumValues(['success', 'error', 'warning'] as const)),\n  timestamp: z.string()\n});\n\n// Eventos EMR\nexport type EmrEvent = {\n  action: 'create' | 'update' | 'delete' | 'view' | 'search';\n  resourceType: 'patient' | 'visit' | 'evaluation' | 'note';\n  resourceId: string;\n  userId: string;\n  details?: Record<string, unknown>;\n  metadata?: {\n    changeCount?: number;\n    responseTime?: number;\n    source?: string;\n  };\n  result?: 'success' | 'error' | 'warning';\n  timestamp: string;\n};\n\nconst emrEventSchema = z.object({\n  action: z.enumValues(['create', 'update', 'delete', 'view', 'search'] as const),\n  resourceType: z.enumValues(['patient', 'visit', 'evaluation', 'note'] as const),\n  resourceId: z.string(),\n  userId: z.string(),\n  details: z.optional(z.object({})),\n  metadata: z.optional(z.object({\n    changeCount: z.optional(z.number()),\n    responseTime: z.optional(z.number()),\n    source: z.optional(z.string())\n  })),\n  result: z.optional(z.enumValues(['success', 'error', 'warning'] as const)),\n  timestamp: z.string()\n});\n\n// Tipo unión para todos los eventos\nexport type LangfuseEvent = \n  | (EventMetadata & FormEvent)\n  | (EventMetadata & VisitEvent)\n  | (EventMetadata & PatientEvent)\n  | (EventMetadata & AIEvent)\n  | AudioEvent\n  | CopilotEvent\n  | AdminEvent\n  | EmrEvent;\n\nconst LangfuseEventSchema = z.union([\n  formEventSchema,\n  audioEventSchema,\n  copilotEventSchema,\n  adminEventSchema,\n  emrEventSchema\n]);\n\n// Validador general de eventos\nexport const validateEvent = (event: unknown): LangfuseEvent => {\n  // En la versión con tipo estricto, simplemente confiamos en TypeScript\n  // y hacemos un cast. En un entorno de producción, podríamos agregar\n  // validación runtime más robusta aquí.\n  return event as LangfuseEvent;\n};\n\n/**\n * Tipos específicos para eventos de Langfuse\n * Estos complementan las definiciones en langfuse.d.ts\n */\n\n// Tipo para la respuesta de observaciones\nexport interface LangfuseObservationResponse {\n  data: LangfuseObservation[];\n  totalCount: number;\n}\n\n// Tipo para la respuesta de traces\nexport interface LangfuseTraceResponse {\n  data: LangfuseTrace[];\n  totalCount: number;\n}\n\n// Tipo para una observación de Langfuse\nexport interface LangfuseObservation {\n  id: string;\n  name: string;\n  traceId: string;\n  startTime: string;\n  endTime?: string;\n  input?: {\n    field?: string;\n    feedback?: 'positive' | 'negative' | 'ignored';\n    [key: string]: any;\n  };\n  output?: any;\n  metadata?: {\n    patientId?: string;\n    visitId?: string;\n    userId?: string;\n    [key: string]: any;\n  };\n  type?: string;\n  level?: 'DEBUG' | 'DEFAULT' | 'WARNING' | 'ERROR';\n  statusMessage?: string;\n}\n\n// Tipo para un trace de Langfuse\nexport interface LangfuseTrace {\n  id: string;\n  name: string;\n  startTime: string;\n  endTime?: string;\n  metadata?: {\n    patientId?: string;\n    visitId?: string;\n    userId?: string;\n    [key: string]: any;\n  };\n  observations?: LangfuseObservation[];\n  tags?: string[];\n  userId?: string;\n  sessionId?: string;\n  version?: string;\n}\n\n// Opciones para obtener traces\nexport interface GetTracesOptions {\n  limit?: number;\n  offset?: number;\n  page?: number;\n  userId?: string;\n  search?: string;\n  startTime?: string;\n  endTime?: string;\n  orderBy?: string;\n  orderDir?: 'ASC' | 'DESC';\n  name?: string;\n}\n\n// Opciones para obtener observaciones\nexport interface GetObservationsOptions {\n  limit?: number;\n  offset?: number;\n  page?: number;\n  traceId?: string;\n  userId?: string;\n  search?: string;\n  startTime?: string;\n  endTime?: string;\n  orderBy?: string;\n  orderDir?: 'ASC' | 'DESC';\n  name?: string;\n}\n\n// Opciones para crear un trace\nexport interface TraceOptions {\n  name: string;\n  metadata?: Record<string, any>;\n  userId?: string;\n  id?: string;\n  sessionId?: string;\n  tags?: string[];\n}\n\n// Tipo para hacer adaptaciones de métodos no incluidos\nexport interface LangfuseMethods {\n  getTraces(options: GetTracesOptions): Promise<LangfuseTraceResponse>;\n  getObservations(options: GetObservationsOptions): Promise<LangfuseObservationResponse>;\n  trace(options: TraceOptions | string | Record<string, any>): Promise<LangfuseTrace>;\n}\n\n// Tipo para parámetros de eventos\nexport interface EventParams {\n  name: string;\n  traceId?: string;\n  metadata?: Record<string, any>;\n  startTime?: Date | string;\n  endTime?: Date | string;\n  input?: any;\n  output?: any;\n}\n\n// Tipo para crear un evento\nexport interface GenerationParams extends EventParams {\n  model?: string;\n  modelParameters?: Record<string, any>;\n  promptTokens?: number;\n  completionTokens?: number;\n  totalTokens?: number;\n}\n\n// Helper para tipar objetos de parámetros de eventos\nexport function createEventParams(params: EventParams): EventParams {\n  return params;\n}\n\n// Helper para tipar objetos de parámetros de generaciones\nexport function createGenerationParams(params: GenerationParams): GenerationParams {\n  return params;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/legacy-adapters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/mui.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/next-auth.d.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":17,"column":13,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":17,"endColumn":20,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[585,627],"text":"type Session = CustomSession"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":18,"column":13,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":18,"endColumn":17,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[630,666],"text":"type User = CustomUser"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":17},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":19,"column":13,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":19,"endColumn":20,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[669,711],"text":"type Account = CustomAccount"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Account' is defined but never used. Allowed unused vars must match /^_/u.","line":19,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":20},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":20,"column":13,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":20,"endColumn":20,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[714,756],"text":"type Profile = CustomProfile"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Profile' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":20},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":21,"column":13,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":21,"endColumn":21,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[759,803],"text":"type Provider = CustomProvider"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Provider' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getServerSession' is defined but never used. Allowed unused vars must match /^_/u.","line":58,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":28},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":66,"column":13,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":66,"endColumn":28,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1660,1718],"text":"type CredentialInput = CustomCredentialInput"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CredentialInput' is defined but never used. Allowed unused vars must match /^_/u.","line":66,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":28},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":67,"column":13,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":67,"endColumn":30,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[1721,1783],"text":"type CredentialsConfig = CustomCredentialsConfig"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Declaración de módulos para next-auth y componentes relacionados\nimport type { NextAuthOptions } from './auth';\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport type { JWT } from 'next-auth/jwt';\nimport type { NextRequest, NextResponse } from 'next/server';\nimport type {\n  Session as CustomSession,\n  User as CustomUser,\n  Account as CustomAccount,\n  Profile as CustomProfile,\n  Provider as CustomProvider,\n  CredentialInput as CustomCredentialInput,\n  CredentialsConfig as CustomCredentialsConfig\n} from './custom/SessionTypes';\n\ndeclare module 'next-auth' {\n  interface Session extends CustomSession {}\n  interface User extends CustomUser {}\n  interface Account extends CustomAccount {}\n  interface Profile extends CustomProfile {}\n  interface Provider extends CustomProvider {}\n\n  // Interfaces exportables para uso futuro\n  export interface _User {\n    id: string;\n    name: string;\n    email: string;\n    role: string;\n  }\n\n  export interface _Account {\n    provider: string;\n    type: string;\n    id: string;\n    accessToken?: string;\n    refreshToken?: string;\n    expiresAt?: number;\n  }\n\n  export interface _Profile {\n    id: string;\n    name: string;\n    email: string;\n    image?: string;\n  }\n\n  export interface _Provider {\n    id: string;\n    name: string;\n    type: string;\n    signinUrl: string;\n    callbackUrl: string;\n  }\n\n  function NextAuth(options: NextAuthOptions): Promise<Session | null>;\n  export default NextAuth;\n\n  function getServerSession(\n    req: NextApiRequest,\n    res: NextApiResponse,\n    options?: NextAuthOptions\n  ): Promise<Session | null>;\n}\n\ndeclare module 'next-auth/providers/credentials' {\n  interface CredentialInput extends CustomCredentialInput {}\n  interface CredentialsConfig extends CustomCredentialsConfig {}\n\n  function CredentialsProvider(config: CredentialsConfig): Provider;\n  export default CredentialsProvider;\n}\n\ndeclare module 'next-auth/middleware' {\n  interface MiddlewareOptions {\n    callbacks?: {\n      authorized?: (params: { token: JWT; req: NextRequest }) => boolean;\n    };\n    pages?: {\n      signIn?: string;\n      signOut?: string;\n      error?: string;\n    };\n  }\n\n  export function withAuth(\n    middleware: (req: NextRequest) => Promise<NextResponse>,\n    options?: MiddlewareOptions\n  ): (req: NextRequest) => Promise<NextResponse>;\n}\n\ndeclare module 'next/server' {\n  interface RequestCookies {\n    get(name: string): { name: string; value: string } | undefined;\n    getAll(): Array<{ name: string; value: string }>;\n    set(name: string, value: string): void;\n    delete(name: string): void;\n    clear(): void;\n  }\n\n  export interface NextRequest {\n    url: string;\n    headers: Headers;\n    cookies: RequestCookies;\n  }\n}\n\ndeclare module 'next' {\n  export interface NextApiRequest {\n    headers: {\n      [key: string]: string | string[] | undefined;\n    };\n    query: {\n      [key: string]: string | string[] | undefined;\n    };\n    cookies: {\n      [key: string]: string | undefined;\n    };\n    body: unknown;\n  }\n\n  export interface NextApiResponse {\n    status(code: number): NextApiResponse;\n    json<T>(data: T): void;\n    send<T>(data: T): void;\n    end(): void;\n    setHeader(name: string, value: string): void;\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/next.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/node.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/papaparse.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[487,490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[487,490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[563,566],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[563,566],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1030,1033],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1030,1033],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1248,1251],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1248,1251],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1266,1269],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1266,1269],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1358,1361],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1358,1361],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1400,1403],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1400,1403],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-wrapper-object-types","severity":2,"message":"Prefer using the primitive `object` as a type name, rather than the upper-cased `Object`.","line":63,"column":17,"nodeType":"Identifier","messageId":"bannedClassType","endLine":63,"endColumn":23,"fix":{"range":[1546,1552],"text":"object"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1568,1571],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1568,1571],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"declare module 'papaparse' {\n  export interface ParseConfig {\n    delimiter?: string;\n    newline?: string;\n    quoteChar?: string;\n    escapeChar?: string;\n    header?: boolean;\n    dynamicTyping?: boolean;\n    preview?: number;\n    encoding?: string;\n    worker?: boolean;\n    comments?: boolean | string;\n    download?: boolean;\n    skipEmptyLines?: boolean | 'greedy';\n    fastMode?: boolean;\n    withCredentials?: boolean;\n    transform?: (value: string, field: string | number) => any;\n    delimitersToGuess?: string[];\n    complete?: (results: ParseResult<any>) => void;\n    error?: (error: Error) => void;\n  }\n\n  export interface ParseResult<T> {\n    data: T[];\n    errors: Array<{\n      type: string;\n      code: string;\n      message: string;\n      row: number;\n    }>;\n    meta: {\n      delimiter: string;\n      linebreak: string;\n      aborted: boolean;\n      truncated: boolean;\n      cursor: number;\n      fields?: string[];\n    };\n  }\n\n  export interface UnparseConfig {\n    quotes?: boolean | boolean[] | ((value: any) => boolean);\n    quoteChar?: string;\n    escapeChar?: string;\n    delimiter?: string;\n    header?: boolean;\n    newline?: string;\n    skipEmptyLines?: boolean | 'greedy';\n    columns?: string[] | { [key: string]: any } | ((fields: any) => string[]);\n  }\n\n  export interface UnparseObject {\n    fields?: string[];\n    data: any[][];\n  }\n\n  export function parse<T = any>(\n    input: string | File | NodeJS.ReadableStream,\n    config?: ParseConfig\n  ): ParseResult<T>;\n\n  export function unparse(\n    data: Array<Object> | Array<Array<any>> | UnparseObject,\n    config?: UnparseConfig\n  ): string;\n\n  const Papa: {\n    parse: typeof parse;\n    unparse: typeof unparse;\n  };\n\n  export default Papa;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/patient.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[289,292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[289,292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[724,727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[724,727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface PatientEval {\n  patientId: string;\n  traceId?: string;\n  anamnesis?: string;\n  exam?: string;\n  diagnosis?: string;\n  plan?: string;\n  voiceApprovedNotes?: string[];\n  voiceRejectedNotes?: string[];\n  completenessScore?: number;\n  observaciones?: string;\n  [key: string]: any;\n}\n\nexport interface Patient {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email?: string;\n  phone?: string;\n  birthDate: string;\n  gender: 'M' | 'F' | 'O';\n  address?: {\n    street?: string;\n    city?: string;\n    state?: string;\n    zipCode?: string;\n  };\n  medicalHistory?: string[];\n  allergies?: string[];\n  createdAt: string;\n  updatedAt: string;\n  evaluations?: PatientEval[];\n  metadata?: {\n    [key: string]: any;\n  };\n}\n\nexport interface CopilotFeedback {\n  field: string;\n  value: string;\n  accepted: boolean;\n}\n\nexport interface CopilotFormData {\n  motivo: string;\n  observaciones: string;\n  diagnostico: string;\n  traceId?: string;\n}\n\nexport interface PatientService {\n  getPatient(id: string): Promise<Patient>;\n  getPatients(): Promise<Patient[]>;\n  createPatient(patient: Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>): Promise<Patient>;\n  updatePatient(id: string, patient: Partial<Patient>): Promise<Patient>;\n  deletePatient(id: string): Promise<void>;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/react-i18next.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/react-jsx.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/react-router.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[548,551],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[548,551],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[733,736],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[733,736],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[788,791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[788,791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n// Interfaces para react-router-dom v6\ndeclare module 'react-router-dom' {\n  export interface RouteObject {\n    caseSensitive?: boolean;\n    children?: RouteObject[];\n    element?: React.ReactNode;\n    index?: boolean;\n    path?: string;\n  }\n\n  export interface Location {\n    pathname: string;\n    search: string;\n    hash: string;\n    state: unknown;\n    key: string;\n  }\n\n  export interface Params {\n    [key: string]: string;\n  }\n\n  export function useNavigate(): (to: string, options?: { replace?: boolean; state?: any }) => void;\n  export function useParams<T extends Params = Params>(): T;\n  export function useLocation(): Location;\n  \n  export function createBrowserRouter(routes: RouteObject[]): any;\n  export function RouterProvider(props: { router: any }): JSX.Element;\n  \n  export const BrowserRouter: React.ComponentType<{ children?: React.ReactNode }>;\n  export const Routes: React.ComponentType<{ children?: React.ReactNode }>;\n  export const Route: React.ComponentType<{\n    path?: string;\n    element?: React.ReactNode;\n    children?: React.ReactNode;\n  }>;\n  export const Navigate: React.ComponentType<{ to: string; replace?: boolean }>;\n  export const Link: React.ComponentType<{ to: string; children?: React.ReactNode }>;\n  export const Outlet: React.ComponentType;\n}\n\n// Declaración para compatibilidad con react-router-dom v6.30.0\ndeclare module 'react-router' {\n  export * from 'react-router-dom';\n}\n\n// Asegurarnos de que Link funcione\ndeclare module 'react-router' {\n  export interface LinkProps {\n    to: string;\n    children?: React.ReactNode;\n    className?: string;\n    onClick?: () => void;\n  }\n  \n  export const Link: React.FC<LinkProps>;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/schema-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'schema' is defined but never used. Allowed unused args must match /^_/u.","line":26,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[653,656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[653,656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'shape' is defined but never used. Allowed unused args must match /^_/u.","line":30,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'keySchema' is defined but never used. Allowed unused args must match /^_/u.","line":34,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'valueSchema' is defined but never used. Allowed unused args must match /^_/u.","line":34,"column":67,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":78},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":38,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'values' is defined but never used. Allowed unused args must match /^_/u.","line":50,"column":70,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":76},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1388,1391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1388,1391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'schemas' is defined but never used. Allowed unused args must match /^_/u.","line":54,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1561,1564],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1561,1564],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'discriminator' is defined but never used. Allowed unused args must match /^_/u.","line":59,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'schemas' is defined but never used. Allowed unused args must match /^_/u.","line":60,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1814,1817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1814,1817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2034,2037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2034,2037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2297,2300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2297,2300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Utilidades para manejo de esquemas de datos\n * Compatible con TypeScript strict\n */\n\n// Tipos básicos para esquemas\nexport interface Schema<T> {\n  _type: T;\n  optional(): Schema<T | undefined>;\n  nullable(): Schema<T | null>;\n}\n\n// Funciones de creación de esquemas\nexport function string(): Schema<string> {\n  return createSchema<string>();\n}\n\nexport function number(): Schema<number> {\n  return createSchema<number>();\n}\n\nexport function boolean(): Schema<boolean> {\n  return createSchema<boolean>();\n}\n\nexport function array<T>(schema: Schema<T>): Schema<T[]> {\n  return createSchema<T[]>();\n}\n\nexport function object<T extends Record<string, any>>(shape: { [K in keyof T]: Schema<T[K]> }): Schema<T> {\n  return createSchema<T>();\n}\n\nexport function record<K extends string, V>(keySchema: Schema<K>, valueSchema: Schema<V>): Schema<Record<K, V>> {\n  return createSchema<Record<K, V>>();\n}\n\nexport function literal<T extends string | number | boolean>(value: T): Schema<T> {\n  return createSchema<T>();\n}\n\nexport function optional<T>(schema: Schema<T>): Schema<T | undefined> {\n  return schema.optional();\n}\n\nexport function nullable<T>(schema: Schema<T>): Schema<T | null> {\n  return schema.nullable();\n}\n\nexport function enumValues<T extends readonly [string, ...string[]]>(values: T): Schema<T[number]> {\n  return createSchema<T[number]>();\n}\n\nexport function union<T extends any[]>(schemas: { [K in keyof T]: Schema<T[K]> }): Schema<T[number]> {\n  return createSchema<T[number]>();\n}\n\nexport function discriminatedUnion<D extends string, T extends any[]>(\n  discriminator: D,\n  schemas: { [K in keyof T]: Schema<T[K] & { [key in D]: string }> }\n): Schema<T[number]> {\n  return createSchema<T[number]>();\n}\n\n// Funciones auxiliares\nfunction createSchema<T>(): Schema<T> {\n  return {\n    _type: null as any,\n    optional: function() {\n      return createSchema<T | undefined>();\n    },\n    nullable: function() {\n      return createSchema<T | null>();\n    }\n  };\n}\n\n// Tipo de inferencia\nexport type infer<T extends Schema<any>> = T['_type'];\n\n// Exportamos un objeto con todos los métodos\nexport const z = {\n  string,\n  number,\n  boolean,\n  array,\n  object,\n  record,\n  literal,\n  optional,\n  nullable,\n  enumValues,\n  enum: enumValues,\n  union,\n  discriminatedUnion,\n  infer: null as any // Solo para compatibilidad de tipo\n};\n\nexport default z;","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/services/AuditLogService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/services/PatientService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/services/VisitService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/structuredSuggestion.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/suggestions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/testing/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/testing/jest.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[124,127],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[124,127],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[134,137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[134,137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[222,225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[222,225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[244,247],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[244,247],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[330,333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[330,333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[351,354],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[351,354],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Mock } from 'jest-mock';\n\nexport type JestMock<T> = Mock<T>;\nexport type JestMockFunction<T extends (...args: any[]) => any> = Mock<ReturnType<T>, Parameters<T>>;\n\nexport interface JestMockContext {\n  calls: any[][];\n  instances: any[];\n  invocationCallOrder: number[];\n  results: { type: 'return' | 'throw'; value: any }[];\n  lastCall: any[];\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/testing/testing-library.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/utils/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/utils/router.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/zod-adapter.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[259,262],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[259,262],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[678,681],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[678,681],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[824,827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[824,827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[912,915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[912,915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1033,1036],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1033,1036],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Adaptador para simular métodos de Zod que no existen\n * o tienen una API diferente en nuestra implementación.\n */\nimport type { z, Schema  } from '@/types/zod-utils';\n\n// Tipos para compatibilidad\ntype ZodType<T> = Schema<T>;\ntype ZodTypeAny = ZodType<any>;\n\n// Función para crear un enum\nexport function createEnum<T extends [string, ...string[]]>(values: T) {\n  return z.enumValues(values);\n}\n\n// Función para crear un literal\nexport function createLiteral<T extends string | number | boolean>(value: T) {\n  return z.literal(value);\n}\n\n// Función para crear una unión discriminada\nexport function createDiscriminatedUnion<\n  K extends string,\n  Options extends ZodType<any>[]\n>(discriminator: K, options: Options) {\n  // Utilizamos la versión con spread operator para compatibilidad\n  return z.union(...(options as any));\n}\n\n// Función para crear una unión\nexport function createUnion<T extends ZodType<any>[]>(\n  types: T\n) {\n  // Utilizamos la versión con spread operator para compatibilidad\n  return z.union(...(types as any));\n}\n\n// Tipo de inferencia\nexport type Infer<T extends ZodTypeAny> = T['_type'];\n\nexport const zodAdapter = {\n  createEnum,\n  createLiteral,\n  createDiscriminatedUnion,\n  createUnion,\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/zod-shim.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[427,430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[427,430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[467,470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[467,470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'T' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[735,738],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[735,738],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[771,774],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[771,774],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1274,1277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1274,1277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Este archivo proporciona un \"shim\" o adaptador que permite\n * usar parte de la API de zod pero mapeando a nuestra propia\n * implementación de validación.\n */\nimport * as z from '@/types/zod-utils';\n\n// Re-exportamos el objeto z para un uso más sencillo\nexport const zod = z;\n\n// Tipo para representar cualquier esquema de validación\nexport type ZodType<T> = z.Schema<T>;\nexport type ZodRawShape = Record<string, ZodType<any>>;\nexport type ZodTypeAny = ZodType<any>;\n\n// Función para crear un esquema de enumeración\nexport function createEnum<T extends readonly [string, ...string[]]>(values: T) {\n  return z.enumValues(values);\n}\n\n// Función para crear un esquema de objeto\nexport function createObject<T extends Record<string, any>>(shape: Record<string, ZodType<any>>) {\n  return z.object(shape);\n}\n\n// Función para crear un esquema de array\nexport function createArray<T>(schema: ZodType<T>) {\n  return z.array(schema);\n}\n\n// Funciones básicas\nexport function createString() {\n  return z.string();\n}\n\nexport function createNumber() {\n  return z.number();\n}\n\nexport function createBoolean() {\n  return z.boolean();\n}\n\nexport function createOptional<T>(schema: ZodType<T>) {\n  return schema.optional();\n}\n\n// Tipo para inferencia\nexport type Infer<T extends ZodType<any>> = T['_type'];\n\n// Función para validar datos\nexport function parse<T>(schema: ZodType<T>, data: unknown): T {\n  return schema.parse(data);\n}\n\n// Exportaciones para compatibilidad\nexport default {\n  enum: createEnum,\n  object: createObject,\n  array: createArray,\n  string: createString,\n  number: createNumber,\n  boolean: createBoolean,\n  optional: createOptional,\n  parse\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/zod-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-namespace","severity":2,"message":"ES2015 module syntax is preferred over namespaces.","line":18,"column":8,"nodeType":"TSModuleDeclaration","messageId":"moduleSyntaxIsPreferred","endLine":33,"endColumn":2},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":23,"column":20,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":23,"endColumn":29,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[514,560],"text":"type ZodString = ZodType<string>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":24,"column":20,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":24,"endColumn":29,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[570,616],"text":"type ZodNumber = ZodType<number>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":25,"column":20,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":25,"endColumn":30,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[626,674],"text":"type ZodBoolean = ZodType<boolean>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":26,"column":20,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":26,"endColumn":28,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[684,729],"text":"type ZodArray<T> = ZodType<T[]>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":27,"column":20,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":27,"endColumn":29,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[739,783],"text":"type ZodObject<T> = ZodType<T>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":28,"column":20,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":28,"endColumn":27,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[793,835],"text":"type ZodEnum<T> = ZodType<T>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":29,"column":20,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":29,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[845,903],"text":"type ZodOptional<T> = ZodType<T | undefined>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":30,"column":20,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":30,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[913,966],"text":"type ZodNullable<T> = ZodType<T | null>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'schema' is defined but never used. Allowed unused args must match /^_/u.","line":86,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2417,2420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2417,2420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'shape' is defined but never used. Allowed unused args must match /^_/u.","line":90,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'keyType' is defined but never used. Allowed unused args must match /^_/u.","line":94,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'valueType' is defined but never used. Allowed unused args must match /^_/u.","line":94,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":74},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'values' is defined but never used. Allowed unused args must match /^_/u.","line":98,"column":70,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":76},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":102,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":67},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3063,3066],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3063,3066],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'schemas' is defined but never used. Allowed unused args must match /^_/u.","line":110,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":110,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'key' is defined but never used. Allowed unused args must match /^_/u.","line":117,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'schemas' is defined but never used. Allowed unused args must match /^_/u.","line":117,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3397,3400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3397,3400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3426,3429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3426,3429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'schema' is defined but never used. Allowed unused args must match /^_/u.","line":126,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":131,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3617,3620],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3617,3620],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Utilidades minimalistas para esquemas de validación\n * Versión simul-compatible sin dependencias de Zod\n */\n\n// Tipos básicos para esquemas\nexport interface Schema<T> {\n  _type: T;\n  optional(): Schema<T | undefined>;\n  nullable(): Schema<T | null>;\n  parse(data: unknown): T;\n  uuid(): Schema<string>;\n  email(): Schema<string>;\n  datetime(): Schema<string>;\n}\n\n// Espacio de nombres para tipos compatibles con zod\nexport namespace ZodSchema {\n  export interface ZodType<T> {\n    _type: T;\n  }\n  \n  export interface ZodString extends ZodType<string> {}\n  export interface ZodNumber extends ZodType<number> {}\n  export interface ZodBoolean extends ZodType<boolean> {}\n  export interface ZodArray<T> extends ZodType<T[]> {}\n  export interface ZodObject<T> extends ZodType<T> {}\n  export interface ZodEnum<T> extends ZodType<T> {}\n  export interface ZodOptional<T> extends ZodType<T | undefined> {}\n  export interface ZodNullable<T> extends ZodType<T | null> {}\n  \n  export type infer<T> = T extends ZodType<infer R> ? R : never;\n}\n\n// Simulación de error de Zod\nexport class ZodError {\n  errors: Array<{path: string[], message: string}>;\n  \n  constructor(errors: Array<{path: string[], message: string}>) {\n    this.errors = errors;\n  }\n}\n\n// Funciones de creación de esquemas\nfunction createSchema<T>(): Schema<T> {\n  return {\n    _type: {} as T,\n    optional: function() { return createSchema<T | undefined>(); },\n    nullable: function() { return createSchema<T | null>(); },\n    parse: function(data: unknown) { return data as T; },\n    uuid: function() { return this as Schema<string>; },\n    email: function() { return this as Schema<string>; },\n    datetime: function() { return this as Schema<string>; }\n  };\n}\n\n// Crea un esquema para strings\nexport function string(): Schema<string> {\n  const schema = createSchema<string>();\n  \n  // Métodos de validación específicos para string\n  const extendedSchema = {\n    ...schema,\n    uuid: () => {\n      return schema;\n    },\n    email: () => {\n      return schema;\n    },\n    datetime: () => {\n      return schema;\n    }\n  };\n  \n  return extendedSchema;\n}\n\nexport function number(): Schema<number> {\n  return createSchema<number>();\n}\n\nexport function boolean(): Schema<boolean> {\n  return createSchema<boolean>();\n}\n\nexport function array<T>(schema: Schema<T>): Schema<T[]> {\n  return createSchema<T[]>();\n}\n\nexport function object<T extends Record<string, any>>(shape: { [K in keyof T]: Schema<T[K]> }): Schema<T> {\n  return createSchema<T>();\n}\n\nexport function record<K extends string, V>(keyType: Schema<K>, valueType: Schema<V>): Schema<Record<K, V>> {\n  return createSchema<Record<K, V>>();\n}\n\nexport function enumValues<T extends readonly [string, ...string[]]>(values: T): Schema<T[number]> {\n  return createSchema<T[number]>();\n}\n\nexport function literal<T extends string | number | boolean>(value: T): Schema<T> {\n  return createSchema<T>();\n}\n\nexport function optional<T>(schema: Schema<T>): Schema<T | undefined> {\n  return schema.optional();\n}\n\nexport function union<T extends Array<Schema<any>>>(...schemas: T): Schema<T[number]['_type']> {\n  return createSchema<T[number]['_type']>();\n}\n\nexport function discriminatedUnion<\n  K extends string,\n  T extends Array<Schema<{ [P in K]: string }>>\n>(key: K, schemas: T): Schema<T[number]['_type']> {\n  return createSchema<T[number]['_type']>();\n}\n\nexport function any(): Schema<any> {\n  return createSchema<any>();\n}\n\n// Función para inferir el tipo\nexport function infer<T>(schema: Schema<T>): T {\n  return {} as T;\n}\n\n// Tipo para inferir el tipo de un esquema\nexport type Infer<T extends Schema<any>> = T['_type'];\n\n// Re-exportamos todo como 'z'\nexport const z = {\n  string,\n  number,\n  boolean,\n  array,\n  object,\n  record,\n  literal,\n  optional,\n  union,\n  enumValues: enumValues,  // Usamos enumValues en lugar de enum (palabra reservada)\n  discriminatedUnion,\n  any,\n  ZodError,\n  infer\n}; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/types/zod.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[76,79],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[76,79],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[111,114],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[111,114],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[147,150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[147,150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[186,189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[186,189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[192,195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[192,195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[231,234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[231,234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[237,240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[237,240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[281,284],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[281,284],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[289,292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[289,292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[331,334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[331,334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[337,340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[337,340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[380,383],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[380,383],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[398,401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[398,401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[404,407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[404,407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[440,443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[440,443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[479,482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[479,482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[490,493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[490,493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[496,499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[496,499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'T' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[564,567],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[564,567],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"declare module 'zod' {\n  export namespace z {\n    export function string(): any;\n    export function number(): any;\n    export function boolean(): any;\n    export function object(shape: any): any;\n    export function array(schema: any): any;\n    export function createEnum(values: any[]): any;\n    export function optional(schema: any): any;\n    export function record(keySchema: any, valueSchema: any): any;\n    export function unknown(): any;\n    export function parse(schema: any, data: any): any;\n    \n    export namespace infer {\n      export type infer<T> = any;\n    }\n  }\n  \n  export const z: typeof z;\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/utils/evals/structuredVisit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Documents/AIDUXCARE/src/vite-env.d.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":76,"column":18,"nodeType":"TSExternalModuleReference","messageId":"noRequireImports","endLine":76,"endColumn":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"vite/client\" />\n\n// Declaración global para resolver problemas de importación\ndeclare module '@/core/services/AuditLogService';\ndeclare module '@/core/services/audit/AuditLogService';\ndeclare module '@/core/context/AuthContext';\ndeclare module '@/core/contexts/AuthContext';\ndeclare module '@/core/config/routes';\ndeclare module '@/core/lib/langfuse.client';\ndeclare module '@/core/lib/supabaseClient';\ndeclare module '@/hooks/useCopilot';\ndeclare module '@/core/lib/langfuse.config';\ndeclare module '@/core/types/supabase';\ndeclare module '@/core/services/visit/VisitService';\ndeclare module '@/core/services/patient/PatientService';\ndeclare module '@/core/services';\n\n// Declarar otros módulos que puedan estar causando problemas\ndeclare module '@/core/services/*';\ndeclare module '@/core/contexts/*';\ndeclare module '@/core/lib/*';\ndeclare module '@/components/*';\ndeclare module '@/modules/*';\n\n/**\n * Extiende la declaración de variables de entorno\n * para que estén disponibles con autocompletado\n */\ninterface ImportMetaEnv {\n  // Variables de entorno básicas de Vite\n  readonly MODE: string;\n  readonly DEV: boolean;\n  readonly PROD: boolean;\n  readonly SSR: boolean;\n  \n  // Variables requeridas (deben estar siempre presentes)\n  readonly VITE_API_BASE_URL: string;\n  \n  // Claves para servicios externos (opcionales)\n  readonly VITE_SUPABASE_URL?: string;\n  readonly VITE_SUPABASE_KEY?: string;\n  \n  // Claves para integración con Langfuse (opcionales)\n  readonly VITE_LANGFUSE_PUBLIC_KEY?: string;\n  readonly VITE_LANGFUSE_SECRET_KEY?: string;\n  readonly VITE_LANGFUSE_BASE_URL?: string;\n  \n  // Claves para integración con Hugging Face\n  readonly VITE_HUGGINGFACE_API_KEY?: string;\n  \n  // Otros servicios y configuraciones\n  readonly VITE_OPENAI_API_KEY?: string;\n  readonly VITE_STORAGE_PREFIX?: string;\n  readonly VITE_NEXTAUTH_URL?: string;\n  readonly VITE_NEXTAUTH_SECRET?: string;\n  \n  // Entorno actual\n  readonly VITE_ENV?: 'development' | 'production' | 'test';\n  readonly VITE_DEBUG?: 'true' | 'false';\n  \n  // Características\n  readonly VITE_ENABLE_ANALYTICS?: 'true' | 'false';\n}\n\n/**\n * Hacemos disponible ImportMetaEnv para autocompletado global\n */\ninterface ImportMeta {\n  readonly env: ImportMetaEnv;\n}\n\n/**\n * Declaración para soporte de módulos .svg\n */\ndeclare module '*.svg' {\n  import React = require('react');\n  export const ReactComponent: React.FC<React.SVGProps<SVGSVGElement>>;\n  const src: string;\n  export default src;\n} ","usedDeprecatedRules":[]}]